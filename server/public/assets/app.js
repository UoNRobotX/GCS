/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _keenUi = __webpack_require__(3);
	
	var _keenUi2 = _interopRequireDefault(_keenUi);
	
	var _App = __webpack_require__(4);
	
	var _App2 = _interopRequireDefault(_App);
	
	var _store = __webpack_require__(136);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_vue2.default.use(_keenUi2.default);
	
	var app = new _vue2.default({
	    el: 'body',
	    components: {
	        App: _App2.default
	    },
	    store: _store2.default
	});
	
	window.app = app;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/*!
	 * Vue.js v1.0.26
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	'use strict';
	
	function set(obj, key, val) {
	  if (hasOwn(obj, key)) {
	    obj[key] = val;
	    return;
	  }
	  if (obj._isVue) {
	    set(obj._data, key, val);
	    return;
	  }
	  var ob = obj.__ob__;
	  if (!ob) {
	    obj[key] = val;
	    return;
	  }
	  ob.convert(key, val);
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._proxy(key);
	      vm._digest();
	    }
	  }
	  return val;
	}
	
	/**
	 * Delete a property and trigger change if necessary.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 */
	
	function del(obj, key) {
	  if (!hasOwn(obj, key)) {
	    return;
	  }
	  delete obj[key];
	  var ob = obj.__ob__;
	  if (!ob) {
	    if (obj._isVue) {
	      delete obj._data[key];
	      obj._digest();
	    }
	    return;
	  }
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._unproxy(key);
	      vm._digest();
	    }
	  }
	}
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	/**
	 * Check whether the object has the property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @return {Boolean}
	 */
	
	function hasOwn(obj, key) {
	  return hasOwnProperty.call(obj, key);
	}
	
	/**
	 * Check if an expression is a literal value.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;
	
	function isLiteral(exp) {
	  return literalValueRE.test(exp);
	}
	
	/**
	 * Check if a string starts with $ or _
	 *
	 * @param {String} str
	 * @return {Boolean}
	 */
	
	function isReserved(str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F;
	}
	
	/**
	 * Guard text output, make sure undefined outputs
	 * empty string
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function _toString(value) {
	  return value == null ? '' : value.toString();
	}
	
	/**
	 * Check and convert possible numeric strings to numbers
	 * before setting back to data
	 *
	 * @param {*} value
	 * @return {*|Number}
	 */
	
	function toNumber(value) {
	  if (typeof value !== 'string') {
	    return value;
	  } else {
	    var parsed = Number(value);
	    return isNaN(parsed) ? value : parsed;
	  }
	}
	
	/**
	 * Convert string boolean literals into real booleans.
	 *
	 * @param {*} value
	 * @return {*|Boolean}
	 */
	
	function toBoolean(value) {
	  return value === 'true' ? true : value === 'false' ? false : value;
	}
	
	/**
	 * Strip quotes from a string
	 *
	 * @param {String} str
	 * @return {String | false}
	 */
	
	function stripQuotes(str) {
	  var a = str.charCodeAt(0);
	  var b = str.charCodeAt(str.length - 1);
	  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
	}
	
	/**
	 * Camelize a hyphen-delmited string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var camelizeRE = /-(\w)/g;
	
	function camelize(str) {
	  return str.replace(camelizeRE, toUpper);
	}
	
	function toUpper(_, c) {
	  return c ? c.toUpperCase() : '';
	}
	
	/**
	 * Hyphenate a camelCase string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var hyphenateRE = /([a-z\d])([A-Z])/g;
	
	function hyphenate(str) {
	  return str.replace(hyphenateRE, '$1-$2').toLowerCase();
	}
	
	/**
	 * Converts hyphen/underscore/slash delimitered names into
	 * camelized classNames.
	 *
	 * e.g. my-component => MyComponent
	 *      some_else    => SomeElse
	 *      some/comp    => SomeComp
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var classifyRE = /(?:^|[-_\/])(\w)/g;
	
	function classify(str) {
	  return str.replace(classifyRE, toUpper);
	}
	
	/**
	 * Simple bind, faster than native
	 *
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @return {Function}
	 */
	
	function bind(fn, ctx) {
	  return function (a) {
	    var l = arguments.length;
	    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
	  };
	}
	
	/**
	 * Convert an Array-like object to a real Array.
	 *
	 * @param {Array-like} list
	 * @param {Number} [start] - start index
	 * @return {Array}
	 */
	
	function toArray(list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret;
	}
	
	/**
	 * Mix properties into target object.
	 *
	 * @param {Object} to
	 * @param {Object} from
	 */
	
	function extend(to, from) {
	  var keys = Object.keys(from);
	  var i = keys.length;
	  while (i--) {
	    to[keys[i]] = from[keys[i]];
	  }
	  return to;
	}
	
	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	function isObject(obj) {
	  return obj !== null && typeof obj === 'object';
	}
	
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';
	
	function isPlainObject(obj) {
	  return toString.call(obj) === OBJECT_STRING;
	}
	
	/**
	 * Array type check.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * Define a property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 * @param {Boolean} [enumerable]
	 */
	
	function def(obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}
	
	/**
	 * Debounce a function so it only gets called after the
	 * input stops arriving after the given wait period.
	 *
	 * @param {Function} func
	 * @param {Number} wait
	 * @return {Function} - the debounced function
	 */
	
	function _debounce(func, wait) {
	  var timeout, args, context, timestamp, result;
	  var later = function later() {
	    var last = Date.now() - timestamp;
	    if (last < wait && last >= 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    }
	  };
	  return function () {
	    context = this;
	    args = arguments;
	    timestamp = Date.now();
	    if (!timeout) {
	      timeout = setTimeout(later, wait);
	    }
	    return result;
	  };
	}
	
	/**
	 * Manual indexOf because it's slightly faster than
	 * native.
	 *
	 * @param {Array} arr
	 * @param {*} obj
	 */
	
	function indexOf(arr, obj) {
	  var i = arr.length;
	  while (i--) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	}
	
	/**
	 * Make a cancellable version of an async callback.
	 *
	 * @param {Function} fn
	 * @return {Function}
	 */
	
	function cancellable(fn) {
	  var cb = function cb() {
	    if (!cb.cancelled) {
	      return fn.apply(this, arguments);
	    }
	  };
	  cb.cancel = function () {
	    cb.cancelled = true;
	  };
	  return cb;
	}
	
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 *
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 */
	
	function looseEqual(a, b) {
	  /* eslint-disable eqeqeq */
	  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
	  /* eslint-enable eqeqeq */
	}
	
	var hasProto = ('__proto__' in {});
	
	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';
	
	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	// UA sniffing for working around browser-specific quirks
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && UA.indexOf('trident') > 0;
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
	var iosVersionMatch = isIos && UA.match(/os ([\d_]+)/);
	var iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');
	
	// detecting iOS UIWebView by indexedDB
	var hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;
	
	var transitionProp = undefined;
	var transitionEndEvent = undefined;
	var animationProp = undefined;
	var animationEndEvent = undefined;
	
	// Transition property/event sniffing
	if (inBrowser && !isIE9) {
	  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
	  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
	  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
	  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
	  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
	  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
	}
	
	/**
	 * Defer a task to execute it asynchronously. Ideally this
	 * should be executed as a microtask, so we leverage
	 * MutationObserver if it's available, and fallback to
	 * setTimeout(0).
	 *
	 * @param {Function} cb
	 * @param {Object} ctx
	 */
	
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;
	  function nextTickHandler() {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks = [];
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }
	
	  /* istanbul ignore if */
	  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(counter);
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = counter;
	    };
	  } else {
	    // webpack attempts to inject a shim for setImmediate
	    // if it is used as a global, so we have to work around that to
	    // avoid bundling unnecessary code.
	    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
	    timerFunc = context.setImmediate || setTimeout;
	  }
	  return function (cb, ctx) {
	    var func = ctx ? function () {
	      cb.call(ctx);
	    } : cb;
	    callbacks.push(func);
	    if (pending) return;
	    pending = true;
	    timerFunc(nextTickHandler, 0);
	  };
	})();
	
	var _Set = undefined;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = function () {
	    this.set = Object.create(null);
	  };
	  _Set.prototype.has = function (key) {
	    return this.set[key] !== undefined;
	  };
	  _Set.prototype.add = function (key) {
	    this.set[key] = 1;
	  };
	  _Set.prototype.clear = function () {
	    this.set = Object.create(null);
	  };
	}
	
	function Cache(limit) {
	  this.size = 0;
	  this.limit = limit;
	  this.head = this.tail = undefined;
	  this._keymap = Object.create(null);
	}
	
	var p = Cache.prototype;
	
	/**
	 * Put <value> into the cache associated with <key>.
	 * Returns the entry which was removed to make room for
	 * the new entry. Otherwise undefined is returned.
	 * (i.e. if there was enough room already).
	 *
	 * @param {String} key
	 * @param {*} value
	 * @return {Entry|undefined}
	 */
	
	p.put = function (key, value) {
	  var removed;
	
	  var entry = this.get(key, true);
	  if (!entry) {
	    if (this.size === this.limit) {
	      removed = this.shift();
	    }
	    entry = {
	      key: key
	    };
	    this._keymap[key] = entry;
	    if (this.tail) {
	      this.tail.newer = entry;
	      entry.older = this.tail;
	    } else {
	      this.head = entry;
	    }
	    this.tail = entry;
	    this.size++;
	  }
	  entry.value = value;
	
	  return removed;
	};
	
	/**
	 * Purge the least recently used (oldest) entry from the
	 * cache. Returns the removed entry or undefined if the
	 * cache was empty.
	 */
	
	p.shift = function () {
	  var entry = this.head;
	  if (entry) {
	    this.head = this.head.newer;
	    this.head.older = undefined;
	    entry.newer = entry.older = undefined;
	    this._keymap[entry.key] = undefined;
	    this.size--;
	  }
	  return entry;
	};
	
	/**
	 * Get and register recent use of <key>. Returns the value
	 * associated with <key> or undefined if not in cache.
	 *
	 * @param {String} key
	 * @param {Boolean} returnEntry
	 * @return {Entry|*}
	 */
	
	p.get = function (key, returnEntry) {
	  var entry = this._keymap[key];
	  if (entry === undefined) return;
	  if (entry === this.tail) {
	    return returnEntry ? entry : entry.value;
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head) {
	      this.head = entry.newer;
	    }
	    entry.newer.older = entry.older; // C <-- E.
	  }
	  if (entry.older) {
	    entry.older.newer = entry.newer; // C. --> E
	  }
	  entry.newer = undefined; // D --x
	  entry.older = this.tail; // D. --> E
	  if (this.tail) {
	    this.tail.newer = entry; // E. <-- D
	  }
	  this.tail = entry;
	  return returnEntry ? entry : entry.value;
	};
	
	var cache$1 = new Cache(1000);
	var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
	var reservedArgRE = /^in$|^-?\d+/;
	
	/**
	 * Parser state
	 */
	
	var str;
	var dir;
	var c;
	var prev;
	var i;
	var l;
	var lastFilterIndex;
	var inSingle;
	var inDouble;
	var curly;
	var square;
	var paren;
	/**
	 * Push a filter to the current directive object
	 */
	
	function pushFilter() {
	  var exp = str.slice(lastFilterIndex, i).trim();
	  var filter;
	  if (exp) {
	    filter = {};
	    var tokens = exp.match(filterTokenRE);
	    filter.name = tokens[0];
	    if (tokens.length > 1) {
	      filter.args = tokens.slice(1).map(processFilterArg);
	    }
	  }
	  if (filter) {
	    (dir.filters = dir.filters || []).push(filter);
	  }
	  lastFilterIndex = i + 1;
	}
	
	/**
	 * Check if an argument is dynamic and strip quotes.
	 *
	 * @param {String} arg
	 * @return {Object}
	 */
	
	function processFilterArg(arg) {
	  if (reservedArgRE.test(arg)) {
	    return {
	      value: toNumber(arg),
	      dynamic: false
	    };
	  } else {
	    var stripped = stripQuotes(arg);
	    var dynamic = stripped === arg;
	    return {
	      value: dynamic ? arg : stripped,
	      dynamic: dynamic
	    };
	  }
	}
	
	/**
	 * Parse a directive value and extract the expression
	 * and its filters into a descriptor.
	 *
	 * Example:
	 *
	 * "a + 1 | uppercase" will yield:
	 * {
	 *   expression: 'a + 1',
	 *   filters: [
	 *     { name: 'uppercase', args: null }
	 *   ]
	 * }
	 *
	 * @param {String} s
	 * @return {Object}
	 */
	
	function parseDirective(s) {
	  var hit = cache$1.get(s);
	  if (hit) {
	    return hit;
	  }
	
	  // reset parser state
	  str = s;
	  inSingle = inDouble = false;
	  curly = square = paren = 0;
	  lastFilterIndex = 0;
	  dir = {};
	
	  for (i = 0, l = str.length; i < l; i++) {
	    prev = c;
	    c = str.charCodeAt(i);
	    if (inSingle) {
	      // check single quote
	      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
	    } else if (inDouble) {
	      // check double quote
	      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
	    } else if (c === 0x7C && // pipe
	    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
	      if (dir.expression == null) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        dir.expression = str.slice(0, i).trim();
	      } else {
	        // already has filter
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22:
	          inDouble = true;break; // "
	        case 0x27:
	          inSingle = true;break; // '
	        case 0x28:
	          paren++;break; // (
	        case 0x29:
	          paren--;break; // )
	        case 0x5B:
	          square++;break; // [
	        case 0x5D:
	          square--;break; // ]
	        case 0x7B:
	          curly++;break; // {
	        case 0x7D:
	          curly--;break; // }
	      }
	    }
	  }
	
	  if (dir.expression == null) {
	    dir.expression = str.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }
	
	  cache$1.put(s, dir);
	  return dir;
	}
	
	var directive = Object.freeze({
	  parseDirective: parseDirective
	});
	
	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	var cache = undefined;
	var tagRE = undefined;
	var htmlRE = undefined;
	/**
	 * Escape a string so it can be used in a RegExp
	 * constructor.
	 *
	 * @param {String} str
	 */
	
	function escapeRegex(str) {
	  return str.replace(regexEscapeRE, '\\$&');
	}
	
	function compileRegex() {
	  var open = escapeRegex(config.delimiters[0]);
	  var close = escapeRegex(config.delimiters[1]);
	  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
	  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
	  tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
	  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
	  // reset cache
	  cache = new Cache(1000);
	}
	
	/**
	 * Parse a template text string into an array of tokens.
	 *
	 * @param {String} text
	 * @return {Array<Object> | null}
	 *               - {String} type
	 *               - {String} value
	 *               - {Boolean} [html]
	 *               - {Boolean} [oneTime]
	 */
	
	function parseText(text) {
	  if (!cache) {
	    compileRegex();
	  }
	  var hit = cache.get(text);
	  if (hit) {
	    return hit;
	  }
	  if (!tagRE.test(text)) {
	    return null;
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index, html, value, first, oneTime;
	  /* eslint-disable no-cond-assign */
	  while (match = tagRE.exec(text)) {
	    /* eslint-enable no-cond-assign */
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push({
	        value: text.slice(lastIndex, index)
	      });
	    }
	    // tag token
	    html = htmlRE.test(match[0]);
	    value = html ? match[1] : match[2];
	    first = value.charCodeAt(0);
	    oneTime = first === 42; // *
	    value = oneTime ? value.slice(1) : value;
	    tokens.push({
	      tag: true,
	      value: value.trim(),
	      html: html,
	      oneTime: oneTime
	    });
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push({
	      value: text.slice(lastIndex)
	    });
	  }
	  cache.put(text, tokens);
	  return tokens;
	}
	
	/**
	 * Format a list of tokens into an expression.
	 * e.g. tokens parsed from 'a {{b}} c' can be serialized
	 * into one single expression as '"a " + b + " c"'.
	 *
	 * @param {Array} tokens
	 * @param {Vue} [vm]
	 * @return {String}
	 */
	
	function tokensToExp(tokens, vm) {
	  if (tokens.length > 1) {
	    return tokens.map(function (token) {
	      return formatToken(token, vm);
	    }).join('+');
	  } else {
	    return formatToken(tokens[0], vm, true);
	  }
	}
	
	/**
	 * Format a single token.
	 *
	 * @param {Object} token
	 * @param {Vue} [vm]
	 * @param {Boolean} [single]
	 * @return {String}
	 */
	
	function formatToken(token, vm, single) {
	  return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
	}
	
	/**
	 * For an attribute with multiple interpolation tags,
	 * e.g. attr="some-{{thing | filter}}", in order to combine
	 * the whole thing into a single watchable expression, we
	 * have to inline those filters. This function does exactly
	 * that. This is a bit hacky but it avoids heavy changes
	 * to directive parser and watcher mechanism.
	 *
	 * @param {String} exp
	 * @param {Boolean} single
	 * @return {String}
	 */
	
	var filterRE = /[^|]\|[^|]/;
	function inlineFilters(exp, single) {
	  if (!filterRE.test(exp)) {
	    return single ? exp : '(' + exp + ')';
	  } else {
	    var dir = parseDirective(exp);
	    if (!dir.filters) {
	      return '(' + exp + ')';
	    } else {
	      return 'this._applyFilters(' + dir.expression + // value
	      ',null,' + // oldValue (null for read)
	      JSON.stringify(dir.filters) + // filter descriptors
	      ',false)'; // write?
	    }
	  }
	}
	
	var text = Object.freeze({
	  compileRegex: compileRegex,
	  parseText: parseText,
	  tokensToExp: tokensToExp
	});
	
	var delimiters = ['{{', '}}'];
	var unsafeDelimiters = ['{{{', '}}}'];
	
	var config = Object.defineProperties({
	
	  /**
	   * Whether to print debug messages.
	   * Also enables stack trace for warnings.
	   *
	   * @type {Boolean}
	   */
	
	  debug: false,
	
	  /**
	   * Whether to suppress warnings.
	   *
	   * @type {Boolean}
	   */
	
	  silent: false,
	
	  /**
	   * Whether to use async rendering.
	   */
	
	  async: true,
	
	  /**
	   * Whether to warn against errors caught when evaluating
	   * expressions.
	   */
	
	  warnExpressionErrors: true,
	
	  /**
	   * Whether to allow devtools inspection.
	   * Disabled by default in production builds.
	   */
	
	  devtools: process.env.NODE_ENV !== 'production',
	
	  /**
	   * Internal flag to indicate the delimiters have been
	   * changed.
	   *
	   * @type {Boolean}
	   */
	
	  _delimitersChanged: true,
	
	  /**
	   * List of asset types that a component can own.
	   *
	   * @type {Array}
	   */
	
	  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],
	
	  /**
	   * prop binding modes
	   */
	
	  _propBindingModes: {
	    ONE_WAY: 0,
	    TWO_WAY: 1,
	    ONE_TIME: 2
	  },
	
	  /**
	   * Max circular updates allowed in a batcher flush cycle.
	   */
	
	  _maxUpdateCount: 100
	
	}, {
	  delimiters: { /**
	                 * Interpolation delimiters. Changing these would trigger
	                 * the text parser to re-compile the regular expressions.
	                 *
	                 * @type {Array<String>}
	                 */
	
	    get: function get() {
	      return delimiters;
	    },
	    set: function set(val) {
	      delimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  },
	  unsafeDelimiters: {
	    get: function get() {
	      return unsafeDelimiters;
	    },
	    set: function set(val) {
	      unsafeDelimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  }
	});
	
	var warn = undefined;
	var formatComponentName = undefined;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var hasConsole = typeof console !== 'undefined';
	
	    warn = function (msg, vm) {
	      if (hasConsole && !config.silent) {
	        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
	      }
	    };
	
	    formatComponentName = function (vm) {
	      var name = vm._isVue ? vm.$options.name : vm.name;
	      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
	    };
	  })();
	}
	
	/**
	 * Append with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function appendWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    target.appendChild(el);
	  }, vm, cb);
	}
	
	/**
	 * InsertBefore with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function beforeWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    before(el, target);
	  }, vm, cb);
	}
	
	/**
	 * Remove with transition.
	 *
	 * @param {Element} el
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function removeWithTransition(el, vm, cb) {
	  applyTransition(el, -1, function () {
	    remove(el);
	  }, vm, cb);
	}
	
	/**
	 * Apply transitions with an operation callback.
	 *
	 * @param {Element} el
	 * @param {Number} direction
	 *                  1: enter
	 *                 -1: leave
	 * @param {Function} op - the actual DOM operation
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function applyTransition(el, direction, op, vm, cb) {
	  var transition = el.__v_trans;
	  if (!transition ||
	  // skip if there are no js hooks and CSS transition is
	  // not supported
	  !transition.hooks && !transitionEndEvent ||
	  // skip transitions for initial compile
	  !vm._isCompiled ||
	  // if the vm is being manipulated by a parent directive
	  // during the parent's compilation phase, skip the
	  // animation.
	  vm.$parent && !vm.$parent._isCompiled) {
	    op();
	    if (cb) cb();
	    return;
	  }
	  var action = direction > 0 ? 'enter' : 'leave';
	  transition[action](op, cb);
	}
	
	var transition = Object.freeze({
	  appendWithTransition: appendWithTransition,
	  beforeWithTransition: beforeWithTransition,
	  removeWithTransition: removeWithTransition,
	  applyTransition: applyTransition
	});
	
	/**
	 * Query an element selector if it's not an element already.
	 *
	 * @param {String|Element} el
	 * @return {Element}
	 */
	
	function query(el) {
	  if (typeof el === 'string') {
	    var selector = el;
	    el = document.querySelector(el);
	    if (!el) {
	      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);
	    }
	  }
	  return el;
	}
	
	/**
	 * Check if a node is in the document.
	 * Note: document.documentElement.contains should work here
	 * but always returns false for comment nodes in phantomjs,
	 * making unit tests difficult. This is fixed by doing the
	 * contains() check on the node's parentNode instead of
	 * the node itself.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function inDoc(node) {
	  if (!node) return false;
	  var doc = node.ownerDocument.documentElement;
	  var parent = node.parentNode;
	  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
	}
	
	/**
	 * Get and remove an attribute from a node.
	 *
	 * @param {Node} node
	 * @param {String} _attr
	 */
	
	function getAttr(node, _attr) {
	  var val = node.getAttribute(_attr);
	  if (val !== null) {
	    node.removeAttribute(_attr);
	  }
	  return val;
	}
	
	/**
	 * Get an attribute with colon or v-bind: prefix.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {String|null}
	 */
	
	function getBindAttr(node, name) {
	  var val = getAttr(node, ':' + name);
	  if (val === null) {
	    val = getAttr(node, 'v-bind:' + name);
	  }
	  return val;
	}
	
	/**
	 * Check the presence of a bind attribute.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {Boolean}
	 */
	
	function hasBindAttr(node, name) {
	  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
	}
	
	/**
	 * Insert el before target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function before(el, target) {
	  target.parentNode.insertBefore(el, target);
	}
	
	/**
	 * Insert el after target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function after(el, target) {
	  if (target.nextSibling) {
	    before(el, target.nextSibling);
	  } else {
	    target.parentNode.appendChild(el);
	  }
	}
	
	/**
	 * Remove el from DOM
	 *
	 * @param {Element} el
	 */
	
	function remove(el) {
	  el.parentNode.removeChild(el);
	}
	
	/**
	 * Prepend el to target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function prepend(el, target) {
	  if (target.firstChild) {
	    before(el, target.firstChild);
	  } else {
	    target.appendChild(el);
	  }
	}
	
	/**
	 * Replace target with el
	 *
	 * @param {Element} target
	 * @param {Element} el
	 */
	
	function replace(target, el) {
	  var parent = target.parentNode;
	  if (parent) {
	    parent.replaceChild(el, target);
	  }
	}
	
	/**
	 * Add event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 * @param {Boolean} [useCapture]
	 */
	
	function on(el, event, cb, useCapture) {
	  el.addEventListener(event, cb, useCapture);
	}
	
	/**
	 * Remove event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	function off(el, event, cb) {
	  el.removeEventListener(event, cb);
	}
	
	/**
	 * For IE9 compat: when both class and :class are present
	 * getAttribute('class') returns wrong value...
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getClass(el) {
	  var classname = el.className;
	  if (typeof classname === 'object') {
	    classname = classname.baseVal || '';
	  }
	  return classname;
	}
	
	/**
	 * In IE9, setAttribute('class') will result in empty class
	 * if the element also has the :class attribute; However in
	 * PhantomJS, setting `className` does not work on SVG elements...
	 * So we have to do a conditional check here.
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function setClass(el, cls) {
	  /* istanbul ignore if */
	  if (isIE9 && !/svg$/.test(el.namespaceURI)) {
	    el.className = cls;
	  } else {
	    el.setAttribute('class', cls);
	  }
	}
	
	/**
	 * Add class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function addClass(el, cls) {
	  if (el.classList) {
	    el.classList.add(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      setClass(el, (cur + cls).trim());
	    }
	  }
	}
	
	/**
	 * Remove class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function removeClass(el, cls) {
	  if (el.classList) {
	    el.classList.remove(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    setClass(el, cur.trim());
	  }
	  if (!el.className) {
	    el.removeAttribute('class');
	  }
	}
	
	/**
	 * Extract raw content inside an element into a temporary
	 * container div
	 *
	 * @param {Element} el
	 * @param {Boolean} asFragment
	 * @return {Element|DocumentFragment}
	 */
	
	function extractContent(el, asFragment) {
	  var child;
	  var rawContent;
	  /* istanbul ignore if */
	  if (isTemplate(el) && isFragment(el.content)) {
	    el = el.content;
	  }
	  if (el.hasChildNodes()) {
	    trimNode(el);
	    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
	    /* eslint-disable no-cond-assign */
	    while (child = el.firstChild) {
	      /* eslint-enable no-cond-assign */
	      rawContent.appendChild(child);
	    }
	  }
	  return rawContent;
	}
	
	/**
	 * Trim possible empty head/tail text and comment
	 * nodes inside a parent.
	 *
	 * @param {Node} node
	 */
	
	function trimNode(node) {
	  var child;
	  /* eslint-disable no-sequences */
	  while ((child = node.firstChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  while ((child = node.lastChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  /* eslint-enable no-sequences */
	}
	
	function isTrimmable(node) {
	  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
	}
	
	/**
	 * Check if an element is a template tag.
	 * Note if the template appears inside an SVG its tagName
	 * will be in lowercase.
	 *
	 * @param {Element} el
	 */
	
	function isTemplate(el) {
	  return el.tagName && el.tagName.toLowerCase() === 'template';
	}
	
	/**
	 * Create an "anchor" for performing dom insertion/removals.
	 * This is used in a number of scenarios:
	 * - fragment instance
	 * - v-html
	 * - v-if
	 * - v-for
	 * - component
	 *
	 * @param {String} content
	 * @param {Boolean} persist - IE trashes empty textNodes on
	 *                            cloneNode(true), so in certain
	 *                            cases the anchor needs to be
	 *                            non-empty to be persisted in
	 *                            templates.
	 * @return {Comment|Text}
	 */
	
	function createAnchor(content, persist) {
	  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
	  anchor.__v_anchor = true;
	  return anchor;
	}
	
	/**
	 * Find a component ref attribute that starts with $.
	 *
	 * @param {Element} node
	 * @return {String|undefined}
	 */
	
	var refRE = /^v-ref:/;
	
	function findRef(node) {
	  if (node.hasAttributes()) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var name = attrs[i].name;
	      if (refRE.test(name)) {
	        return camelize(name.replace(refRE, ''));
	      }
	    }
	  }
	}
	
	/**
	 * Map a function to a range of nodes .
	 *
	 * @param {Node} node
	 * @param {Node} end
	 * @param {Function} op
	 */
	
	function mapNodeRange(node, end, op) {
	  var next;
	  while (node !== end) {
	    next = node.nextSibling;
	    op(node);
	    node = next;
	  }
	  op(end);
	}
	
	/**
	 * Remove a range of nodes with transition, store
	 * the nodes in a fragment with correct ordering,
	 * and call callback when done.
	 *
	 * @param {Node} start
	 * @param {Node} end
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Function} cb
	 */
	
	function removeNodeRange(start, end, vm, frag, cb) {
	  var done = false;
	  var removed = 0;
	  var nodes = [];
	  mapNodeRange(start, end, function (node) {
	    if (node === end) done = true;
	    nodes.push(node);
	    removeWithTransition(node, vm, onRemoved);
	  });
	  function onRemoved() {
	    removed++;
	    if (done && removed >= nodes.length) {
	      for (var i = 0; i < nodes.length; i++) {
	        frag.appendChild(nodes[i]);
	      }
	      cb && cb();
	    }
	  }
	}
	
	/**
	 * Check if a node is a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isFragment(node) {
	  return node && node.nodeType === 11;
	}
	
	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getOuterHTML(el) {
	  if (el.outerHTML) {
	    return el.outerHTML;
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML;
	  }
	}
	
	var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
	var reservedTagRE = /^(slot|partial|component)$/i;
	
	var isUnknownElement = undefined;
	if (process.env.NODE_ENV !== 'production') {
	  isUnknownElement = function (el, tag) {
	    if (tag.indexOf('-') > -1) {
	      // http://stackoverflow.com/a/28210364/1070244
	      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
	    } else {
	      return (/HTMLUnknownElement/.test(el.toString()) &&
	        // Chrome returns unknown for several HTML5 elements.
	        // https://code.google.com/p/chromium/issues/detail?id=540526
	        // Firefox returns unknown for some "Interactive elements."
	        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
	      );
	    }
	  };
	}
	
	/**
	 * Check if an element is a component, if yes return its
	 * component id.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function checkComponentAttr(el, options) {
	  var tag = el.tagName.toLowerCase();
	  var hasAttrs = el.hasAttributes();
	  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
	    if (resolveAsset(options, 'components', tag)) {
	      return { id: tag };
	    } else {
	      var is = hasAttrs && getIsBinding(el, options);
	      if (is) {
	        return is;
	      } else if (process.env.NODE_ENV !== 'production') {
	        var expectedTag = options._componentNameMap && options._componentNameMap[tag];
	        if (expectedTag) {
	          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
	        } else if (isUnknownElement(el, tag)) {
	          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
	        }
	      }
	    }
	  } else if (hasAttrs) {
	    return getIsBinding(el, options);
	  }
	}
	
	/**
	 * Get "is" binding from an element.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function getIsBinding(el, options) {
	  // dynamic syntax
	  var exp = el.getAttribute('is');
	  if (exp != null) {
	    if (resolveAsset(options, 'components', exp)) {
	      el.removeAttribute('is');
	      return { id: exp };
	    }
	  } else {
	    exp = getBindAttr(el, 'is');
	    if (exp != null) {
	      return { id: exp, dynamic: true };
	    }
	  }
	}
	
	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 *
	 * All strategy functions follow the same signature:
	 *
	 * @param {*} parentVal
	 * @param {*} childVal
	 * @param {Vue} [vm]
	 */
	
	var strats = config.optionMergeStrategies = Object.create(null);
	
	/**
	 * Helper that recursively merges two data objects together.
	 */
	
	function mergeData(to, from) {
	  var key, toVal, fromVal;
	  for (key in from) {
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isObject(toVal) && isObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to;
	}
	
	/**
	 * Data
	 */
	
	strats.data = function (parentVal, childVal, vm) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal;
	    }
	    if (typeof childVal !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	      return parentVal;
	    }
	    if (!parentVal) {
	      return childVal;
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn() {
	      return mergeData(childVal.call(this), parentVal.call(this));
	    };
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn() {
	      // instance merge
	      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
	      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData);
	      } else {
	        return defaultData;
	      }
	    };
	  }
	};
	
	/**
	 * El
	 */
	
	strats.el = function (parentVal, childVal, vm) {
	  if (!vm && childVal && typeof childVal !== 'function') {
	    process.env.NODE_ENV !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	    return;
	  }
	  var ret = childVal || parentVal;
	  // invoke the element factory if this is instance merge
	  return vm && typeof ret === 'function' ? ret.call(vm) : ret;
	};
	
	/**
	 * Hooks and param attributes are merged as arrays.
	 */
	
	strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
	  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
	};
	
	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	
	function mergeAssets(parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal ? extend(res, guardArrayAssets(childVal)) : res;
	}
	
	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});
	
	/**
	 * Events & Watchers.
	 *
	 * Events & watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	
	strats.watch = strats.events = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent ? parent.concat(child) : [child];
	  }
	  return ret;
	};
	
	/**
	 * Other object hashes.
	 */
	
	strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret;
	};
	
	/**
	 * Default strategy.
	 */
	
	var defaultStrat = function defaultStrat(parentVal, childVal) {
	  return childVal === undefined ? parentVal : childVal;
	};
	
	/**
	 * Make sure component options get converted to actual
	 * constructors.
	 *
	 * @param {Object} options
	 */
	
	function guardComponents(options) {
	  if (options.components) {
	    var components = options.components = guardArrayAssets(options.components);
	    var ids = Object.keys(components);
	    var def;
	    if (process.env.NODE_ENV !== 'production') {
	      var map = options._componentNameMap = {};
	    }
	    for (var i = 0, l = ids.length; i < l; i++) {
	      var key = ids[i];
	      if (commonTagRE.test(key) || reservedTagRE.test(key)) {
	        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
	        continue;
	      }
	      // record a all lowercase <-> kebab-case mapping for
	      // possible custom element case error warning
	      if (process.env.NODE_ENV !== 'production') {
	        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
	      }
	      def = components[key];
	      if (isPlainObject(def)) {
	        components[key] = Vue.extend(def);
	      }
	    }
	  }
	}
	
	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 *
	 * @param {Object} options
	 */
	
	function guardProps(options) {
	  var props = options.props;
	  var i, val;
	  if (isArray(props)) {
	    options.props = {};
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        options.props[val] = null;
	      } else if (val.name) {
	        options.props[val.name] = val;
	      }
	    }
	  } else if (isPlainObject(props)) {
	    var keys = Object.keys(props);
	    i = keys.length;
	    while (i--) {
	      val = props[keys[i]];
	      if (typeof val === 'function') {
	        props[keys[i]] = { type: val };
	      }
	    }
	  }
	}
	
	/**
	 * Guard an Array-format assets option and converted it
	 * into the key-value Object format.
	 *
	 * @param {Object|Array} assets
	 * @return {Object}
	 */
	
	function guardArrayAssets(assets) {
	  if (isArray(assets)) {
	    var res = {};
	    var i = assets.length;
	    var asset;
	    while (i--) {
	      asset = assets[i];
	      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
	      if (!id) {
	        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
	      } else {
	        res[id] = asset;
	      }
	    }
	    return res;
	  }
	  return assets;
	}
	
	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 *
	 * @param {Object} parent
	 * @param {Object} child
	 * @param {Vue} [vm] - if vm is present, indicates this is
	 *                     an instantiation merge.
	 */
	
	function mergeOptions(parent, child, vm) {
	  guardComponents(child);
	  guardProps(child);
	  if (process.env.NODE_ENV !== 'production') {
	    if (child.propsData && !vm) {
	      warn('propsData can only be used as an instantiation option.');
	    }
	  }
	  var options = {};
	  var key;
	  if (child['extends']) {
	    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
	      parent = mergeOptions(parent, mixinOptions, vm);
	    }
	  }
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField(key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options;
	}
	
	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 *
	 * @param {Object} options
	 * @param {String} type
	 * @param {String} id
	 * @param {Boolean} warnMissing
	 * @return {Object|Function}
	 */
	
	function resolveAsset(options, type, id, warnMissing) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return;
	  }
	  var assets = options[type];
	  var camelizedId;
	  var res = assets[id] ||
	  // camelCase ID
	  assets[camelizedId = camelize(id)] ||
	  // Pascal Case ID
	  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
	  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
	    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
	  }
	  return res;
	}
	
	var uid$1 = 0;
	
	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 *
	 * @constructor
	 */
	function Dep() {
	  this.id = uid$1++;
	  this.subs = [];
	}
	
	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	
	/**
	 * Add a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.addSub = function (sub) {
	  this.subs.push(sub);
	};
	
	/**
	 * Remove a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.removeSub = function (sub) {
	  this.subs.$remove(sub);
	};
	
	/**
	 * Add self as a dependency to the target watcher.
	 */
	
	Dep.prototype.depend = function () {
	  Dep.target.addDep(this);
	};
	
	/**
	 * Notify all subscribers of a new value.
	 */
	
	Dep.prototype.notify = function () {
	  // stablize the subscriber list first
	  var subs = toArray(this.subs);
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};
	
	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto)
	
	/**
	 * Intercept mutating methods and emit events
	 */
	
	;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator() {
	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break;
	      case 'unshift':
	        inserted = args;
	        break;
	      case 'splice':
	        inserted = args.slice(2);
	        break;
	    }
	    if (inserted) ob.observeArray(inserted);
	    // notify change
	    ob.dep.notify();
	    return result;
	  });
	});
	
	/**
	 * Swap the element at the given index with a new value
	 * and emits corresponding event.
	 *
	 * @param {Number} index
	 * @param {*} val
	 * @return {*} - replaced element
	 */
	
	def(arrayProto, '$set', function $set(index, val) {
	  if (index >= this.length) {
	    this.length = Number(index) + 1;
	  }
	  return this.splice(index, 1, val)[0];
	});
	
	/**
	 * Convenience method to remove the element at given index or target element reference.
	 *
	 * @param {*} item
	 */
	
	def(arrayProto, '$remove', function $remove(item) {
	  /* istanbul ignore if */
	  if (!this.length) return;
	  var index = indexOf(this, item);
	  if (index > -1) {
	    return this.splice(index, 1);
	  }
	});
	
	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
	
	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However in certain cases, e.g.
	 * v-for scope alias and props, we don't want to force conversion
	 * because the value may be a nested value under a frozen data structure.
	 *
	 * So whenever we want to set a reactive property without forcing
	 * conversion on the new value, we wrap that call inside this function.
	 */
	
	var shouldConvert = true;
	
	function withoutConversion(fn) {
	  shouldConvert = false;
	  fn();
	  shouldConvert = true;
	}
	
	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 *
	 * @param {Array|Object} value
	 * @constructor
	 */
	
	function Observer(value) {
	  this.value = value;
	  this.dep = new Dep();
	  def(value, '__ob__', this);
	  if (isArray(value)) {
	    var augment = hasProto ? protoAugment : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	}
	
	// Instance methods
	
	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 *
	 * @param {Object} obj
	 */
	
	Observer.prototype.walk = function (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    this.convert(keys[i], obj[keys[i]]);
	  }
	};
	
	/**
	 * Observe a list of Array items.
	 *
	 * @param {Array} items
	 */
	
	Observer.prototype.observeArray = function (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};
	
	/**
	 * Convert a property into getter/setter so we can emit
	 * the events when the property is accessed/changed.
	 *
	 * @param {String} key
	 * @param {*} val
	 */
	
	Observer.prototype.convert = function (key, val) {
	  defineReactive(this.value, key, val);
	};
	
	/**
	 * Add an owner vm, so that when $set/$delete mutations
	 * happen we can notify owner vms to proxy the keys and
	 * digest the watchers. This is only called when the object
	 * is observed as an instance's root $data.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.addVm = function (vm) {
	  (this.vms || (this.vms = [])).push(vm);
	};
	
	/**
	 * Remove an owner vm. This is called when the object is
	 * swapped out as an instance's $data object.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.removeVm = function (vm) {
	  this.vms.$remove(vm);
	};
	
	// helpers
	
	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 *
	 * @param {Object|Array} target
	 * @param {Object} src
	 */
	
	function protoAugment(target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}
	
	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 *
	 * @param {Object|Array} target
	 * @param {Object} proto
	 */
	
	function copyAugment(target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}
	
	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 *
	 * @param {*} value
	 * @param {Vue} [vm]
	 * @return {Observer|undefined}
	 * @static
	 */
	
	function observe(value, vm) {
	  if (!value || typeof value !== 'object') {
	    return;
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
	    ob = new Observer(value);
	  }
	  if (ob && vm) {
	    ob.addVm(vm);
	  }
	  return ob;
	}
	
	/**
	 * Define a reactive property on an Object.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 */
	
	function defineReactive(obj, key, val) {
	  var dep = new Dep();
	
	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return;
	  }
	
	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;
	
	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter() {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (isArray(value)) {
	          for (var e, i = 0, l = value.length; i < l; i++) {
	            e = value[i];
	            e && e.__ob__ && e.__ob__.dep.depend();
	          }
	        }
	      }
	      return value;
	    },
	    set: function reactiveSetter(newVal) {
	      var value = getter ? getter.call(obj) : val;
	      if (newVal === value) {
	        return;
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}
	
	
	
	var util = Object.freeze({
		defineReactive: defineReactive,
		set: set,
		del: del,
		hasOwn: hasOwn,
		isLiteral: isLiteral,
		isReserved: isReserved,
		_toString: _toString,
		toNumber: toNumber,
		toBoolean: toBoolean,
		stripQuotes: stripQuotes,
		camelize: camelize,
		hyphenate: hyphenate,
		classify: classify,
		bind: bind,
		toArray: toArray,
		extend: extend,
		isObject: isObject,
		isPlainObject: isPlainObject,
		def: def,
		debounce: _debounce,
		indexOf: indexOf,
		cancellable: cancellable,
		looseEqual: looseEqual,
		isArray: isArray,
		hasProto: hasProto,
		inBrowser: inBrowser,
		devtools: devtools,
		isIE: isIE,
		isIE9: isIE9,
		isAndroid: isAndroid,
		isIos: isIos,
		iosVersionMatch: iosVersionMatch,
		iosVersion: iosVersion,
		hasMutationObserverBug: hasMutationObserverBug,
		get transitionProp () { return transitionProp; },
		get transitionEndEvent () { return transitionEndEvent; },
		get animationProp () { return animationProp; },
		get animationEndEvent () { return animationEndEvent; },
		nextTick: nextTick,
		get _Set () { return _Set; },
		query: query,
		inDoc: inDoc,
		getAttr: getAttr,
		getBindAttr: getBindAttr,
		hasBindAttr: hasBindAttr,
		before: before,
		after: after,
		remove: remove,
		prepend: prepend,
		replace: replace,
		on: on,
		off: off,
		setClass: setClass,
		addClass: addClass,
		removeClass: removeClass,
		extractContent: extractContent,
		trimNode: trimNode,
		isTemplate: isTemplate,
		createAnchor: createAnchor,
		findRef: findRef,
		mapNodeRange: mapNodeRange,
		removeNodeRange: removeNodeRange,
		isFragment: isFragment,
		getOuterHTML: getOuterHTML,
		mergeOptions: mergeOptions,
		resolveAsset: resolveAsset,
		checkComponentAttr: checkComponentAttr,
		commonTagRE: commonTagRE,
		reservedTagRE: reservedTagRE,
		get warn () { return warn; }
	});
	
	var uid = 0;
	
	function initMixin (Vue) {
	  /**
	   * The main init sequence. This is called for every
	   * instance, including ones that are created from extended
	   * constructors.
	   *
	   * @param {Object} options - this options object should be
	   *                           the result of merging class
	   *                           options and the options passed
	   *                           in to the constructor.
	   */
	
	  Vue.prototype._init = function (options) {
	    options = options || {};
	
	    this.$el = null;
	    this.$parent = options.parent;
	    this.$root = this.$parent ? this.$parent.$root : this;
	    this.$children = [];
	    this.$refs = {}; // child vm references
	    this.$els = {}; // element references
	    this._watchers = []; // all watchers as an array
	    this._directives = []; // all directives
	
	    // a uid
	    this._uid = uid++;
	
	    // a flag to avoid this being observed
	    this._isVue = true;
	
	    // events bookkeeping
	    this._events = {}; // registered callbacks
	    this._eventsCount = {}; // for $broadcast optimization
	
	    // fragment instance properties
	    this._isFragment = false;
	    this._fragment = // @type {DocumentFragment}
	    this._fragmentStart = // @type {Text|Comment}
	    this._fragmentEnd = null; // @type {Text|Comment}
	
	    // lifecycle state
	    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
	    this._unlinkFn = null;
	
	    // context:
	    // if this is a transcluded component, context
	    // will be the common parent vm of this instance
	    // and its host.
	    this._context = options._context || this.$parent;
	
	    // scope:
	    // if this is inside an inline v-for, the scope
	    // will be the intermediate scope created for this
	    // repeat fragment. this is used for linking props
	    // and container directives.
	    this._scope = options._scope;
	
	    // fragment:
	    // if this instance is compiled inside a Fragment, it
	    // needs to reigster itself as a child of that fragment
	    // for attach/detach to work properly.
	    this._frag = options._frag;
	    if (this._frag) {
	      this._frag.children.push(this);
	    }
	
	    // push self into parent / transclusion host
	    if (this.$parent) {
	      this.$parent.$children.push(this);
	    }
	
	    // merge options.
	    options = this.$options = mergeOptions(this.constructor.options, options, this);
	
	    // set ref
	    this._updateRef();
	
	    // initialize data as empty object.
	    // it will be filled up in _initData().
	    this._data = {};
	
	    // call init hook
	    this._callHook('init');
	
	    // initialize data observation and scope inheritance.
	    this._initState();
	
	    // setup event system and option events.
	    this._initEvents();
	
	    // call created hook
	    this._callHook('created');
	
	    // if `el` option is passed, start compilation.
	    if (options.el) {
	      this.$mount(options.el);
	    }
	  };
	}
	
	var pathCache = new Cache(1000);
	
	// actions
	var APPEND = 0;
	var PUSH = 1;
	var INC_SUB_PATH_DEPTH = 2;
	var PUSH_SUB_PATH = 3;
	
	// states
	var BEFORE_PATH = 0;
	var IN_PATH = 1;
	var BEFORE_IDENT = 2;
	var IN_IDENT = 3;
	var IN_SUB_PATH = 4;
	var IN_SINGLE_QUOTE = 5;
	var IN_DOUBLE_QUOTE = 6;
	var AFTER_PATH = 7;
	var ERROR = 8;
	
	var pathStateMachine = [];
	
	pathStateMachine[BEFORE_PATH] = {
	  'ws': [BEFORE_PATH],
	  'ident': [IN_IDENT, APPEND],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[IN_PATH] = {
	  'ws': [IN_PATH],
	  '.': [BEFORE_IDENT],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[BEFORE_IDENT] = {
	  'ws': [BEFORE_IDENT],
	  'ident': [IN_IDENT, APPEND]
	};
	
	pathStateMachine[IN_IDENT] = {
	  'ident': [IN_IDENT, APPEND],
	  '0': [IN_IDENT, APPEND],
	  'number': [IN_IDENT, APPEND],
	  'ws': [IN_PATH, PUSH],
	  '.': [BEFORE_IDENT, PUSH],
	  '[': [IN_SUB_PATH, PUSH],
	  'eof': [AFTER_PATH, PUSH]
	};
	
	pathStateMachine[IN_SUB_PATH] = {
	  "'": [IN_SINGLE_QUOTE, APPEND],
	  '"': [IN_DOUBLE_QUOTE, APPEND],
	  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
	  ']': [IN_PATH, PUSH_SUB_PATH],
	  'eof': ERROR,
	  'else': [IN_SUB_PATH, APPEND]
	};
	
	pathStateMachine[IN_SINGLE_QUOTE] = {
	  "'": [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_SINGLE_QUOTE, APPEND]
	};
	
	pathStateMachine[IN_DOUBLE_QUOTE] = {
	  '"': [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_DOUBLE_QUOTE, APPEND]
	};
	
	/**
	 * Determine the type of a character in a keypath.
	 *
	 * @param {Char} ch
	 * @return {String} type
	 */
	
	function getPathCharType(ch) {
	  if (ch === undefined) {
	    return 'eof';
	  }
	
	  var code = ch.charCodeAt(0);
	
	  switch (code) {
	    case 0x5B: // [
	    case 0x5D: // ]
	    case 0x2E: // .
	    case 0x22: // "
	    case 0x27: // '
	    case 0x30:
	      // 0
	      return ch;
	
	    case 0x5F: // _
	    case 0x24:
	      // $
	      return 'ident';
	
	    case 0x20: // Space
	    case 0x09: // Tab
	    case 0x0A: // Newline
	    case 0x0D: // Return
	    case 0xA0: // No-break space
	    case 0xFEFF: // Byte Order Mark
	    case 0x2028: // Line Separator
	    case 0x2029:
	      // Paragraph Separator
	      return 'ws';
	  }
	
	  // a-z, A-Z
	  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
	    return 'ident';
	  }
	
	  // 1-9
	  if (code >= 0x31 && code <= 0x39) {
	    return 'number';
	  }
	
	  return 'else';
	}
	
	/**
	 * Format a subPath, return its plain form if it is
	 * a literal string or number. Otherwise prepend the
	 * dynamic indicator (*).
	 *
	 * @param {String} path
	 * @return {String}
	 */
	
	function formatSubPath(path) {
	  var trimmed = path.trim();
	  // invalid leading 0
	  if (path.charAt(0) === '0' && isNaN(path)) {
	    return false;
	  }
	  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
	}
	
	/**
	 * Parse a string path into an array of segments
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parse(path) {
	  var keys = [];
	  var index = -1;
	  var mode = BEFORE_PATH;
	  var subPathDepth = 0;
	  var c, newChar, key, type, transition, action, typeMap;
	
	  var actions = [];
	
	  actions[PUSH] = function () {
	    if (key !== undefined) {
	      keys.push(key);
	      key = undefined;
	    }
	  };
	
	  actions[APPEND] = function () {
	    if (key === undefined) {
	      key = newChar;
	    } else {
	      key += newChar;
	    }
	  };
	
	  actions[INC_SUB_PATH_DEPTH] = function () {
	    actions[APPEND]();
	    subPathDepth++;
	  };
	
	  actions[PUSH_SUB_PATH] = function () {
	    if (subPathDepth > 0) {
	      subPathDepth--;
	      mode = IN_SUB_PATH;
	      actions[APPEND]();
	    } else {
	      subPathDepth = 0;
	      key = formatSubPath(key);
	      if (key === false) {
	        return false;
	      } else {
	        actions[PUSH]();
	      }
	    }
	  };
	
	  function maybeUnescapeQuote() {
	    var nextChar = path[index + 1];
	    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
	      index++;
	      newChar = '\\' + nextChar;
	      actions[APPEND]();
	      return true;
	    }
	  }
	
	  while (mode != null) {
	    index++;
	    c = path[index];
	
	    if (c === '\\' && maybeUnescapeQuote()) {
	      continue;
	    }
	
	    type = getPathCharType(c);
	    typeMap = pathStateMachine[mode];
	    transition = typeMap[type] || typeMap['else'] || ERROR;
	
	    if (transition === ERROR) {
	      return; // parse error
	    }
	
	    mode = transition[0];
	    action = actions[transition[1]];
	    if (action) {
	      newChar = transition[2];
	      newChar = newChar === undefined ? c : newChar;
	      if (action() === false) {
	        return;
	      }
	    }
	
	    if (mode === AFTER_PATH) {
	      keys.raw = path;
	      return keys;
	    }
	  }
	}
	
	/**
	 * External parse that check for a cache hit first
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parsePath(path) {
	  var hit = pathCache.get(path);
	  if (!hit) {
	    hit = parse(path);
	    if (hit) {
	      pathCache.put(path, hit);
	    }
	  }
	  return hit;
	}
	
	/**
	 * Get from an object from a path string
	 *
	 * @param {Object} obj
	 * @param {String} path
	 */
	
	function getPath(obj, path) {
	  return parseExpression(path).get(obj);
	}
	
	/**
	 * Warn against setting non-existent root path on a vm.
	 */
	
	var warnNonExistent;
	if (process.env.NODE_ENV !== 'production') {
	  warnNonExistent = function (path, vm) {
	    warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
	  };
	}
	
	/**
	 * Set on an object from a path
	 *
	 * @param {Object} obj
	 * @param {String | Array} path
	 * @param {*} val
	 */
	
	function setPath(obj, path, val) {
	  var original = obj;
	  if (typeof path === 'string') {
	    path = parse(path);
	  }
	  if (!path || !isObject(obj)) {
	    return false;
	  }
	  var last, key;
	  for (var i = 0, l = path.length; i < l; i++) {
	    last = obj;
	    key = path[i];
	    if (key.charAt(0) === '*') {
	      key = parseExpression(key.slice(1)).get.call(original, original);
	    }
	    if (i < l - 1) {
	      obj = obj[key];
	      if (!isObject(obj)) {
	        obj = {};
	        if (process.env.NODE_ENV !== 'production' && last._isVue) {
	          warnNonExistent(path, last);
	        }
	        set(last, key, obj);
	      }
	    } else {
	      if (isArray(obj)) {
	        obj.$set(key, val);
	      } else if (key in obj) {
	        obj[key] = val;
	      } else {
	        if (process.env.NODE_ENV !== 'production' && obj._isVue) {
	          warnNonExistent(path, obj);
	        }
	        set(obj, key, val);
	      }
	    }
	  }
	  return true;
	}
	
	var path = Object.freeze({
	  parsePath: parsePath,
	  getPath: getPath,
	  setPath: setPath
	});
	
	var expressionCache = new Cache(1000);
	
	var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
	var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	// keywords that don't make sense inside expressions
	var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
	var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	var wsRE = /\s/g;
	var newlineRE = /\n/g;
	var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
	var restoreRE = /"(\d+)"/g;
	var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
	var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
	var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;
	
	function noop() {}
	
	/**
	 * Save / Rewrite / Restore
	 *
	 * When rewriting paths found in an expression, it is
	 * possible for the same letter sequences to be found in
	 * strings and Object literal property keys. Therefore we
	 * remove and store these parts in a temporary array, and
	 * restore them after the path rewrite.
	 */
	
	var saved = [];
	
	/**
	 * Save replacer
	 *
	 * The save regex can match two possible cases:
	 * 1. An opening object literal
	 * 2. A string
	 * If matched as a plain string, we need to escape its
	 * newlines, since the string needs to be preserved when
	 * generating the function body.
	 *
	 * @param {String} str
	 * @param {String} isString - str if matched as a string
	 * @return {String} - placeholder with index
	 */
	
	function save(str, isString) {
	  var i = saved.length;
	  saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
	  return '"' + i + '"';
	}
	
	/**
	 * Path rewrite replacer
	 *
	 * @param {String} raw
	 * @return {String}
	 */
	
	function rewrite(raw) {
	  var c = raw.charAt(0);
	  var path = raw.slice(1);
	  if (allowedKeywordsRE.test(path)) {
	    return raw;
	  } else {
	    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
	    return c + 'scope.' + path;
	  }
	}
	
	/**
	 * Restore replacer
	 *
	 * @param {String} str
	 * @param {String} i - matched save index
	 * @return {String}
	 */
	
	function restore(str, i) {
	  return saved[i];
	}
	
	/**
	 * Rewrite an expression, prefixing all path accessors with
	 * `scope.` and generate getter/setter functions.
	 *
	 * @param {String} exp
	 * @return {Function}
	 */
	
	function compileGetter(exp) {
	  if (improperKeywordsRE.test(exp)) {
	    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
	  }
	  // reset state
	  saved.length = 0;
	  // save strings and object literal keys
	  var body = exp.replace(saveRE, save).replace(wsRE, '');
	  // rewrite all paths
	  // pad 1 space here because the regex matches 1 extra char
	  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
	  return makeGetterFn(body);
	}
	
	/**
	 * Build a getter function. Requires eval.
	 *
	 * We isolate the try/catch so it doesn't affect the
	 * optimization of the parse function when it is not called.
	 *
	 * @param {String} body
	 * @return {Function|undefined}
	 */
	
	function makeGetterFn(body) {
	  try {
	    /* eslint-disable no-new-func */
	    return new Function('scope', 'return ' + body + ';');
	    /* eslint-enable no-new-func */
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      /* istanbul ignore if */
	      if (e.toString().match(/unsafe-eval|CSP/)) {
	        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
	      } else {
	        warn('Invalid expression. ' + 'Generated function body: ' + body);
	      }
	    }
	    return noop;
	  }
	}
	
	/**
	 * Compile a setter function for the expression.
	 *
	 * @param {String} exp
	 * @return {Function|undefined}
	 */
	
	function compileSetter(exp) {
	  var path = parsePath(exp);
	  if (path) {
	    return function (scope, val) {
	      setPath(scope, path, val);
	    };
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);
	  }
	}
	
	/**
	 * Parse an expression into re-written getter/setters.
	 *
	 * @param {String} exp
	 * @param {Boolean} needSet
	 * @return {Function}
	 */
	
	function parseExpression(exp, needSet) {
	  exp = exp.trim();
	  // try cache
	  var hit = expressionCache.get(exp);
	  if (hit) {
	    if (needSet && !hit.set) {
	      hit.set = compileSetter(hit.exp);
	    }
	    return hit;
	  }
	  var res = { exp: exp };
	  res.get = isSimplePath(exp) && exp.indexOf('[') < 0
	  // optimized super simple getter
	  ? makeGetterFn('scope.' + exp)
	  // dynamic getter
	  : compileGetter(exp);
	  if (needSet) {
	    res.set = compileSetter(exp);
	  }
	  expressionCache.put(exp, res);
	  return res;
	}
	
	/**
	 * Check if an expression is a simple path.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	function isSimplePath(exp) {
	  return pathTestRE.test(exp) &&
	  // don't treat literal values as paths
	  !literalValueRE$1.test(exp) &&
	  // Math constants e.g. Math.PI, Math.E etc.
	  exp.slice(0, 5) !== 'Math.';
	}
	
	var expression = Object.freeze({
	  parseExpression: parseExpression,
	  isSimplePath: isSimplePath
	});
	
	// we have two separate queues: one for directive updates
	// and one for user watcher registered via $watch().
	// we want to guarantee directive updates to be called
	// before user watchers so that when user watchers are
	// triggered, the DOM would have already been in updated
	// state.
	
	var queue = [];
	var userQueue = [];
	var has = {};
	var circular = {};
	var waiting = false;
	
	/**
	 * Reset the batcher's state.
	 */
	
	function resetBatcherState() {
	  queue.length = 0;
	  userQueue.length = 0;
	  has = {};
	  circular = {};
	  waiting = false;
	}
	
	/**
	 * Flush both queues and run the watchers.
	 */
	
	function flushBatcherQueue() {
	  var _again = true;
	
	  _function: while (_again) {
	    _again = false;
	
	    runBatcherQueue(queue);
	    runBatcherQueue(userQueue);
	    // user watchers triggered more watchers,
	    // keep flushing until it depletes
	    if (queue.length) {
	      _again = true;
	      continue _function;
	    }
	    // dev tool hook
	    /* istanbul ignore if */
	    if (devtools && config.devtools) {
	      devtools.emit('flush');
	    }
	    resetBatcherState();
	  }
	}
	
	/**
	 * Run the watchers in a single queue.
	 *
	 * @param {Array} queue
	 */
	
	function runBatcherQueue(queue) {
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (var i = 0; i < queue.length; i++) {
	    var watcher = queue[i];
	    var id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
	        break;
	      }
	    }
	  }
	  queue.length = 0;
	}
	
	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 *
	 * @param {Watcher} watcher
	 *   properties:
	 *   - {Number} id
	 *   - {Function} run
	 */
	
	function pushWatcher(watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    // push watcher into appropriate queue
	    var q = watcher.user ? userQueue : queue;
	    has[id] = q.length;
	    q.push(watcher);
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushBatcherQueue);
	    }
	  }
	}
	
	var uid$2 = 0;
	
	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 *
	 * @param {Vue} vm
	 * @param {String|Function} expOrFn
	 * @param {Function} cb
	 * @param {Object} options
	 *                 - {Array} filters
	 *                 - {Boolean} twoWay
	 *                 - {Boolean} deep
	 *                 - {Boolean} user
	 *                 - {Boolean} sync
	 *                 - {Boolean} lazy
	 *                 - {Function} [preProcess]
	 *                 - {Function} [postProcess]
	 * @constructor
	 */
	function Watcher(vm, expOrFn, cb, options) {
	  // mix in options
	  if (options) {
	    extend(this, options);
	  }
	  var isFn = typeof expOrFn === 'function';
	  this.vm = vm;
	  vm._watchers.push(this);
	  this.expression = expOrFn;
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.prevError = null; // for async error stacks
	  // parse expression for getter/setter
	  if (isFn) {
	    this.getter = expOrFn;
	    this.setter = undefined;
	  } else {
	    var res = parseExpression(expOrFn, this.twoWay);
	    this.getter = res.get;
	    this.setter = res.set;
	  }
	  this.value = this.lazy ? undefined : this.get();
	  // state for avoiding false triggers for deep and Array
	  // watchers during vm._digest()
	  this.queued = this.shallow = false;
	}
	
	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	
	Watcher.prototype.get = function () {
	  this.beforeGet();
	  var scope = this.scope || this.vm;
	  var value;
	  try {
	    value = this.getter.call(scope, scope);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  if (this.preProcess) {
	    value = this.preProcess(value);
	  }
	  if (this.filters) {
	    value = scope._applyFilters(value, null, this.filters, false);
	  }
	  if (this.postProcess) {
	    value = this.postProcess(value);
	  }
	  this.afterGet();
	  return value;
	};
	
	/**
	 * Set the corresponding value with the setter.
	 *
	 * @param {*} value
	 */
	
	Watcher.prototype.set = function (value) {
	  var scope = this.scope || this.vm;
	  if (this.filters) {
	    value = scope._applyFilters(value, this.value, this.filters, true);
	  }
	  try {
	    this.setter.call(scope, scope, value);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // two-way sync for v-for alias
	  var forContext = scope.$forContext;
	  if (forContext && forContext.alias === this.expression) {
	    if (forContext.filters) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
	      return;
	    }
	    forContext._withLock(function () {
	      if (scope.$key) {
	        // original is an object
	        forContext.rawValue[scope.$key] = value;
	      } else {
	        forContext.rawValue.$set(scope.$index, value);
	      }
	    });
	  }
	};
	
	/**
	 * Prepare for dependency collection.
	 */
	
	Watcher.prototype.beforeGet = function () {
	  Dep.target = this;
	};
	
	/**
	 * Add a dependency to this directive.
	 *
	 * @param {Dep} dep
	 */
	
	Watcher.prototype.addDep = function (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};
	
	/**
	 * Clean up for dependency collection.
	 */
	
	Watcher.prototype.afterGet = function () {
	  Dep.target = null;
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this.deps[i];
	    if (!this.newDepIds.has(dep.id)) {
	      dep.removeSub(this);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};
	
	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 *
	 * @param {Boolean} shallow
	 */
	
	Watcher.prototype.update = function (shallow) {
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync || !config.async) {
	    this.run();
	  } else {
	    // if queued, only overwrite shallow with non-shallow,
	    // but not the other way around.
	    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
	    this.queued = true;
	    // record before-push error stack in debug mode
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && config.debug) {
	      this.prevError = new Error('[vue] async stack trace');
	    }
	    pushWatcher(this);
	  }
	};
	
	/**
	 * Batcher job interface.
	 * Will be called by the batcher.
	 */
	
	Watcher.prototype.run = function () {
	  if (this.active) {
	    var value = this.get();
	    if (value !== this.value ||
	    // Deep watchers and watchers on Object/Arrays should fire even
	    // when the value is the same, because the value may
	    // have mutated; but only do so if this is a
	    // non-shallow update (caused by a vm digest).
	    (isObject(value) || this.deep) && !this.shallow) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      // in debug + async mode, when a watcher callbacks
	      // throws, we also throw the saved before-push error
	      // so the full cross-tick stack trace is available.
	      var prevError = this.prevError;
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {
	        this.prevError = null;
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          nextTick(function () {
	            throw prevError;
	          }, 0);
	          throw e;
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	    this.queued = this.shallow = false;
	  }
	};
	
	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	
	Watcher.prototype.evaluate = function () {
	  // avoid overwriting another watcher that is being
	  // collected.
	  var current = Dep.target;
	  this.value = this.get();
	  this.dirty = false;
	  Dep.target = current;
	};
	
	/**
	 * Depend on all deps collected by this watcher.
	 */
	
	Watcher.prototype.depend = function () {
	  var i = this.deps.length;
	  while (i--) {
	    this.deps[i].depend();
	  }
	};
	
	/**
	 * Remove self from all dependencies' subcriber list.
	 */
	
	Watcher.prototype.teardown = function () {
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed or is performing a v-for
	    // re-render (the watcher list is then filtered by v-for).
	    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
	      this.vm._watchers.$remove(this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this.deps[i].removeSub(this);
	    }
	    this.active = false;
	    this.vm = this.cb = this.value = null;
	  }
	};
	
	/**
	 * Recrusively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 *
	 * @param {*} val
	 */
	
	var seenObjects = new _Set();
	function traverse(val, seen) {
	  var i = undefined,
	      keys = undefined;
	  if (!seen) {
	    seen = seenObjects;
	    seen.clear();
	  }
	  var isA = isArray(val);
	  var isO = isObject(val);
	  if ((isA || isO) && Object.isExtensible(val)) {
	    if (val.__ob__) {
	      var depId = val.__ob__.dep.id;
	      if (seen.has(depId)) {
	        return;
	      } else {
	        seen.add(depId);
	      }
	    }
	    if (isA) {
	      i = val.length;
	      while (i--) traverse(val[i], seen);
	    } else if (isO) {
	      keys = Object.keys(val);
	      i = keys.length;
	      while (i--) traverse(val[keys[i]], seen);
	    }
	  }
	}
	
	var text$1 = {
	
	  bind: function bind() {
	    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
	  },
	
	  update: function update(value) {
	    this.el[this.attr] = _toString(value);
	  }
	};
	
	var templateCache = new Cache(1000);
	var idSelectorCache = new Cache(1000);
	
	var map = {
	  efault: [0, '', ''],
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
	};
	
	map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];
	
	map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];
	
	map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];
	
	/**
	 * Check if a node is a supported template node with a
	 * DocumentFragment content.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isRealTemplate(node) {
	  return isTemplate(node) && isFragment(node.content);
	}
	
	var tagRE$1 = /<([\w:-]+)/;
	var entityRE = /&#?\w+?;/;
	var commentRE = /<!--/;
	
	/**
	 * Convert a string template to a DocumentFragment.
	 * Determines correct wrapping by tag types. Wrapping
	 * strategy found in jQuery & component/domify.
	 *
	 * @param {String} templateString
	 * @param {Boolean} raw
	 * @return {DocumentFragment}
	 */
	
	function stringToFragment(templateString, raw) {
	  // try a cache hit first
	  var cacheKey = raw ? templateString : templateString.trim();
	  var hit = templateCache.get(cacheKey);
	  if (hit) {
	    return hit;
	  }
	
	  var frag = document.createDocumentFragment();
	  var tagMatch = templateString.match(tagRE$1);
	  var entityMatch = entityRE.test(templateString);
	  var commentMatch = commentRE.test(templateString);
	
	  if (!tagMatch && !entityMatch && !commentMatch) {
	    // text only, return a single text node.
	    frag.appendChild(document.createTextNode(templateString));
	  } else {
	    var tag = tagMatch && tagMatch[1];
	    var wrap = map[tag] || map.efault;
	    var depth = wrap[0];
	    var prefix = wrap[1];
	    var suffix = wrap[2];
	    var node = document.createElement('div');
	
	    node.innerHTML = prefix + templateString + suffix;
	    while (depth--) {
	      node = node.lastChild;
	    }
	
	    var child;
	    /* eslint-disable no-cond-assign */
	    while (child = node.firstChild) {
	      /* eslint-enable no-cond-assign */
	      frag.appendChild(child);
	    }
	  }
	  if (!raw) {
	    trimNode(frag);
	  }
	  templateCache.put(cacheKey, frag);
	  return frag;
	}
	
	/**
	 * Convert a template node to a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {DocumentFragment}
	 */
	
	function nodeToFragment(node) {
	  // if its a template tag and the browser supports it,
	  // its content is already a document fragment. However, iOS Safari has
	  // bug when using directly cloned template content with touch
	  // events and can cause crashes when the nodes are removed from DOM, so we
	  // have to treat template elements as string templates. (#2805)
	  /* istanbul ignore if */
	  if (isRealTemplate(node)) {
	    return stringToFragment(node.innerHTML);
	  }
	  // script template
	  if (node.tagName === 'SCRIPT') {
	    return stringToFragment(node.textContent);
	  }
	  // normal node, clone it to avoid mutating the original
	  var clonedNode = cloneNode(node);
	  var frag = document.createDocumentFragment();
	  var child;
	  /* eslint-disable no-cond-assign */
	  while (child = clonedNode.firstChild) {
	    /* eslint-enable no-cond-assign */
	    frag.appendChild(child);
	  }
	  trimNode(frag);
	  return frag;
	}
	
	// Test for the presence of the Safari template cloning bug
	// https://bugs.webkit.org/showug.cgi?id=137755
	var hasBrokenTemplate = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var a = document.createElement('div');
	    a.innerHTML = '<template>1</template>';
	    return !a.cloneNode(true).firstChild.innerHTML;
	  } else {
	    return false;
	  }
	})();
	
	// Test for IE10/11 textarea placeholder clone bug
	var hasTextareaCloneBug = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var t = document.createElement('textarea');
	    t.placeholder = 't';
	    return t.cloneNode(true).value === 't';
	  } else {
	    return false;
	  }
	})();
	
	/**
	 * 1. Deal with Safari cloning nested <template> bug by
	 *    manually cloning all template instances.
	 * 2. Deal with IE10/11 textarea placeholder bug by setting
	 *    the correct value after cloning.
	 *
	 * @param {Element|DocumentFragment} node
	 * @return {Element|DocumentFragment}
	 */
	
	function cloneNode(node) {
	  /* istanbul ignore if */
	  if (!node.querySelectorAll) {
	    return node.cloneNode();
	  }
	  var res = node.cloneNode(true);
	  var i, original, cloned;
	  /* istanbul ignore if */
	  if (hasBrokenTemplate) {
	    var tempClone = res;
	    if (isRealTemplate(node)) {
	      node = node.content;
	      tempClone = res.content;
	    }
	    original = node.querySelectorAll('template');
	    if (original.length) {
	      cloned = tempClone.querySelectorAll('template');
	      i = cloned.length;
	      while (i--) {
	        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
	      }
	    }
	  }
	  /* istanbul ignore if */
	  if (hasTextareaCloneBug) {
	    if (node.tagName === 'TEXTAREA') {
	      res.value = node.value;
	    } else {
	      original = node.querySelectorAll('textarea');
	      if (original.length) {
	        cloned = res.querySelectorAll('textarea');
	        i = cloned.length;
	        while (i--) {
	          cloned[i].value = original[i].value;
	        }
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Process the template option and normalizes it into a
	 * a DocumentFragment that can be used as a partial or a
	 * instance template.
	 *
	 * @param {*} template
	 *        Possible values include:
	 *        - DocumentFragment object
	 *        - Node object of type Template
	 *        - id selector: '#some-template-id'
	 *        - template string: '<div><span>{{msg}}</span></div>'
	 * @param {Boolean} shouldClone
	 * @param {Boolean} raw
	 *        inline HTML interpolation. Do not check for id
	 *        selector and keep whitespace in the string.
	 * @return {DocumentFragment|undefined}
	 */
	
	function parseTemplate(template, shouldClone, raw) {
	  var node, frag;
	
	  // if the template is already a document fragment,
	  // do nothing
	  if (isFragment(template)) {
	    trimNode(template);
	    return shouldClone ? cloneNode(template) : template;
	  }
	
	  if (typeof template === 'string') {
	    // id selector
	    if (!raw && template.charAt(0) === '#') {
	      // id selector can be cached too
	      frag = idSelectorCache.get(template);
	      if (!frag) {
	        node = document.getElementById(template.slice(1));
	        if (node) {
	          frag = nodeToFragment(node);
	          // save selector to cache
	          idSelectorCache.put(template, frag);
	        }
	      }
	    } else {
	      // normal string template
	      frag = stringToFragment(template, raw);
	    }
	  } else if (template.nodeType) {
	    // a direct node
	    frag = nodeToFragment(template);
	  }
	
	  return frag && shouldClone ? cloneNode(frag) : frag;
	}
	
	var template = Object.freeze({
	  cloneNode: cloneNode,
	  parseTemplate: parseTemplate
	});
	
	var html = {
	
	  bind: function bind() {
	    // a comment node means this is a binding for
	    // {{{ inline unescaped html }}}
	    if (this.el.nodeType === 8) {
	      // hold nodes
	      this.nodes = [];
	      // replace the placeholder with proper anchor
	      this.anchor = createAnchor('v-html');
	      replace(this.el, this.anchor);
	    }
	  },
	
	  update: function update(value) {
	    value = _toString(value);
	    if (this.nodes) {
	      this.swap(value);
	    } else {
	      this.el.innerHTML = value;
	    }
	  },
	
	  swap: function swap(value) {
	    // remove old nodes
	    var i = this.nodes.length;
	    while (i--) {
	      remove(this.nodes[i]);
	    }
	    // convert new value to a fragment
	    // do not attempt to retrieve from id selector
	    var frag = parseTemplate(value, true, true);
	    // save a reference to these nodes so we can remove later
	    this.nodes = toArray(frag.childNodes);
	    before(frag, this.anchor);
	  }
	};
	
	/**
	 * Abstraction for a partially-compiled fragment.
	 * Can optionally compile content with a child scope.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Vue} [host]
	 * @param {Object} [scope]
	 * @param {Fragment} [parentFrag]
	 */
	function Fragment(linker, vm, frag, host, scope, parentFrag) {
	  this.children = [];
	  this.childFrags = [];
	  this.vm = vm;
	  this.scope = scope;
	  this.inserted = false;
	  this.parentFrag = parentFrag;
	  if (parentFrag) {
	    parentFrag.childFrags.push(this);
	  }
	  this.unlink = linker(vm, frag, host, scope, this);
	  var single = this.single = frag.childNodes.length === 1 &&
	  // do not go single mode if the only node is an anchor
	  !frag.childNodes[0].__v_anchor;
	  if (single) {
	    this.node = frag.childNodes[0];
	    this.before = singleBefore;
	    this.remove = singleRemove;
	  } else {
	    this.node = createAnchor('fragment-start');
	    this.end = createAnchor('fragment-end');
	    this.frag = frag;
	    prepend(this.node, frag);
	    frag.appendChild(this.end);
	    this.before = multiBefore;
	    this.remove = multiRemove;
	  }
	  this.node.__v_frag = this;
	}
	
	/**
	 * Call attach/detach for all components contained within
	 * this fragment. Also do so recursively for all child
	 * fragments.
	 *
	 * @param {Function} hook
	 */
	
	Fragment.prototype.callHook = function (hook) {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    this.childFrags[i].callHook(hook);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    hook(this.children[i]);
	  }
	};
	
	/**
	 * Insert fragment before target, single node version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function singleBefore(target, withTransition) {
	  this.inserted = true;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  method(this.node, target, this.vm);
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, single node version
	 */
	
	function singleRemove() {
	  this.inserted = false;
	  var shouldCallRemove = inDoc(this.node);
	  var self = this;
	  this.beforeRemove();
	  removeWithTransition(this.node, this.vm, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Insert fragment before target, multi-nodes version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function multiBefore(target, withTransition) {
	  this.inserted = true;
	  var vm = this.vm;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  mapNodeRange(this.node, this.end, function (node) {
	    method(node, target, vm);
	  });
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, multi-nodes version
	 */
	
	function multiRemove() {
	  this.inserted = false;
	  var self = this;
	  var shouldCallRemove = inDoc(this.node);
	  this.beforeRemove();
	  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Prepare the fragment for removal.
	 */
	
	Fragment.prototype.beforeRemove = function () {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    // call the same method recursively on child
	    // fragments, depth-first
	    this.childFrags[i].beforeRemove(false);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    // Call destroy for all contained instances,
	    // with remove:false and defer:true.
	    // Defer is necessary because we need to
	    // keep the children to call detach hooks
	    // on them.
	    this.children[i].$destroy(false, true);
	  }
	  var dirs = this.unlink.dirs;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    // disable the watchers on all the directives
	    // so that the rendered content stays the same
	    // during removal.
	    dirs[i]._watcher && dirs[i]._watcher.teardown();
	  }
	};
	
	/**
	 * Destroy the fragment.
	 */
	
	Fragment.prototype.destroy = function () {
	  if (this.parentFrag) {
	    this.parentFrag.childFrags.$remove(this);
	  }
	  this.node.__v_frag = null;
	  this.unlink();
	};
	
	/**
	 * Call attach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function attach(child) {
	  if (!child._isAttached && inDoc(child.$el)) {
	    child._callHook('attached');
	  }
	}
	
	/**
	 * Call detach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function detach(child) {
	  if (child._isAttached && !inDoc(child.$el)) {
	    child._callHook('detached');
	  }
	}
	
	var linkerCache = new Cache(5000);
	
	/**
	 * A factory that can be used to create instances of a
	 * fragment. Caches the compiled linker if possible.
	 *
	 * @param {Vue} vm
	 * @param {Element|String} el
	 */
	function FragmentFactory(vm, el) {
	  this.vm = vm;
	  var template;
	  var isString = typeof el === 'string';
	  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
	    template = parseTemplate(el, true);
	  } else {
	    template = document.createDocumentFragment();
	    template.appendChild(el);
	  }
	  this.template = template;
	  // linker can be cached, but only for components
	  var linker;
	  var cid = vm.constructor.cid;
	  if (cid > 0) {
	    var cacheId = cid + (isString ? el : getOuterHTML(el));
	    linker = linkerCache.get(cacheId);
	    if (!linker) {
	      linker = compile(template, vm.$options, true);
	      linkerCache.put(cacheId, linker);
	    }
	  } else {
	    linker = compile(template, vm.$options, true);
	  }
	  this.linker = linker;
	}
	
	/**
	 * Create a fragment instance with given host and scope.
	 *
	 * @param {Vue} host
	 * @param {Object} scope
	 * @param {Fragment} parentFrag
	 */
	
	FragmentFactory.prototype.create = function (host, scope, parentFrag) {
	  var frag = cloneNode(this.template);
	  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
	};
	
	var ON = 700;
	var MODEL = 800;
	var BIND = 850;
	var TRANSITION = 1100;
	var EL = 1500;
	var COMPONENT = 1500;
	var PARTIAL = 1750;
	var IF = 2100;
	var FOR = 2200;
	var SLOT = 2300;
	
	var uid$3 = 0;
	
	var vFor = {
	
	  priority: FOR,
	  terminal: true,
	
	  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],
	
	  bind: function bind() {
	    // support "item in/of items" syntax
	    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
	    if (inMatch) {
	      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
	      if (itMatch) {
	        this.iterator = itMatch[1].trim();
	        this.alias = itMatch[2].trim();
	      } else {
	        this.alias = inMatch[1].trim();
	      }
	      this.expression = inMatch[2];
	    }
	
	    if (!this.alias) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
	      return;
	    }
	
	    // uid as a cache identifier
	    this.id = '__v-for__' + ++uid$3;
	
	    // check if this is an option list,
	    // so that we know if we need to update the <select>'s
	    // v-model when the option list has changed.
	    // because v-model has a lower priority than v-for,
	    // the v-model is not bound here yet, so we have to
	    // retrive it in the actual updateModel() function.
	    var tag = this.el.tagName;
	    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';
	
	    // setup anchor nodes
	    this.start = createAnchor('v-for-start');
	    this.end = createAnchor('v-for-end');
	    replace(this.el, this.end);
	    before(this.start, this.end);
	
	    // cache
	    this.cache = Object.create(null);
	
	    // fragment factory
	    this.factory = new FragmentFactory(this.vm, this.el);
	  },
	
	  update: function update(data) {
	    this.diff(data);
	    this.updateRef();
	    this.updateModel();
	  },
	
	  /**
	   * Diff, based on new data and old data, determine the
	   * minimum amount of DOM manipulations needed to make the
	   * DOM reflect the new data Array.
	   *
	   * The algorithm diffs the new data Array by storing a
	   * hidden reference to an owner vm instance on previously
	   * seen data. This allows us to achieve O(n) which is
	   * better than a levenshtein distance based algorithm,
	   * which is O(m * n).
	   *
	   * @param {Array} data
	   */
	
	  diff: function diff(data) {
	    // check if the Array was converted from an Object
	    var item = data[0];
	    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');
	
	    var trackByKey = this.params.trackBy;
	    var oldFrags = this.frags;
	    var frags = this.frags = new Array(data.length);
	    var alias = this.alias;
	    var iterator = this.iterator;
	    var start = this.start;
	    var end = this.end;
	    var inDocument = inDoc(start);
	    var init = !oldFrags;
	    var i, l, frag, key, value, primitive;
	
	    // First pass, go through the new Array and fill up
	    // the new frags array. If a piece of data has a cached
	    // instance for it, we reuse it. Otherwise build a new
	    // instance.
	    for (i = 0, l = data.length; i < l; i++) {
	      item = data[i];
	      key = convertedFromObject ? item.$key : null;
	      value = convertedFromObject ? item.$value : item;
	      primitive = !isObject(value);
	      frag = !init && this.getCachedFrag(value, i, key);
	      if (frag) {
	        // reusable fragment
	        frag.reused = true;
	        // update $index
	        frag.scope.$index = i;
	        // update $key
	        if (key) {
	          frag.scope.$key = key;
	        }
	        // update iterator
	        if (iterator) {
	          frag.scope[iterator] = key !== null ? key : i;
	        }
	        // update data for track-by, object repeat &
	        // primitive values.
	        if (trackByKey || convertedFromObject || primitive) {
	          withoutConversion(function () {
	            frag.scope[alias] = value;
	          });
	        }
	      } else {
	        // new isntance
	        frag = this.create(value, alias, i, key);
	        frag.fresh = !init;
	      }
	      frags[i] = frag;
	      if (init) {
	        frag.before(end);
	      }
	    }
	
	    // we're done for the initial render.
	    if (init) {
	      return;
	    }
	
	    // Second pass, go through the old fragments and
	    // destroy those who are not reused (and remove them
	    // from cache)
	    var removalIndex = 0;
	    var totalRemoved = oldFrags.length - frags.length;
	    // when removing a large number of fragments, watcher removal
	    // turns out to be a perf bottleneck, so we batch the watcher
	    // removals into a single filter call!
	    this.vm._vForRemoving = true;
	    for (i = 0, l = oldFrags.length; i < l; i++) {
	      frag = oldFrags[i];
	      if (!frag.reused) {
	        this.deleteCachedFrag(frag);
	        this.remove(frag, removalIndex++, totalRemoved, inDocument);
	      }
	    }
	    this.vm._vForRemoving = false;
	    if (removalIndex) {
	      this.vm._watchers = this.vm._watchers.filter(function (w) {
	        return w.active;
	      });
	    }
	
	    // Final pass, move/insert new fragments into the
	    // right place.
	    var targetPrev, prevEl, currentPrev;
	    var insertionIndex = 0;
	    for (i = 0, l = frags.length; i < l; i++) {
	      frag = frags[i];
	      // this is the frag that we should be after
	      targetPrev = frags[i - 1];
	      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
	      if (frag.reused && !frag.staggerCb) {
	        currentPrev = findPrevFrag(frag, start, this.id);
	        if (currentPrev !== targetPrev && (!currentPrev ||
	        // optimization for moving a single item.
	        // thanks to suggestions by @livoras in #1807
	        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
	          this.move(frag, prevEl);
	        }
	      } else {
	        // new instance, or still in stagger.
	        // insert with updated stagger index.
	        this.insert(frag, insertionIndex++, prevEl, inDocument);
	      }
	      frag.reused = frag.fresh = false;
	    }
	  },
	
	  /**
	   * Create a new fragment instance.
	   *
	   * @param {*} value
	   * @param {String} alias
	   * @param {Number} index
	   * @param {String} [key]
	   * @return {Fragment}
	   */
	
	  create: function create(value, alias, index, key) {
	    var host = this._host;
	    // create iteration scope
	    var parentScope = this._scope || this.vm;
	    var scope = Object.create(parentScope);
	    // ref holder for the scope
	    scope.$refs = Object.create(parentScope.$refs);
	    scope.$els = Object.create(parentScope.$els);
	    // make sure point $parent to parent scope
	    scope.$parent = parentScope;
	    // for two-way binding on alias
	    scope.$forContext = this;
	    // define scope properties
	    // important: define the scope alias without forced conversion
	    // so that frozen data structures remain non-reactive.
	    withoutConversion(function () {
	      defineReactive(scope, alias, value);
	    });
	    defineReactive(scope, '$index', index);
	    if (key) {
	      defineReactive(scope, '$key', key);
	    } else if (scope.$key) {
	      // avoid accidental fallback
	      def(scope, '$key', null);
	    }
	    if (this.iterator) {
	      defineReactive(scope, this.iterator, key !== null ? key : index);
	    }
	    var frag = this.factory.create(host, scope, this._frag);
	    frag.forId = this.id;
	    this.cacheFrag(value, frag, index, key);
	    return frag;
	  },
	
	  /**
	   * Update the v-ref on owner vm.
	   */
	
	  updateRef: function updateRef() {
	    var ref = this.descriptor.ref;
	    if (!ref) return;
	    var hash = (this._scope || this.vm).$refs;
	    var refs;
	    if (!this.fromObject) {
	      refs = this.frags.map(findVmFromFrag);
	    } else {
	      refs = {};
	      this.frags.forEach(function (frag) {
	        refs[frag.scope.$key] = findVmFromFrag(frag);
	      });
	    }
	    hash[ref] = refs;
	  },
	
	  /**
	   * For option lists, update the containing v-model on
	   * parent <select>.
	   */
	
	  updateModel: function updateModel() {
	    if (this.isOption) {
	      var parent = this.start.parentNode;
	      var model = parent && parent.__v_model;
	      if (model) {
	        model.forceUpdate();
	      }
	    }
	  },
	
	  /**
	   * Insert a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Node} prevEl
	   * @param {Boolean} inDocument
	   */
	
	  insert: function insert(frag, index, prevEl, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	    }
	    var staggerAmount = this.getStagger(frag, index, null, 'enter');
	    if (inDocument && staggerAmount) {
	      // create an anchor and insert it synchronously,
	      // so that we can resolve the correct order without
	      // worrying about some elements not inserted yet
	      var anchor = frag.staggerAnchor;
	      if (!anchor) {
	        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
	        anchor.__v_frag = frag;
	      }
	      after(anchor, prevEl);
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.before(anchor);
	        remove(anchor);
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      var target = prevEl.nextSibling;
	      /* istanbul ignore if */
	      if (!target) {
	        // reset end anchor position in case the position was messed up
	        // by an external drag-n-drop library.
	        after(this.end, prevEl);
	        target = this.end;
	      }
	      frag.before(target);
	    }
	  },
	
	  /**
	   * Remove a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {Boolean} inDocument
	   */
	
	  remove: function remove(frag, index, total, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	      // it's not possible for the same frag to be removed
	      // twice, so if we have a pending stagger callback,
	      // it means this frag is queued for enter but removed
	      // before its transition started. Since it is already
	      // destroyed, we can just leave it in detached state.
	      return;
	    }
	    var staggerAmount = this.getStagger(frag, index, total, 'leave');
	    if (inDocument && staggerAmount) {
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.remove();
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      frag.remove();
	    }
	  },
	
	  /**
	   * Move a fragment to a new position.
	   * Force no transition.
	   *
	   * @param {Fragment} frag
	   * @param {Node} prevEl
	   */
	
	  move: function move(frag, prevEl) {
	    // fix a common issue with Sortable:
	    // if prevEl doesn't have nextSibling, this means it's
	    // been dragged after the end anchor. Just re-position
	    // the end anchor to the end of the container.
	    /* istanbul ignore if */
	    if (!prevEl.nextSibling) {
	      this.end.parentNode.appendChild(this.end);
	    }
	    frag.before(prevEl.nextSibling, false);
	  },
	
	  /**
	   * Cache a fragment using track-by or the object key.
	   *
	   * @param {*} value
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {String} [key]
	   */
	
	  cacheFrag: function cacheFrag(value, frag, index, key) {
	    var trackByKey = this.params.trackBy;
	    var cache = this.cache;
	    var primitive = !isObject(value);
	    var id;
	    if (key || trackByKey || primitive) {
	      id = getTrackByKey(index, key, value, trackByKey);
	      if (!cache[id]) {
	        cache[id] = frag;
	      } else if (trackByKey !== '$index') {
	        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	      }
	    } else {
	      id = this.id;
	      if (hasOwn(value, id)) {
	        if (value[id] === null) {
	          value[id] = frag;
	        } else {
	          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	        }
	      } else if (Object.isExtensible(value)) {
	        def(value, id, frag);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
	      }
	    }
	    frag.raw = value;
	  },
	
	  /**
	   * Get a cached fragment from the value/index/key
	   *
	   * @param {*} value
	   * @param {Number} index
	   * @param {String} key
	   * @return {Fragment}
	   */
	
	  getCachedFrag: function getCachedFrag(value, index, key) {
	    var trackByKey = this.params.trackBy;
	    var primitive = !isObject(value);
	    var frag;
	    if (key || trackByKey || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      frag = this.cache[id];
	    } else {
	      frag = value[this.id];
	    }
	    if (frag && (frag.reused || frag.fresh)) {
	      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	    }
	    return frag;
	  },
	
	  /**
	   * Delete a fragment from cache.
	   *
	   * @param {Fragment} frag
	   */
	
	  deleteCachedFrag: function deleteCachedFrag(frag) {
	    var value = frag.raw;
	    var trackByKey = this.params.trackBy;
	    var scope = frag.scope;
	    var index = scope.$index;
	    // fix #948: avoid accidentally fall through to
	    // a parent repeater which happens to have $key.
	    var key = hasOwn(scope, '$key') && scope.$key;
	    var primitive = !isObject(value);
	    if (trackByKey || key || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      this.cache[id] = null;
	    } else {
	      value[this.id] = null;
	      frag.raw = null;
	    }
	  },
	
	  /**
	   * Get the stagger amount for an insertion/removal.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {String} type
	   */
	
	  getStagger: function getStagger(frag, index, total, type) {
	    type = type + 'Stagger';
	    var trans = frag.node.__v_trans;
	    var hooks = trans && trans.hooks;
	    var hook = hooks && (hooks[type] || hooks.stagger);
	    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
	  },
	
	  /**
	   * Pre-process the value before piping it through the
	   * filters. This is passed to and called by the watcher.
	   */
	
	  _preProcess: function _preProcess(value) {
	    // regardless of type, store the un-filtered raw value.
	    this.rawValue = value;
	    return value;
	  },
	
	  /**
	   * Post-process the value after it has been piped through
	   * the filters. This is passed to and called by the watcher.
	   *
	   * It is necessary for this to be called during the
	   * watcher's dependency collection phase because we want
	   * the v-for to update when the source Object is mutated.
	   */
	
	  _postProcess: function _postProcess(value) {
	    if (isArray(value)) {
	      return value;
	    } else if (isPlainObject(value)) {
	      // convert plain object to array.
	      var keys = Object.keys(value);
	      var i = keys.length;
	      var res = new Array(i);
	      var key;
	      while (i--) {
	        key = keys[i];
	        res[i] = {
	          $key: key,
	          $value: value[key]
	        };
	      }
	      return res;
	    } else {
	      if (typeof value === 'number' && !isNaN(value)) {
	        value = range(value);
	      }
	      return value || [];
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.descriptor.ref) {
	      (this._scope || this.vm).$refs[this.descriptor.ref] = null;
	    }
	    if (this.frags) {
	      var i = this.frags.length;
	      var frag;
	      while (i--) {
	        frag = this.frags[i];
	        this.deleteCachedFrag(frag);
	        frag.destroy();
	      }
	    }
	  }
	};
	
	/**
	 * Helper to find the previous element that is a fragment
	 * anchor. This is necessary because a destroyed frag's
	 * element could still be lingering in the DOM before its
	 * leaving transition finishes, but its inserted flag
	 * should have been set to false so we can skip them.
	 *
	 * If this is a block repeat, we want to make sure we only
	 * return frag that is bound to this v-for. (see #929)
	 *
	 * @param {Fragment} frag
	 * @param {Comment|Text} anchor
	 * @param {String} id
	 * @return {Fragment}
	 */
	
	function findPrevFrag(frag, anchor, id) {
	  var el = frag.node.previousSibling;
	  /* istanbul ignore if */
	  if (!el) return;
	  frag = el.__v_frag;
	  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
	    el = el.previousSibling;
	    /* istanbul ignore if */
	    if (!el) return;
	    frag = el.__v_frag;
	  }
	  return frag;
	}
	
	/**
	 * Find a vm from a fragment.
	 *
	 * @param {Fragment} frag
	 * @return {Vue|undefined}
	 */
	
	function findVmFromFrag(frag) {
	  var node = frag.node;
	  // handle multi-node frag
	  if (frag.end) {
	    while (!node.__vue__ && node !== frag.end && node.nextSibling) {
	      node = node.nextSibling;
	    }
	  }
	  return node.__vue__;
	}
	
	/**
	 * Create a range array from given number.
	 *
	 * @param {Number} n
	 * @return {Array}
	 */
	
	function range(n) {
	  var i = -1;
	  var ret = new Array(Math.floor(n));
	  while (++i < n) {
	    ret[i] = i;
	  }
	  return ret;
	}
	
	/**
	 * Get the track by key for an item.
	 *
	 * @param {Number} index
	 * @param {String} key
	 * @param {*} value
	 * @param {String} [trackByKey]
	 */
	
	function getTrackByKey(index, key, value, trackByKey) {
	  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  vFor.warnDuplicate = function (value) {
	    warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
	  };
	}
	
	var vIf = {
	
	  priority: IF,
	  terminal: true,
	
	  bind: function bind() {
	    var el = this.el;
	    if (!el.__vue__) {
	      // check else block
	      var next = el.nextElementSibling;
	      if (next && getAttr(next, 'v-else') !== null) {
	        remove(next);
	        this.elseEl = next;
	      }
	      // check main block
	      this.anchor = createAnchor('v-if');
	      replace(el, this.anchor);
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
	      this.invalid = true;
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) return;
	    if (value) {
	      if (!this.frag) {
	        this.insert();
	      }
	    } else {
	      this.remove();
	    }
	  },
	
	  insert: function insert() {
	    if (this.elseFrag) {
	      this.elseFrag.remove();
	      this.elseFrag = null;
	    }
	    // lazy init factory
	    if (!this.factory) {
	      this.factory = new FragmentFactory(this.vm, this.el);
	    }
	    this.frag = this.factory.create(this._host, this._scope, this._frag);
	    this.frag.before(this.anchor);
	  },
	
	  remove: function remove() {
	    if (this.frag) {
	      this.frag.remove();
	      this.frag = null;
	    }
	    if (this.elseEl && !this.elseFrag) {
	      if (!this.elseFactory) {
	        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
	      }
	      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
	      this.elseFrag.before(this.anchor);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	    if (this.elseFrag) {
	      this.elseFrag.destroy();
	    }
	  }
	};
	
	var show = {
	
	  bind: function bind() {
	    // check else block
	    var next = this.el.nextElementSibling;
	    if (next && getAttr(next, 'v-else') !== null) {
	      this.elseEl = next;
	    }
	  },
	
	  update: function update(value) {
	    this.apply(this.el, value);
	    if (this.elseEl) {
	      this.apply(this.elseEl, !value);
	    }
	  },
	
	  apply: function apply(el, value) {
	    if (inDoc(el)) {
	      applyTransition(el, value ? 1 : -1, toggle, this.vm);
	    } else {
	      toggle();
	    }
	    function toggle() {
	      el.style.display = value ? '' : 'none';
	    }
	  }
	};
	
	var text$2 = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	    var isRange = el.type === 'range';
	    var lazy = this.params.lazy;
	    var number = this.params.number;
	    var debounce = this.params.debounce;
	
	    // handle composition events.
	    //   http://blog.evanyou.me/2014/01/03/composition-event/
	    // skip this for Android because it handles composition
	    // events quite differently. Android doesn't trigger
	    // composition events for language input methods e.g.
	    // Chinese, but instead triggers them for spelling
	    // suggestions... (see Discussion/#162)
	    var composing = false;
	    if (!isAndroid && !isRange) {
	      this.on('compositionstart', function () {
	        composing = true;
	      });
	      this.on('compositionend', function () {
	        composing = false;
	        // in IE11 the "compositionend" event fires AFTER
	        // the "input" event, so the input handler is blocked
	        // at the end... have to call it here.
	        //
	        // #1327: in lazy mode this is unecessary.
	        if (!lazy) {
	          self.listener();
	        }
	      });
	    }
	
	    // prevent messing with the input when user is typing,
	    // and force update on blur.
	    this.focused = false;
	    if (!isRange && !lazy) {
	      this.on('focus', function () {
	        self.focused = true;
	      });
	      this.on('blur', function () {
	        self.focused = false;
	        // do not sync value after fragment removal (#2017)
	        if (!self._frag || self._frag.inserted) {
	          self.rawListener();
	        }
	      });
	    }
	
	    // Now attach the main listener
	    this.listener = this.rawListener = function () {
	      if (composing || !self._bound) {
	        return;
	      }
	      var val = number || isRange ? toNumber(el.value) : el.value;
	      self.set(val);
	      // force update on next tick to avoid lock & same value
	      // also only update when user is not typing
	      nextTick(function () {
	        if (self._bound && !self.focused) {
	          self.update(self._watcher.value);
	        }
	      });
	    };
	
	    // apply debounce
	    if (debounce) {
	      this.listener = _debounce(this.listener, debounce);
	    }
	
	    // Support jQuery events, since jQuery.trigger() doesn't
	    // trigger native events in some cases and some plugins
	    // rely on $.trigger()
	    //
	    // We want to make sure if a listener is attached using
	    // jQuery, it is also removed with jQuery, that's why
	    // we do the check for each directive instance and
	    // store that check result on itself. This also allows
	    // easier test coverage control by unsetting the global
	    // jQuery variable in tests.
	    this.hasjQuery = typeof jQuery === 'function';
	    if (this.hasjQuery) {
	      var method = jQuery.fn.on ? 'on' : 'bind';
	      jQuery(el)[method]('change', this.rawListener);
	      if (!lazy) {
	        jQuery(el)[method]('input', this.listener);
	      }
	    } else {
	      this.on('change', this.rawListener);
	      if (!lazy) {
	        this.on('input', this.listener);
	      }
	    }
	
	    // IE9 doesn't fire input event on backspace/del/cut
	    if (!lazy && isIE9) {
	      this.on('cut', function () {
	        nextTick(self.listener);
	      });
	      this.on('keyup', function (e) {
	        if (e.keyCode === 46 || e.keyCode === 8) {
	          self.listener();
	        }
	      });
	    }
	
	    // set initial value if present
	    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    // #3029 only update when the value changes. This prevent
	    // browsers from overwriting values like selectionStart
	    value = _toString(value);
	    if (value !== this.el.value) this.el.value = value;
	  },
	
	  unbind: function unbind() {
	    var el = this.el;
	    if (this.hasjQuery) {
	      var method = jQuery.fn.off ? 'off' : 'unbind';
	      jQuery(el)[method]('change', this.listener);
	      jQuery(el)[method]('input', this.listener);
	    }
	  }
	};
	
	var radio = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      // value overwrite via v-bind:value
	      if (el.hasOwnProperty('_value')) {
	        return el._value;
	      }
	      var val = el.value;
	      if (self.params.number) {
	        val = toNumber(val);
	      }
	      return val;
	    };
	
	    this.listener = function () {
	      self.set(self.getValue());
	    };
	    this.on('change', this.listener);
	
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    this.el.checked = looseEqual(value, this.getValue());
	  }
	};
	
	var select = {
	
	  bind: function bind() {
	    var _this = this;
	
	    var self = this;
	    var el = this.el;
	
	    // method to force update DOM using latest value.
	    this.forceUpdate = function () {
	      if (self._watcher) {
	        self.update(self._watcher.get());
	      }
	    };
	
	    // check if this is a multiple select
	    var multiple = this.multiple = el.hasAttribute('multiple');
	
	    // attach listener
	    this.listener = function () {
	      var value = getValue(el, multiple);
	      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
	      self.set(value);
	    };
	    this.on('change', this.listener);
	
	    // if has initial value, set afterBind
	    var initValue = getValue(el, multiple, true);
	    if (multiple && initValue.length || !multiple && initValue !== null) {
	      this.afterBind = this.listener;
	    }
	
	    // All major browsers except Firefox resets
	    // selectedIndex with value -1 to 0 when the element
	    // is appended to a new parent, therefore we have to
	    // force a DOM update whenever that happens...
	    this.vm.$on('hook:attached', function () {
	      nextTick(_this.forceUpdate);
	    });
	    if (!inDoc(el)) {
	      nextTick(this.forceUpdate);
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    el.selectedIndex = -1;
	    var multi = this.multiple && isArray(value);
	    var options = el.options;
	    var i = options.length;
	    var op, val;
	    while (i--) {
	      op = options[i];
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      /* eslint-disable eqeqeq */
	      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
	      /* eslint-enable eqeqeq */
	    }
	  },
	
	  unbind: function unbind() {
	    /* istanbul ignore next */
	    this.vm.$off('hook:attached', this.forceUpdate);
	  }
	};
	
	/**
	 * Get select value
	 *
	 * @param {SelectElement} el
	 * @param {Boolean} multi
	 * @param {Boolean} init
	 * @return {Array|*}
	 */
	
	function getValue(el, multi, init) {
	  var res = multi ? [] : null;
	  var op, val, selected;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    op = el.options[i];
	    selected = init ? op.hasAttribute('selected') : op.selected;
	    if (selected) {
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      if (multi) {
	        res.push(val);
	      } else {
	        return val;
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Native Array.indexOf uses strict equal, but in this
	 * case we need to match string/numbers with custom equal.
	 *
	 * @param {Array} arr
	 * @param {*} val
	 */
	
	function indexOf$1(arr, val) {
	  var i = arr.length;
	  while (i--) {
	    if (looseEqual(arr[i], val)) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	var checkbox = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
	    };
	
	    function getBooleanValue() {
	      var val = el.checked;
	      if (val && el.hasOwnProperty('_trueValue')) {
	        return el._trueValue;
	      }
	      if (!val && el.hasOwnProperty('_falseValue')) {
	        return el._falseValue;
	      }
	      return val;
	    }
	
	    this.listener = function () {
	      var model = self._watcher.value;
	      if (isArray(model)) {
	        var val = self.getValue();
	        if (el.checked) {
	          if (indexOf(model, val) < 0) {
	            model.push(val);
	          }
	        } else {
	          model.$remove(val);
	        }
	      } else {
	        self.set(getBooleanValue());
	      }
	    };
	
	    this.on('change', this.listener);
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    if (isArray(value)) {
	      el.checked = indexOf(value, this.getValue()) > -1;
	    } else {
	      if (el.hasOwnProperty('_trueValue')) {
	        el.checked = looseEqual(value, el._trueValue);
	      } else {
	        el.checked = !!value;
	      }
	    }
	  }
	};
	
	var handlers = {
	  text: text$2,
	  radio: radio,
	  select: select,
	  checkbox: checkbox
	};
	
	var model = {
	
	  priority: MODEL,
	  twoWay: true,
	  handlers: handlers,
	  params: ['lazy', 'number', 'debounce'],
	
	  /**
	   * Possible elements:
	   *   <select>
	   *   <textarea>
	   *   <input type="*">
	   *     - text
	   *     - checkbox
	   *     - radio
	   *     - number
	   */
	
	  bind: function bind() {
	    // friendly warning...
	    this.checkFilters();
	    if (this.hasRead && !this.hasWrite) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
	    }
	    var el = this.el;
	    var tag = el.tagName;
	    var handler;
	    if (tag === 'INPUT') {
	      handler = handlers[el.type] || handlers.text;
	    } else if (tag === 'SELECT') {
	      handler = handlers.select;
	    } else if (tag === 'TEXTAREA') {
	      handler = handlers.text;
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
	      return;
	    }
	    el.__v_model = this;
	    handler.bind.call(this);
	    this.update = handler.update;
	    this._unbind = handler.unbind;
	  },
	
	  /**
	   * Check read/write filter stats.
	   */
	
	  checkFilters: function checkFilters() {
	    var filters = this.filters;
	    if (!filters) return;
	    var i = filters.length;
	    while (i--) {
	      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
	      if (typeof filter === 'function' || filter.read) {
	        this.hasRead = true;
	      }
	      if (filter.write) {
	        this.hasWrite = true;
	      }
	    }
	  },
	
	  unbind: function unbind() {
	    this.el.__v_model = null;
	    this._unbind && this._unbind();
	  }
	};
	
	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  'delete': [8, 46],
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40
	};
	
	function keyFilter(handler, keys) {
	  var codes = keys.map(function (key) {
	    var charCode = key.charCodeAt(0);
	    if (charCode > 47 && charCode < 58) {
	      return parseInt(key, 10);
	    }
	    if (key.length === 1) {
	      charCode = key.toUpperCase().charCodeAt(0);
	      if (charCode > 64 && charCode < 91) {
	        return charCode;
	      }
	    }
	    return keyCodes[key];
	  });
	  codes = [].concat.apply([], codes);
	  return function keyHandler(e) {
	    if (codes.indexOf(e.keyCode) > -1) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	function stopFilter(handler) {
	  return function stopHandler(e) {
	    e.stopPropagation();
	    return handler.call(this, e);
	  };
	}
	
	function preventFilter(handler) {
	  return function preventHandler(e) {
	    e.preventDefault();
	    return handler.call(this, e);
	  };
	}
	
	function selfFilter(handler) {
	  return function selfHandler(e) {
	    if (e.target === e.currentTarget) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	var on$1 = {
	
	  priority: ON,
	  acceptStatement: true,
	  keyCodes: keyCodes,
	
	  bind: function bind() {
	    // deal with iframes
	    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
	      var self = this;
	      this.iframeBind = function () {
	        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
	      };
	      this.on('load', this.iframeBind);
	    }
	  },
	
	  update: function update(handler) {
	    // stub a noop for v-on with no value,
	    // e.g. @mousedown.prevent
	    if (!this.descriptor.raw) {
	      handler = function () {};
	    }
	
	    if (typeof handler !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
	      return;
	    }
	
	    // apply modifiers
	    if (this.modifiers.stop) {
	      handler = stopFilter(handler);
	    }
	    if (this.modifiers.prevent) {
	      handler = preventFilter(handler);
	    }
	    if (this.modifiers.self) {
	      handler = selfFilter(handler);
	    }
	    // key filter
	    var keys = Object.keys(this.modifiers).filter(function (key) {
	      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
	    });
	    if (keys.length) {
	      handler = keyFilter(handler, keys);
	    }
	
	    this.reset();
	    this.handler = handler;
	
	    if (this.iframeBind) {
	      this.iframeBind();
	    } else {
	      on(this.el, this.arg, this.handler, this.modifiers.capture);
	    }
	  },
	
	  reset: function reset() {
	    var el = this.iframeBind ? this.el.contentWindow : this.el;
	    if (this.handler) {
	      off(el, this.arg, this.handler);
	    }
	  },
	
	  unbind: function unbind() {
	    this.reset();
	  }
	};
	
	var prefixes = ['-webkit-', '-moz-', '-ms-'];
	var camelPrefixes = ['Webkit', 'Moz', 'ms'];
	var importantRE = /!important;?$/;
	var propCache = Object.create(null);
	
	var testEl = null;
	
	var style = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (typeof value === 'string') {
	      this.el.style.cssText = value;
	    } else if (isArray(value)) {
	      this.handleObject(value.reduce(extend, {}));
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  handleObject: function handleObject(value) {
	    // cache object styles so that only changed props
	    // are actually updated.
	    var cache = this.cache || (this.cache = {});
	    var name, val;
	    for (name in cache) {
	      if (!(name in value)) {
	        this.handleSingle(name, null);
	        delete cache[name];
	      }
	    }
	    for (name in value) {
	      val = value[name];
	      if (val !== cache[name]) {
	        cache[name] = val;
	        this.handleSingle(name, val);
	      }
	    }
	  },
	
	  handleSingle: function handleSingle(prop, value) {
	    prop = normalize(prop);
	    if (!prop) return; // unsupported prop
	    // cast possible numbers/booleans into strings
	    if (value != null) value += '';
	    if (value) {
	      var isImportant = importantRE.test(value) ? 'important' : '';
	      if (isImportant) {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
	        }
	        value = value.replace(importantRE, '').trim();
	        this.el.style.setProperty(prop.kebab, value, isImportant);
	      } else {
	        this.el.style[prop.camel] = value;
	      }
	    } else {
	      this.el.style[prop.camel] = '';
	    }
	  }
	
	};
	
	/**
	 * Normalize a CSS property name.
	 * - cache result
	 * - auto prefix
	 * - camelCase -> dash-case
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function normalize(prop) {
	  if (propCache[prop]) {
	    return propCache[prop];
	  }
	  var res = prefix(prop);
	  propCache[prop] = propCache[res] = res;
	  return res;
	}
	
	/**
	 * Auto detect the appropriate prefix for a CSS property.
	 * https://gist.github.com/paulirish/523692
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function prefix(prop) {
	  prop = hyphenate(prop);
	  var camel = camelize(prop);
	  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
	  if (!testEl) {
	    testEl = document.createElement('div');
	  }
	  var i = prefixes.length;
	  var prefixed;
	  if (camel !== 'filter' && camel in testEl.style) {
	    return {
	      kebab: prop,
	      camel: camel
	    };
	  }
	  while (i--) {
	    prefixed = camelPrefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return {
	        kebab: prefixes[i] + prop,
	        camel: prefixed
	      };
	    }
	  }
	}
	
	// xlink
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	var xlinkRE = /^xlink:/;
	
	// check for attributes that prohibit interpolations
	var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
	// these attributes should also set their corresponding properties
	// because they only affect the initial state of the element
	var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
	// these attributes expect enumrated values of "true" or "false"
	// but are not boolean attributes
	var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;
	
	// these attributes should set a hidden property for
	// binding v-model to object values
	var modelProps = {
	  value: '_value',
	  'true-value': '_trueValue',
	  'false-value': '_falseValue'
	};
	
	var bind$1 = {
	
	  priority: BIND,
	
	  bind: function bind() {
	    var attr = this.arg;
	    var tag = this.el.tagName;
	    // should be deep watch on object mode
	    if (!attr) {
	      this.deep = true;
	    }
	    // handle interpolation bindings
	    var descriptor = this.descriptor;
	    var tokens = descriptor.interp;
	    if (tokens) {
	      // handle interpolations with one-time tokens
	      if (descriptor.hasOneTime) {
	        this.expression = tokensToExp(tokens, this._scope || this.vm);
	      }
	
	      // only allow binding on native attributes
	      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
	        process.env.NODE_ENV !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
	        this.el.removeAttribute(attr);
	        this.invalid = true;
	      }
	
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production') {
	        var raw = attr + '="' + descriptor.raw + '": ';
	        // warn src
	        if (attr === 'src') {
	          warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
	        }
	
	        // warn style
	        if (attr === 'style') {
	          warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
	        }
	      }
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) {
	      return;
	    }
	    var attr = this.arg;
	    if (this.arg) {
	      this.handleSingle(attr, value);
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  // share object handler with v-bind:class
	  handleObject: style.handleObject,
	
	  handleSingle: function handleSingle(attr, value) {
	    var el = this.el;
	    var interp = this.descriptor.interp;
	    if (this.modifiers.camel) {
	      attr = camelize(attr);
	    }
	    if (!interp && attrWithPropsRE.test(attr) && attr in el) {
	      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
	      ? '' : value : value;
	
	      if (el[attr] !== attrValue) {
	        el[attr] = attrValue;
	      }
	    }
	    // set model props
	    var modelProp = modelProps[attr];
	    if (!interp && modelProp) {
	      el[modelProp] = value;
	      // update v-model if present
	      var model = el.__v_model;
	      if (model) {
	        model.listener();
	      }
	    }
	    // do not set value attribute for textarea
	    if (attr === 'value' && el.tagName === 'TEXTAREA') {
	      el.removeAttribute(attr);
	      return;
	    }
	    // update attribute
	    if (enumeratedAttrRE.test(attr)) {
	      el.setAttribute(attr, value ? 'true' : 'false');
	    } else if (value != null && value !== false) {
	      if (attr === 'class') {
	        // handle edge case #1960:
	        // class interpolation should not overwrite Vue transition class
	        if (el.__v_trans) {
	          value += ' ' + el.__v_trans.id + '-transition';
	        }
	        setClass(el, value);
	      } else if (xlinkRE.test(attr)) {
	        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
	      } else {
	        el.setAttribute(attr, value === true ? '' : value);
	      }
	    } else {
	      el.removeAttribute(attr);
	    }
	  }
	};
	
	var el = {
	
	  priority: EL,
	
	  bind: function bind() {
	    /* istanbul ignore if */
	    if (!this.arg) {
	      return;
	    }
	    var id = this.id = camelize(this.arg);
	    var refs = (this._scope || this.vm).$els;
	    if (hasOwn(refs, id)) {
	      refs[id] = this.el;
	    } else {
	      defineReactive(refs, id, this.el);
	    }
	  },
	
	  unbind: function unbind() {
	    var refs = (this._scope || this.vm).$els;
	    if (refs[this.id] === this.el) {
	      refs[this.id] = null;
	    }
	  }
	};
	
	var ref = {
	  bind: function bind() {
	    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
	  }
	};
	
	var cloak = {
	  bind: function bind() {
	    var el = this.el;
	    this.vm.$once('pre-hook:compiled', function () {
	      el.removeAttribute('v-cloak');
	    });
	  }
	};
	
	// must export plain object
	var directives = {
	  text: text$1,
	  html: html,
	  'for': vFor,
	  'if': vIf,
	  show: show,
	  model: model,
	  on: on$1,
	  bind: bind$1,
	  el: el,
	  ref: ref,
	  cloak: cloak
	};
	
	var vClass = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (!value) {
	      this.cleanup();
	    } else if (typeof value === 'string') {
	      this.setClass(value.trim().split(/\s+/));
	    } else {
	      this.setClass(normalize$1(value));
	    }
	  },
	
	  setClass: function setClass(value) {
	    this.cleanup(value);
	    for (var i = 0, l = value.length; i < l; i++) {
	      var val = value[i];
	      if (val) {
	        apply(this.el, val, addClass);
	      }
	    }
	    this.prevKeys = value;
	  },
	
	  cleanup: function cleanup(value) {
	    var prevKeys = this.prevKeys;
	    if (!prevKeys) return;
	    var i = prevKeys.length;
	    while (i--) {
	      var key = prevKeys[i];
	      if (!value || value.indexOf(key) < 0) {
	        apply(this.el, key, removeClass);
	      }
	    }
	  }
	};
	
	/**
	 * Normalize objects and arrays (potentially containing objects)
	 * into array of strings.
	 *
	 * @param {Object|Array<String|Object>} value
	 * @return {Array<String>}
	 */
	
	function normalize$1(value) {
	  var res = [];
	  if (isArray(value)) {
	    for (var i = 0, l = value.length; i < l; i++) {
	      var _key = value[i];
	      if (_key) {
	        if (typeof _key === 'string') {
	          res.push(_key);
	        } else {
	          for (var k in _key) {
	            if (_key[k]) res.push(k);
	          }
	        }
	      }
	    }
	  } else if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) res.push(key);
	    }
	  }
	  return res;
	}
	
	/**
	 * Add or remove a class/classes on an element
	 *
	 * @param {Element} el
	 * @param {String} key The class name. This may or may not
	 *                     contain a space character, in such a
	 *                     case we'll deal with multiple class
	 *                     names at once.
	 * @param {Function} fn
	 */
	
	function apply(el, key, fn) {
	  key = key.trim();
	  if (key.indexOf(' ') === -1) {
	    fn(el, key);
	    return;
	  }
	  // The key contains one or more space characters.
	  // Since a class name doesn't accept such characters, we
	  // treat it as multiple classes.
	  var keys = key.split(/\s+/);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    fn(el, keys[i]);
	  }
	}
	
	var component = {
	
	  priority: COMPONENT,
	
	  params: ['keep-alive', 'transition-mode', 'inline-template'],
	
	  /**
	   * Setup. Two possible usages:
	   *
	   * - static:
	   *   <comp> or <div v-component="comp">
	   *
	   * - dynamic:
	   *   <component :is="view">
	   */
	
	  bind: function bind() {
	    if (!this.el.__vue__) {
	      // keep-alive cache
	      this.keepAlive = this.params.keepAlive;
	      if (this.keepAlive) {
	        this.cache = {};
	      }
	      // check inline-template
	      if (this.params.inlineTemplate) {
	        // extract inline template as a DocumentFragment
	        this.inlineTemplate = extractContent(this.el, true);
	      }
	      // component resolution related state
	      this.pendingComponentCb = this.Component = null;
	      // transition related state
	      this.pendingRemovals = 0;
	      this.pendingRemovalCb = null;
	      // create a ref anchor
	      this.anchor = createAnchor('v-component');
	      replace(this.el, this.anchor);
	      // remove is attribute.
	      // this is removed during compilation, but because compilation is
	      // cached, when the component is used elsewhere this attribute
	      // will remain at link time.
	      this.el.removeAttribute('is');
	      this.el.removeAttribute(':is');
	      // remove ref, same as above
	      if (this.descriptor.ref) {
	        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
	      }
	      // if static, build right now.
	      if (this.literal) {
	        this.setComponent(this.expression);
	      }
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
	    }
	  },
	
	  /**
	   * Public update, called by the watcher in the dynamic
	   * literal scenario, e.g. <component :is="view">
	   */
	
	  update: function update(value) {
	    if (!this.literal) {
	      this.setComponent(value);
	    }
	  },
	
	  /**
	   * Switch dynamic components. May resolve the component
	   * asynchronously, and perform transition based on
	   * specified transition mode. Accepts a few additional
	   * arguments specifically for vue-router.
	   *
	   * The callback is called when the full transition is
	   * finished.
	   *
	   * @param {String} value
	   * @param {Function} [cb]
	   */
	
	  setComponent: function setComponent(value, cb) {
	    this.invalidatePending();
	    if (!value) {
	      // just remove current
	      this.unbuild(true);
	      this.remove(this.childVM, cb);
	      this.childVM = null;
	    } else {
	      var self = this;
	      this.resolveComponent(value, function () {
	        self.mountComponent(cb);
	      });
	    }
	  },
	
	  /**
	   * Resolve the component constructor to use when creating
	   * the child vm.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  resolveComponent: function resolveComponent(value, cb) {
	    var self = this;
	    this.pendingComponentCb = cancellable(function (Component) {
	      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
	      self.Component = Component;
	      cb();
	    });
	    this.vm._resolveComponent(value, this.pendingComponentCb);
	  },
	
	  /**
	   * Create a new instance using the current constructor and
	   * replace the existing instance. This method doesn't care
	   * whether the new component and the old one are actually
	   * the same.
	   *
	   * @param {Function} [cb]
	   */
	
	  mountComponent: function mountComponent(cb) {
	    // actual mount
	    this.unbuild(true);
	    var self = this;
	    var activateHooks = this.Component.options.activate;
	    var cached = this.getCached();
	    var newComponent = this.build();
	    if (activateHooks && !cached) {
	      this.waitingFor = newComponent;
	      callActivateHooks(activateHooks, newComponent, function () {
	        if (self.waitingFor !== newComponent) {
	          return;
	        }
	        self.waitingFor = null;
	        self.transition(newComponent, cb);
	      });
	    } else {
	      // update ref for kept-alive component
	      if (cached) {
	        newComponent._updateRef();
	      }
	      this.transition(newComponent, cb);
	    }
	  },
	
	  /**
	   * When the component changes or unbinds before an async
	   * constructor is resolved, we need to invalidate its
	   * pending callback.
	   */
	
	  invalidatePending: function invalidatePending() {
	    if (this.pendingComponentCb) {
	      this.pendingComponentCb.cancel();
	      this.pendingComponentCb = null;
	    }
	  },
	
	  /**
	   * Instantiate/insert a new child vm.
	   * If keep alive and has cached instance, insert that
	   * instance; otherwise build a new one and cache it.
	   *
	   * @param {Object} [extraOptions]
	   * @return {Vue} - the created instance
	   */
	
	  build: function build(extraOptions) {
	    var cached = this.getCached();
	    if (cached) {
	      return cached;
	    }
	    if (this.Component) {
	      // default options
	      var options = {
	        name: this.ComponentName,
	        el: cloneNode(this.el),
	        template: this.inlineTemplate,
	        // make sure to add the child with correct parent
	        // if this is a transcluded component, its parent
	        // should be the transclusion host.
	        parent: this._host || this.vm,
	        // if no inline-template, then the compiled
	        // linker can be cached for better performance.
	        _linkerCachable: !this.inlineTemplate,
	        _ref: this.descriptor.ref,
	        _asComponent: true,
	        _isRouterView: this._isRouterView,
	        // if this is a transcluded component, context
	        // will be the common parent vm of this instance
	        // and its host.
	        _context: this.vm,
	        // if this is inside an inline v-for, the scope
	        // will be the intermediate scope created for this
	        // repeat fragment. this is used for linking props
	        // and container directives.
	        _scope: this._scope,
	        // pass in the owner fragment of this component.
	        // this is necessary so that the fragment can keep
	        // track of its contained components in order to
	        // call attach/detach hooks for them.
	        _frag: this._frag
	      };
	      // extra options
	      // in 1.0.0 this is used by vue-router only
	      /* istanbul ignore if */
	      if (extraOptions) {
	        extend(options, extraOptions);
	      }
	      var child = new this.Component(options);
	      if (this.keepAlive) {
	        this.cache[this.Component.cid] = child;
	      }
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
	        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
	      }
	      return child;
	    }
	  },
	
	  /**
	   * Try to get a cached instance of the current component.
	   *
	   * @return {Vue|undefined}
	   */
	
	  getCached: function getCached() {
	    return this.keepAlive && this.cache[this.Component.cid];
	  },
	
	  /**
	   * Teardown the current child, but defers cleanup so
	   * that we can separate the destroy and removal steps.
	   *
	   * @param {Boolean} defer
	   */
	
	  unbuild: function unbuild(defer) {
	    if (this.waitingFor) {
	      if (!this.keepAlive) {
	        this.waitingFor.$destroy();
	      }
	      this.waitingFor = null;
	    }
	    var child = this.childVM;
	    if (!child || this.keepAlive) {
	      if (child) {
	        // remove ref
	        child._inactive = true;
	        child._updateRef(true);
	      }
	      return;
	    }
	    // the sole purpose of `deferCleanup` is so that we can
	    // "deactivate" the vm right now and perform DOM removal
	    // later.
	    child.$destroy(false, defer);
	  },
	
	  /**
	   * Remove current destroyed child and manually do
	   * the cleanup after removal.
	   *
	   * @param {Function} cb
	   */
	
	  remove: function remove(child, cb) {
	    var keepAlive = this.keepAlive;
	    if (child) {
	      // we may have a component switch when a previous
	      // component is still being transitioned out.
	      // we want to trigger only one lastest insertion cb
	      // when the existing transition finishes. (#1119)
	      this.pendingRemovals++;
	      this.pendingRemovalCb = cb;
	      var self = this;
	      child.$remove(function () {
	        self.pendingRemovals--;
	        if (!keepAlive) child._cleanup();
	        if (!self.pendingRemovals && self.pendingRemovalCb) {
	          self.pendingRemovalCb();
	          self.pendingRemovalCb = null;
	        }
	      });
	    } else if (cb) {
	      cb();
	    }
	  },
	
	  /**
	   * Actually swap the components, depending on the
	   * transition mode. Defaults to simultaneous.
	   *
	   * @param {Vue} target
	   * @param {Function} [cb]
	   */
	
	  transition: function transition(target, cb) {
	    var self = this;
	    var current = this.childVM;
	    // for devtool inspection
	    if (current) current._inactive = true;
	    target._inactive = false;
	    this.childVM = target;
	    switch (self.params.transitionMode) {
	      case 'in-out':
	        target.$before(self.anchor, function () {
	          self.remove(current, cb);
	        });
	        break;
	      case 'out-in':
	        self.remove(current, function () {
	          target.$before(self.anchor, cb);
	        });
	        break;
	      default:
	        self.remove(current);
	        target.$before(self.anchor, cb);
	    }
	  },
	
	  /**
	   * Unbind.
	   */
	
	  unbind: function unbind() {
	    this.invalidatePending();
	    // Do not defer cleanup when unbinding
	    this.unbuild();
	    // destroy all keep-alive cached instances
	    if (this.cache) {
	      for (var key in this.cache) {
	        this.cache[key].$destroy();
	      }
	      this.cache = null;
	    }
	  }
	};
	
	/**
	 * Call activate hooks in order (asynchronous)
	 *
	 * @param {Array} hooks
	 * @param {Vue} vm
	 * @param {Function} cb
	 */
	
	function callActivateHooks(hooks, vm, cb) {
	  var total = hooks.length;
	  var called = 0;
	  hooks[0].call(vm, next);
	  function next() {
	    if (++called >= total) {
	      cb();
	    } else {
	      hooks[called].call(vm, next);
	    }
	  }
	}
	
	var propBindingModes = config._propBindingModes;
	var empty = {};
	
	// regexes
	var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
	var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;
	
	/**
	 * Compile props on a root element and return
	 * a props link function.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Array} propOptions
	 * @param {Vue} vm
	 * @return {Function} propsLinkFn
	 */
	
	function compileProps(el, propOptions, vm) {
	  var props = [];
	  var names = Object.keys(propOptions);
	  var i = names.length;
	  var options, name, attr, value, path, parsed, prop;
	  while (i--) {
	    name = names[i];
	    options = propOptions[name] || empty;
	
	    if (process.env.NODE_ENV !== 'production' && name === '$data') {
	      warn('Do not use $data as prop.', vm);
	      continue;
	    }
	
	    // props could contain dashes, which will be
	    // interpreted as minus calculations by the parser
	    // so we need to camelize the path here
	    path = camelize(name);
	    if (!identRE$1.test(path)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
	      continue;
	    }
	
	    prop = {
	      name: name,
	      path: path,
	      options: options,
	      mode: propBindingModes.ONE_WAY,
	      raw: null
	    };
	
	    attr = hyphenate(name);
	    // first check dynamic version
	    if ((value = getBindAttr(el, attr)) === null) {
	      if ((value = getBindAttr(el, attr + '.sync')) !== null) {
	        prop.mode = propBindingModes.TWO_WAY;
	      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
	        prop.mode = propBindingModes.ONE_TIME;
	      }
	    }
	    if (value !== null) {
	      // has dynamic binding!
	      prop.raw = value;
	      parsed = parseDirective(value);
	      value = parsed.expression;
	      prop.filters = parsed.filters;
	      // check binding type
	      if (isLiteral(value) && !parsed.filters) {
	        // for expressions containing literal numbers and
	        // booleans, there's no need to setup a prop binding,
	        // so we can optimize them as a one-time set.
	        prop.optimizedLiteral = true;
	      } else {
	        prop.dynamic = true;
	        // check non-settable path for two-way bindings
	        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
	          prop.mode = propBindingModes.ONE_WAY;
	          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
	        }
	      }
	      prop.parentPath = value;
	
	      // warn required two-way
	      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
	        warn('Prop "' + name + '" expects a two-way binding type.', vm);
	      }
	    } else if ((value = getAttr(el, attr)) !== null) {
	      // has literal binding!
	      prop.raw = value;
	    } else if (process.env.NODE_ENV !== 'production') {
	      // check possible camelCase prop usage
	      var lowerCaseName = path.toLowerCase();
	      value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
	      if (value) {
	        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
	      } else if (options.required) {
	        // warn missing required
	        warn('Missing required prop: ' + name, vm);
	      }
	    }
	    // push prop
	    props.push(prop);
	  }
	  return makePropsLinkFn(props);
	}
	
	/**
	 * Build a function that applies props to a vm.
	 *
	 * @param {Array} props
	 * @return {Function} propsLinkFn
	 */
	
	function makePropsLinkFn(props) {
	  return function propsLinkFn(vm, scope) {
	    // store resolved props info
	    vm._props = {};
	    var inlineProps = vm.$options.propsData;
	    var i = props.length;
	    var prop, path, options, value, raw;
	    while (i--) {
	      prop = props[i];
	      raw = prop.raw;
	      path = prop.path;
	      options = prop.options;
	      vm._props[path] = prop;
	      if (inlineProps && hasOwn(inlineProps, path)) {
	        initProp(vm, prop, inlineProps[path]);
	      }if (raw === null) {
	        // initialize absent prop
	        initProp(vm, prop, undefined);
	      } else if (prop.dynamic) {
	        // dynamic prop
	        if (prop.mode === propBindingModes.ONE_TIME) {
	          // one time binding
	          value = (scope || vm._context || vm).$get(prop.parentPath);
	          initProp(vm, prop, value);
	        } else {
	          if (vm._context) {
	            // dynamic binding
	            vm._bindDir({
	              name: 'prop',
	              def: propDef,
	              prop: prop
	            }, null, null, scope); // el, host, scope
	          } else {
	              // root instance
	              initProp(vm, prop, vm.$get(prop.parentPath));
	            }
	        }
	      } else if (prop.optimizedLiteral) {
	        // optimized literal, cast it and just set once
	        var stripped = stripQuotes(raw);
	        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
	        initProp(vm, prop, value);
	      } else {
	        // string literal, but we need to cater for
	        // Boolean props with no value, or with same
	        // literal value (e.g. disabled="disabled")
	        // see https://github.com/vuejs/vue-loader/issues/182
	        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
	        initProp(vm, prop, value);
	      }
	    }
	  };
	}
	
	/**
	 * Process a prop with a rawValue, applying necessary coersions,
	 * default values & assertions and call the given callback with
	 * processed value.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} rawValue
	 * @param {Function} fn
	 */
	
	function processPropValue(vm, prop, rawValue, fn) {
	  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
	  var value = rawValue;
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop);
	  }
	  value = coerceProp(prop, value, vm);
	  var coerced = value !== rawValue;
	  if (!assertProp(prop, value, vm)) {
	    value = undefined;
	  }
	  if (isSimple && !coerced) {
	    withoutConversion(function () {
	      fn(value);
	    });
	  } else {
	    fn(value);
	  }
	}
	
	/**
	 * Set a prop's initial value on a vm and its data object.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function initProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    defineReactive(vm, prop.path, value);
	  });
	}
	
	/**
	 * Update a prop's value on a vm.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function updateProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    vm[prop.path] = value;
	  });
	}
	
	/**
	 * Get the default value of a prop.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @return {*}
	 */
	
	function getPropDefaultValue(vm, prop) {
	  // no default, return undefined
	  var options = prop.options;
	  if (!hasOwn(options, 'default')) {
	    // absent boolean value defaults to false
	    return options.type === Boolean ? false : undefined;
	  }
	  var def = options['default'];
	  // warn against non-factory defaults for Object & Array
	  if (isObject(def)) {
	    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
	  }
	  // call factory function for non-Function types
	  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
	}
	
	/**
	 * Assert whether a prop is valid.
	 *
	 * @param {Object} prop
	 * @param {*} value
	 * @param {Vue} vm
	 */
	
	function assertProp(prop, value, vm) {
	  if (!prop.options.required && ( // non-required
	  prop.raw === null || // abscent
	  value == null) // null or undefined
	  ) {
	      return true;
	    }
	  var options = prop.options;
	  var type = options.type;
	  var valid = !type;
	  var expectedTypes = [];
	  if (type) {
	    if (!isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType);
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    if (process.env.NODE_ENV !== 'production') {
	      warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
	    }
	    return false;
	  }
	  var validator = options.validator;
	  if (validator) {
	    if (!validator(value)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
	      return false;
	    }
	  }
	  return true;
	}
	
	/**
	 * Force parsing value with coerce option.
	 *
	 * @param {*} value
	 * @param {Object} options
	 * @return {*}
	 */
	
	function coerceProp(prop, value, vm) {
	  var coerce = prop.options.coerce;
	  if (!coerce) {
	    return value;
	  }
	  if (typeof coerce === 'function') {
	    return coerce(value);
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
	    return value;
	  }
	}
	
	/**
	 * Assert the type of a value
	 *
	 * @param {*} value
	 * @param {Function} type
	 * @return {Object}
	 */
	
	function assertType(value, type) {
	  var valid;
	  var expectedType;
	  if (type === String) {
	    expectedType = 'string';
	    valid = typeof value === expectedType;
	  } else if (type === Number) {
	    expectedType = 'number';
	    valid = typeof value === expectedType;
	  } else if (type === Boolean) {
	    expectedType = 'boolean';
	    valid = typeof value === expectedType;
	  } else if (type === Function) {
	    expectedType = 'function';
	    valid = typeof value === expectedType;
	  } else if (type === Object) {
	    expectedType = 'object';
	    valid = isPlainObject(value);
	  } else if (type === Array) {
	    expectedType = 'array';
	    valid = isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  };
	}
	
	/**
	 * Format type for output
	 *
	 * @param {String} type
	 * @return {String}
	 */
	
	function formatType(type) {
	  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
	}
	
	/**
	 * Format value
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function formatValue(val) {
	  return Object.prototype.toString.call(val).slice(8, -1);
	}
	
	var bindingModes = config._propBindingModes;
	
	var propDef = {
	
	  bind: function bind() {
	    var child = this.vm;
	    var parent = child._context;
	    // passed in from compiler directly
	    var prop = this.descriptor.prop;
	    var childKey = prop.path;
	    var parentKey = prop.parentPath;
	    var twoWay = prop.mode === bindingModes.TWO_WAY;
	
	    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
	      updateProp(child, prop, val);
	    }, {
	      twoWay: twoWay,
	      filters: prop.filters,
	      // important: props need to be observed on the
	      // v-for scope if present
	      scope: this._scope
	    });
	
	    // set the child initial value.
	    initProp(child, prop, parentWatcher.value);
	
	    // setup two-way binding
	    if (twoWay) {
	      // important: defer the child watcher creation until
	      // the created hook (after data observation)
	      var self = this;
	      child.$once('pre-hook:created', function () {
	        self.childWatcher = new Watcher(child, childKey, function (val) {
	          parentWatcher.set(val);
	        }, {
	          // ensure sync upward before parent sync down.
	          // this is necessary in cases e.g. the child
	          // mutates a prop array, then replaces it. (#1683)
	          sync: true
	        });
	      });
	    }
	  },
	
	  unbind: function unbind() {
	    this.parentWatcher.teardown();
	    if (this.childWatcher) {
	      this.childWatcher.teardown();
	    }
	  }
	};
	
	var queue$1 = [];
	var queued = false;
	
	/**
	 * Push a job into the queue.
	 *
	 * @param {Function} job
	 */
	
	function pushJob(job) {
	  queue$1.push(job);
	  if (!queued) {
	    queued = true;
	    nextTick(flush);
	  }
	}
	
	/**
	 * Flush the queue, and do one forced reflow before
	 * triggering transitions.
	 */
	
	function flush() {
	  // Force layout
	  var f = document.documentElement.offsetHeight;
	  for (var i = 0; i < queue$1.length; i++) {
	    queue$1[i]();
	  }
	  queue$1 = [];
	  queued = false;
	  // dummy return, so js linters don't complain about
	  // unused variable f
	  return f;
	}
	
	var TYPE_TRANSITION = 'transition';
	var TYPE_ANIMATION = 'animation';
	var transDurationProp = transitionProp + 'Duration';
	var animDurationProp = animationProp + 'Duration';
	
	/**
	 * If a just-entered element is applied the
	 * leave class while its enter transition hasn't started yet,
	 * and the transitioned property has the same value for both
	 * enter/leave, then the leave transition will be skipped and
	 * the transitionend event never fires. This function ensures
	 * its callback to be called after a transition has started
	 * by waiting for double raf.
	 *
	 * It falls back to setTimeout on devices that support CSS
	 * transitions but not raf (e.g. Android 4.2 browser) - since
	 * these environments are usually slow, we are giving it a
	 * relatively large timeout.
	 */
	
	var raf = inBrowser && window.requestAnimationFrame;
	var waitForTransitionStart = raf
	/* istanbul ignore next */
	? function (fn) {
	  raf(function () {
	    raf(fn);
	  });
	} : function (fn) {
	  setTimeout(fn, 50);
	};
	
	/**
	 * A Transition object that encapsulates the state and logic
	 * of the transition.
	 *
	 * @param {Element} el
	 * @param {String} id
	 * @param {Object} hooks
	 * @param {Vue} vm
	 */
	function Transition(el, id, hooks, vm) {
	  this.id = id;
	  this.el = el;
	  this.enterClass = hooks && hooks.enterClass || id + '-enter';
	  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
	  this.hooks = hooks;
	  this.vm = vm;
	  // async state
	  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
	  this.justEntered = false;
	  this.entered = this.left = false;
	  this.typeCache = {};
	  // check css transition type
	  this.type = hooks && hooks.type;
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV !== 'production') {
	    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
	      warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
	    }
	  }
	  // bind
	  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
	    self[m] = bind(self[m], self);
	  });
	}
	
	var p$1 = Transition.prototype;
	
	/**
	 * Start an entering transition.
	 *
	 * 1. enter transition triggered
	 * 2. call beforeEnter hook
	 * 3. add enter class
	 * 4. insert/show element
	 * 5. call enter hook (with possible explicit js callback)
	 * 6. reflow
	 * 7. based on transition type:
	 *    - transition:
	 *        remove class now, wait for transitionend,
	 *        then done if there's no explicit js callback.
	 *    - animation:
	 *        wait for animationend, remove class,
	 *        then done if there's no explicit js callback.
	 *    - no css transition:
	 *        done now if there's no explicit js callback.
	 * 8. wait for either done or js callback, then call
	 *    afterEnter hook.
	 *
	 * @param {Function} op - insert/show the element
	 * @param {Function} [cb]
	 */
	
	p$1.enter = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeEnter');
	  this.cb = cb;
	  addClass(this.el, this.enterClass);
	  op();
	  this.entered = false;
	  this.callHookWithCb('enter');
	  if (this.entered) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.enterCancelled;
	  pushJob(this.enterNextTick);
	};
	
	/**
	 * The "nextTick" phase of an entering transition, which is
	 * to be pushed into a queue and executed after a reflow so
	 * that removing the class can trigger a CSS transition.
	 */
	
	p$1.enterNextTick = function () {
	  var _this = this;
	
	  // prevent transition skipping
	  this.justEntered = true;
	  waitForTransitionStart(function () {
	    _this.justEntered = false;
	  });
	  var enterDone = this.enterDone;
	  var type = this.getCssTransitionType(this.enterClass);
	  if (!this.pendingJsCb) {
	    if (type === TYPE_TRANSITION) {
	      // trigger transition by removing enter class now
	      removeClass(this.el, this.enterClass);
	      this.setupCssCb(transitionEndEvent, enterDone);
	    } else if (type === TYPE_ANIMATION) {
	      this.setupCssCb(animationEndEvent, enterDone);
	    } else {
	      enterDone();
	    }
	  } else if (type === TYPE_TRANSITION) {
	    removeClass(this.el, this.enterClass);
	  }
	};
	
	/**
	 * The "cleanup" phase of an entering transition.
	 */
	
	p$1.enterDone = function () {
	  this.entered = true;
	  this.cancel = this.pendingJsCb = null;
	  removeClass(this.el, this.enterClass);
	  this.callHook('afterEnter');
	  if (this.cb) this.cb();
	};
	
	/**
	 * Start a leaving transition.
	 *
	 * 1. leave transition triggered.
	 * 2. call beforeLeave hook
	 * 3. add leave class (trigger css transition)
	 * 4. call leave hook (with possible explicit js callback)
	 * 5. reflow if no explicit js callback is provided
	 * 6. based on transition type:
	 *    - transition or animation:
	 *        wait for end event, remove class, then done if
	 *        there's no explicit js callback.
	 *    - no css transition:
	 *        done if there's no explicit js callback.
	 * 7. wait for either done or js callback, then call
	 *    afterLeave hook.
	 *
	 * @param {Function} op - remove/hide the element
	 * @param {Function} [cb]
	 */
	
	p$1.leave = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeLeave');
	  this.op = op;
	  this.cb = cb;
	  addClass(this.el, this.leaveClass);
	  this.left = false;
	  this.callHookWithCb('leave');
	  if (this.left) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.leaveCancelled;
	  // only need to handle leaveDone if
	  // 1. the transition is already done (synchronously called
	  //    by the user, which causes this.op set to null)
	  // 2. there's no explicit js callback
	  if (this.op && !this.pendingJsCb) {
	    // if a CSS transition leaves immediately after enter,
	    // the transitionend event never fires. therefore we
	    // detect such cases and end the leave immediately.
	    if (this.justEntered) {
	      this.leaveDone();
	    } else {
	      pushJob(this.leaveNextTick);
	    }
	  }
	};
	
	/**
	 * The "nextTick" phase of a leaving transition.
	 */
	
	p$1.leaveNextTick = function () {
	  var type = this.getCssTransitionType(this.leaveClass);
	  if (type) {
	    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
	    this.setupCssCb(event, this.leaveDone);
	  } else {
	    this.leaveDone();
	  }
	};
	
	/**
	 * The "cleanup" phase of a leaving transition.
	 */
	
	p$1.leaveDone = function () {
	  this.left = true;
	  this.cancel = this.pendingJsCb = null;
	  this.op();
	  removeClass(this.el, this.leaveClass);
	  this.callHook('afterLeave');
	  if (this.cb) this.cb();
	  this.op = null;
	};
	
	/**
	 * Cancel any pending callbacks from a previously running
	 * but not finished transition.
	 */
	
	p$1.cancelPending = function () {
	  this.op = this.cb = null;
	  var hasPending = false;
	  if (this.pendingCssCb) {
	    hasPending = true;
	    off(this.el, this.pendingCssEvent, this.pendingCssCb);
	    this.pendingCssEvent = this.pendingCssCb = null;
	  }
	  if (this.pendingJsCb) {
	    hasPending = true;
	    this.pendingJsCb.cancel();
	    this.pendingJsCb = null;
	  }
	  if (hasPending) {
	    removeClass(this.el, this.enterClass);
	    removeClass(this.el, this.leaveClass);
	  }
	  if (this.cancel) {
	    this.cancel.call(this.vm, this.el);
	    this.cancel = null;
	  }
	};
	
	/**
	 * Call a user-provided synchronous hook function.
	 *
	 * @param {String} type
	 */
	
	p$1.callHook = function (type) {
	  if (this.hooks && this.hooks[type]) {
	    this.hooks[type].call(this.vm, this.el);
	  }
	};
	
	/**
	 * Call a user-provided, potentially-async hook function.
	 * We check for the length of arguments to see if the hook
	 * expects a `done` callback. If true, the transition's end
	 * will be determined by when the user calls that callback;
	 * otherwise, the end is determined by the CSS transition or
	 * animation.
	 *
	 * @param {String} type
	 */
	
	p$1.callHookWithCb = function (type) {
	  var hook = this.hooks && this.hooks[type];
	  if (hook) {
	    if (hook.length > 1) {
	      this.pendingJsCb = cancellable(this[type + 'Done']);
	    }
	    hook.call(this.vm, this.el, this.pendingJsCb);
	  }
	};
	
	/**
	 * Get an element's transition type based on the
	 * calculated styles.
	 *
	 * @param {String} className
	 * @return {Number}
	 */
	
	p$1.getCssTransitionType = function (className) {
	  /* istanbul ignore if */
	  if (!transitionEndEvent ||
	  // skip CSS transitions if page is not visible -
	  // this solves the issue of transitionend events not
	  // firing until the page is visible again.
	  // pageVisibility API is supported in IE10+, same as
	  // CSS transitions.
	  document.hidden ||
	  // explicit js-only transition
	  this.hooks && this.hooks.css === false ||
	  // element is hidden
	  isHidden(this.el)) {
	    return;
	  }
	  var type = this.type || this.typeCache[className];
	  if (type) return type;
	  var inlineStyles = this.el.style;
	  var computedStyles = window.getComputedStyle(this.el);
	  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
	  if (transDuration && transDuration !== '0s') {
	    type = TYPE_TRANSITION;
	  } else {
	    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
	    if (animDuration && animDuration !== '0s') {
	      type = TYPE_ANIMATION;
	    }
	  }
	  if (type) {
	    this.typeCache[className] = type;
	  }
	  return type;
	};
	
	/**
	 * Setup a CSS transitionend/animationend callback.
	 *
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	p$1.setupCssCb = function (event, cb) {
	  this.pendingCssEvent = event;
	  var self = this;
	  var el = this.el;
	  var onEnd = this.pendingCssCb = function (e) {
	    if (e.target === el) {
	      off(el, event, onEnd);
	      self.pendingCssEvent = self.pendingCssCb = null;
	      if (!self.pendingJsCb && cb) {
	        cb();
	      }
	    }
	  };
	  on(el, event, onEnd);
	};
	
	/**
	 * Check if an element is hidden - in that case we can just
	 * skip the transition alltogether.
	 *
	 * @param {Element} el
	 * @return {Boolean}
	 */
	
	function isHidden(el) {
	  if (/svg$/.test(el.namespaceURI)) {
	    // SVG elements do not have offset(Width|Height)
	    // so we need to check the client rect
	    var rect = el.getBoundingClientRect();
	    return !(rect.width || rect.height);
	  } else {
	    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
	  }
	}
	
	var transition$1 = {
	
	  priority: TRANSITION,
	
	  update: function update(id, oldId) {
	    var el = this.el;
	    // resolve on owner vm
	    var hooks = resolveAsset(this.vm.$options, 'transitions', id);
	    id = id || 'v';
	    oldId = oldId || 'v';
	    el.__v_trans = new Transition(el, id, hooks, this.vm);
	    removeClass(el, oldId + '-transition');
	    addClass(el, id + '-transition');
	  }
	};
	
	var internalDirectives = {
	  style: style,
	  'class': vClass,
	  component: component,
	  prop: propDef,
	  transition: transition$1
	};
	
	// special binding prefixes
	var bindRE = /^v-bind:|^:/;
	var onRE = /^v-on:|^@/;
	var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
	var modifierRE = /\.[^\.]+/g;
	var transitionRE = /^(v-bind:|:)?transition$/;
	
	// default directive priority
	var DEFAULT_PRIORITY = 1000;
	var DEFAULT_TERMINAL_PRIORITY = 2000;
	
	/**
	 * Compile a template and return a reusable composite link
	 * function, which recursively contains more link functions
	 * inside. This top level compile function would normally
	 * be called on instance root nodes, but can also be used
	 * for partial compilation if the partial argument is true.
	 *
	 * The returned composite link function, when called, will
	 * return an unlink function that tearsdown all directives
	 * created during the linking phase.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Object} options
	 * @param {Boolean} partial
	 * @return {Function}
	 */
	
	function compile(el, options, partial) {
	  // link function for the node itself.
	  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
	  // link function for the childNodes
	  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;
	
	  /**
	   * A composite linker function to be called on a already
	   * compiled piece of DOM, which instantiates all directive
	   * instances.
	   *
	   * @param {Vue} vm
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host] - host vm of transcluded content
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - link context fragment
	   * @return {Function|undefined}
	   */
	
	  return function compositeLinkFn(vm, el, host, scope, frag) {
	    // cache childNodes before linking parent, fix #657
	    var childNodes = toArray(el.childNodes);
	    // link
	    var dirs = linkAndCapture(function compositeLinkCapturer() {
	      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
	      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
	    }, vm);
	    return makeUnlinkFn(vm, dirs);
	  };
	}
	
	/**
	 * Apply a linker to a vm/element pair and capture the
	 * directives created during the process.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 */
	
	function linkAndCapture(linker, vm) {
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV === 'production') {
	    // reset directives before every capture in production
	    // mode, so that when unlinking we don't need to splice
	    // them out (which turns out to be a perf hit).
	    // they are kept in development mode because they are
	    // useful for Vue's own tests.
	    vm._directives = [];
	  }
	  var originalDirCount = vm._directives.length;
	  linker();
	  var dirs = vm._directives.slice(originalDirCount);
	  dirs.sort(directiveComparator);
	  for (var i = 0, l = dirs.length; i < l; i++) {
	    dirs[i]._bind();
	  }
	  return dirs;
	}
	
	/**
	 * Directive priority sort comparator
	 *
	 * @param {Object} a
	 * @param {Object} b
	 */
	
	function directiveComparator(a, b) {
	  a = a.descriptor.def.priority || DEFAULT_PRIORITY;
	  b = b.descriptor.def.priority || DEFAULT_PRIORITY;
	  return a > b ? -1 : a === b ? 0 : 1;
	}
	
	/**
	 * Linker functions return an unlink function that
	 * tearsdown all directives instances generated during
	 * the process.
	 *
	 * We create unlink functions with only the necessary
	 * information to avoid retaining additional closures.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Vue} [context]
	 * @param {Array} [contextDirs]
	 * @return {Function}
	 */
	
	function makeUnlinkFn(vm, dirs, context, contextDirs) {
	  function unlink(destroying) {
	    teardownDirs(vm, dirs, destroying);
	    if (context && contextDirs) {
	      teardownDirs(context, contextDirs);
	    }
	  }
	  // expose linked directives
	  unlink.dirs = dirs;
	  return unlink;
	}
	
	/**
	 * Teardown partial linked directives.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Boolean} destroying
	 */
	
	function teardownDirs(vm, dirs, destroying) {
	  var i = dirs.length;
	  while (i--) {
	    dirs[i]._teardown();
	    if (process.env.NODE_ENV !== 'production' && !destroying) {
	      vm._directives.$remove(dirs[i]);
	    }
	  }
	}
	
	/**
	 * Compile link props on an instance.
	 *
	 * @param {Vue} vm
	 * @param {Element} el
	 * @param {Object} props
	 * @param {Object} [scope]
	 * @return {Function}
	 */
	
	function compileAndLinkProps(vm, el, props, scope) {
	  var propsLinkFn = compileProps(el, props, vm);
	  var propDirs = linkAndCapture(function () {
	    propsLinkFn(vm, scope);
	  }, vm);
	  return makeUnlinkFn(vm, propDirs);
	}
	
	/**
	 * Compile the root element of an instance.
	 *
	 * 1. attrs on context container (context scope)
	 * 2. attrs on the component template root node, if
	 *    replace:true (child scope)
	 *
	 * If this is a fragment instance, we only need to compile 1.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @param {Object} contextOptions
	 * @return {Function}
	 */
	
	function compileRoot(el, options, contextOptions) {
	  var containerAttrs = options._containerAttrs;
	  var replacerAttrs = options._replacerAttrs;
	  var contextLinkFn, replacerLinkFn;
	
	  // only need to compile other attributes for
	  // non-fragment instances
	  if (el.nodeType !== 11) {
	    // for components, container and replacer need to be
	    // compiled separately and linked in different scopes.
	    if (options._asComponent) {
	      // 2. container attributes
	      if (containerAttrs && contextOptions) {
	        contextLinkFn = compileDirectives(containerAttrs, contextOptions);
	      }
	      if (replacerAttrs) {
	        // 3. replacer attributes
	        replacerLinkFn = compileDirectives(replacerAttrs, options);
	      }
	    } else {
	      // non-component, just compile as a normal element.
	      replacerLinkFn = compileDirectives(el.attributes, options);
	    }
	  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {
	    // warn container directives for fragment instances
	    var names = containerAttrs.filter(function (attr) {
	      // allow vue-loader/vueify scoped css attributes
	      return attr.name.indexOf('_v-') < 0 &&
	      // allow event listeners
	      !onRE.test(attr.name) &&
	      // allow slots
	      attr.name !== 'slot';
	    }).map(function (attr) {
	      return '"' + attr.name + '"';
	    });
	    if (names.length) {
	      var plural = names.length > 1;
	      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
	    }
	  }
	
	  options._containerAttrs = options._replacerAttrs = null;
	  return function rootLinkFn(vm, el, scope) {
	    // link context scope dirs
	    var context = vm._context;
	    var contextDirs;
	    if (context && contextLinkFn) {
	      contextDirs = linkAndCapture(function () {
	        contextLinkFn(context, el, null, scope);
	      }, context);
	    }
	
	    // link self
	    var selfDirs = linkAndCapture(function () {
	      if (replacerLinkFn) replacerLinkFn(vm, el);
	    }, vm);
	
	    // return the unlink function that tearsdown context
	    // container directives.
	    return makeUnlinkFn(vm, selfDirs, context, contextDirs);
	  };
	}
	
	/**
	 * Compile a node and return a nodeLinkFn based on the
	 * node type.
	 *
	 * @param {Node} node
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileNode(node, options) {
	  var type = node.nodeType;
	  if (type === 1 && !isScript(node)) {
	    return compileElement(node, options);
	  } else if (type === 3 && node.data.trim()) {
	    return compileTextNode(node, options);
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Compile an element and return a nodeLinkFn.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileElement(el, options) {
	  // preprocess textareas.
	  // textarea treats its text content as the initial value.
	  // just bind it as an attr directive for value.
	  if (el.tagName === 'TEXTAREA') {
	    var tokens = parseText(el.value);
	    if (tokens) {
	      el.setAttribute(':value', tokensToExp(tokens));
	      el.value = '';
	    }
	  }
	  var linkFn;
	  var hasAttrs = el.hasAttributes();
	  var attrs = hasAttrs && toArray(el.attributes);
	  // check terminal directives (for & if)
	  if (hasAttrs) {
	    linkFn = checkTerminalDirectives(el, attrs, options);
	  }
	  // check element directives
	  if (!linkFn) {
	    linkFn = checkElementDirectives(el, options);
	  }
	  // check component
	  if (!linkFn) {
	    linkFn = checkComponent(el, options);
	  }
	  // normal directives
	  if (!linkFn && hasAttrs) {
	    linkFn = compileDirectives(attrs, options);
	  }
	  return linkFn;
	}
	
	/**
	 * Compile a textNode and return a nodeLinkFn.
	 *
	 * @param {TextNode} node
	 * @param {Object} options
	 * @return {Function|null} textNodeLinkFn
	 */
	
	function compileTextNode(node, options) {
	  // skip marked text nodes
	  if (node._skip) {
	    return removeText;
	  }
	
	  var tokens = parseText(node.wholeText);
	  if (!tokens) {
	    return null;
	  }
	
	  // mark adjacent text nodes as skipped,
	  // because we are using node.wholeText to compile
	  // all adjacent text nodes together. This fixes
	  // issues in IE where sometimes it splits up a single
	  // text node into multiple ones.
	  var next = node.nextSibling;
	  while (next && next.nodeType === 3) {
	    next._skip = true;
	    next = next.nextSibling;
	  }
	
	  var frag = document.createDocumentFragment();
	  var el, token;
	  for (var i = 0, l = tokens.length; i < l; i++) {
	    token = tokens[i];
	    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
	    frag.appendChild(el);
	  }
	  return makeTextNodeLinkFn(tokens, frag, options);
	}
	
	/**
	 * Linker for an skipped text node.
	 *
	 * @param {Vue} vm
	 * @param {Text} node
	 */
	
	function removeText(vm, node) {
	  remove(node);
	}
	
	/**
	 * Process a single text token.
	 *
	 * @param {Object} token
	 * @param {Object} options
	 * @return {Node}
	 */
	
	function processTextToken(token, options) {
	  var el;
	  if (token.oneTime) {
	    el = document.createTextNode(token.value);
	  } else {
	    if (token.html) {
	      el = document.createComment('v-html');
	      setTokenType('html');
	    } else {
	      // IE will clean up empty textNodes during
	      // frag.cloneNode(true), so we have to give it
	      // something here...
	      el = document.createTextNode(' ');
	      setTokenType('text');
	    }
	  }
	  function setTokenType(type) {
	    if (token.descriptor) return;
	    var parsed = parseDirective(token.value);
	    token.descriptor = {
	      name: type,
	      def: directives[type],
	      expression: parsed.expression,
	      filters: parsed.filters
	    };
	  }
	  return el;
	}
	
	/**
	 * Build a function that processes a textNode.
	 *
	 * @param {Array<Object>} tokens
	 * @param {DocumentFragment} frag
	 */
	
	function makeTextNodeLinkFn(tokens, frag) {
	  return function textNodeLinkFn(vm, el, host, scope) {
	    var fragClone = frag.cloneNode(true);
	    var childNodes = toArray(fragClone.childNodes);
	    var token, value, node;
	    for (var i = 0, l = tokens.length; i < l; i++) {
	      token = tokens[i];
	      value = token.value;
	      if (token.tag) {
	        node = childNodes[i];
	        if (token.oneTime) {
	          value = (scope || vm).$eval(value);
	          if (token.html) {
	            replace(node, parseTemplate(value, true));
	          } else {
	            node.data = _toString(value);
	          }
	        } else {
	          vm._bindDir(token.descriptor, node, host, scope);
	        }
	      }
	    }
	    replace(el, fragClone);
	  };
	}
	
	/**
	 * Compile a node list and return a childLinkFn.
	 *
	 * @param {NodeList} nodeList
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function compileNodeList(nodeList, options) {
	  var linkFns = [];
	  var nodeLinkFn, childLinkFn, node;
	  for (var i = 0, l = nodeList.length; i < l; i++) {
	    node = nodeList[i];
	    nodeLinkFn = compileNode(node, options);
	    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
	    linkFns.push(nodeLinkFn, childLinkFn);
	  }
	  return linkFns.length ? makeChildLinkFn(linkFns) : null;
	}
	
	/**
	 * Make a child link function for a node's childNodes.
	 *
	 * @param {Array<Function>} linkFns
	 * @return {Function} childLinkFn
	 */
	
	function makeChildLinkFn(linkFns) {
	  return function childLinkFn(vm, nodes, host, scope, frag) {
	    var node, nodeLinkFn, childrenLinkFn;
	    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
	      node = nodes[n];
	      nodeLinkFn = linkFns[i++];
	      childrenLinkFn = linkFns[i++];
	      // cache childNodes before linking parent, fix #657
	      var childNodes = toArray(node.childNodes);
	      if (nodeLinkFn) {
	        nodeLinkFn(vm, node, host, scope, frag);
	      }
	      if (childrenLinkFn) {
	        childrenLinkFn(vm, childNodes, host, scope, frag);
	      }
	    }
	  };
	}
	
	/**
	 * Check for element directives (custom elements that should
	 * be resovled as terminal directives).
	 *
	 * @param {Element} el
	 * @param {Object} options
	 */
	
	function checkElementDirectives(el, options) {
	  var tag = el.tagName.toLowerCase();
	  if (commonTagRE.test(tag)) {
	    return;
	  }
	  var def = resolveAsset(options, 'elementDirectives', tag);
	  if (def) {
	    return makeTerminalNodeLinkFn(el, tag, '', options, def);
	  }
	}
	
	/**
	 * Check if an element is a component. If yes, return
	 * a component link function.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function checkComponent(el, options) {
	  var component = checkComponentAttr(el, options);
	  if (component) {
	    var ref = findRef(el);
	    var descriptor = {
	      name: 'component',
	      ref: ref,
	      expression: component.id,
	      def: internalDirectives.component,
	      modifiers: {
	        literal: !component.dynamic
	      }
	    };
	    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
	      if (ref) {
	        defineReactive((scope || vm).$refs, ref, null);
	      }
	      vm._bindDir(descriptor, el, host, scope, frag);
	    };
	    componentLinkFn.terminal = true;
	    return componentLinkFn;
	  }
	}
	
	/**
	 * Check an element for terminal directives in fixed order.
	 * If it finds one, return a terminal link function.
	 *
	 * @param {Element} el
	 * @param {Array} attrs
	 * @param {Object} options
	 * @return {Function} terminalLinkFn
	 */
	
	function checkTerminalDirectives(el, attrs, options) {
	  // skip v-pre
	  if (getAttr(el, 'v-pre') !== null) {
	    return skip;
	  }
	  // skip v-else block, but only if following v-if
	  if (el.hasAttribute('v-else')) {
	    var prev = el.previousElementSibling;
	    if (prev && prev.hasAttribute('v-if')) {
	      return skip;
	    }
	  }
	
	  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
	  for (var i = 0, j = attrs.length; i < j; i++) {
	    attr = attrs[i];
	    name = attr.name.replace(modifierRE, '');
	    if (matched = name.match(dirAttrRE)) {
	      def = resolveAsset(options, 'directives', matched[1]);
	      if (def && def.terminal) {
	        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
	          termDef = def;
	          rawName = attr.name;
	          modifiers = parseModifiers(attr.name);
	          value = attr.value;
	          dirName = matched[1];
	          arg = matched[2];
	        }
	      }
	    }
	  }
	
	  if (termDef) {
	    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
	  }
	}
	
	function skip() {}
	skip.terminal = true;
	
	/**
	 * Build a node link function for a terminal directive.
	 * A terminal link function terminates the current
	 * compilation recursion and handles compilation of the
	 * subtree in the directive.
	 *
	 * @param {Element} el
	 * @param {String} dirName
	 * @param {String} value
	 * @param {Object} options
	 * @param {Object} def
	 * @param {String} [rawName]
	 * @param {String} [arg]
	 * @param {Object} [modifiers]
	 * @return {Function} terminalLinkFn
	 */
	
	function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
	  var parsed = parseDirective(value);
	  var descriptor = {
	    name: dirName,
	    arg: arg,
	    expression: parsed.expression,
	    filters: parsed.filters,
	    raw: value,
	    attr: rawName,
	    modifiers: modifiers,
	    def: def
	  };
	  // check ref for v-for and router-view
	  if (dirName === 'for' || dirName === 'router-view') {
	    descriptor.ref = findRef(el);
	  }
	  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
	    if (descriptor.ref) {
	      defineReactive((scope || vm).$refs, descriptor.ref, null);
	    }
	    vm._bindDir(descriptor, el, host, scope, frag);
	  };
	  fn.terminal = true;
	  return fn;
	}
	
	/**
	 * Compile the directives on an element and return a linker.
	 *
	 * @param {Array|NamedNodeMap} attrs
	 * @param {Object} options
	 * @return {Function}
	 */
	
	function compileDirectives(attrs, options) {
	  var i = attrs.length;
	  var dirs = [];
	  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
	  while (i--) {
	    attr = attrs[i];
	    name = rawName = attr.name;
	    value = rawValue = attr.value;
	    tokens = parseText(value);
	    // reset arg
	    arg = null;
	    // check modifiers
	    modifiers = parseModifiers(name);
	    name = name.replace(modifierRE, '');
	
	    // attribute interpolations
	    if (tokens) {
	      value = tokensToExp(tokens);
	      arg = name;
	      pushDir('bind', directives.bind, tokens);
	      // warn against mixing mustaches with v-bind
	      if (process.env.NODE_ENV !== 'production') {
	        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
	          return attr.name === ':class' || attr.name === 'v-bind:class';
	        })) {
	          warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
	        }
	      }
	    } else
	
	      // special attribute: transition
	      if (transitionRE.test(name)) {
	        modifiers.literal = !bindRE.test(name);
	        pushDir('transition', internalDirectives.transition);
	      } else
	
	        // event handlers
	        if (onRE.test(name)) {
	          arg = name.replace(onRE, '');
	          pushDir('on', directives.on);
	        } else
	
	          // attribute bindings
	          if (bindRE.test(name)) {
	            dirName = name.replace(bindRE, '');
	            if (dirName === 'style' || dirName === 'class') {
	              pushDir(dirName, internalDirectives[dirName]);
	            } else {
	              arg = dirName;
	              pushDir('bind', directives.bind);
	            }
	          } else
	
	            // normal directives
	            if (matched = name.match(dirAttrRE)) {
	              dirName = matched[1];
	              arg = matched[2];
	
	              // skip v-else (when used with v-show)
	              if (dirName === 'else') {
	                continue;
	              }
	
	              dirDef = resolveAsset(options, 'directives', dirName, true);
	              if (dirDef) {
	                pushDir(dirName, dirDef);
	              }
	            }
	  }
	
	  /**
	   * Push a directive.
	   *
	   * @param {String} dirName
	   * @param {Object|Function} def
	   * @param {Array} [interpTokens]
	   */
	
	  function pushDir(dirName, def, interpTokens) {
	    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
	    var parsed = !hasOneTimeToken && parseDirective(value);
	    dirs.push({
	      name: dirName,
	      attr: rawName,
	      raw: rawValue,
	      def: def,
	      arg: arg,
	      modifiers: modifiers,
	      // conversion from interpolation strings with one-time token
	      // to expression is differed until directive bind time so that we
	      // have access to the actual vm context for one-time bindings.
	      expression: parsed && parsed.expression,
	      filters: parsed && parsed.filters,
	      interp: interpTokens,
	      hasOneTime: hasOneTimeToken
	    });
	  }
	
	  if (dirs.length) {
	    return makeNodeLinkFn(dirs);
	  }
	}
	
	/**
	 * Parse modifiers from directive attribute name.
	 *
	 * @param {String} name
	 * @return {Object}
	 */
	
	function parseModifiers(name) {
	  var res = Object.create(null);
	  var match = name.match(modifierRE);
	  if (match) {
	    var i = match.length;
	    while (i--) {
	      res[match[i].slice(1)] = true;
	    }
	  }
	  return res;
	}
	
	/**
	 * Build a link function for all directives on a single node.
	 *
	 * @param {Array} directives
	 * @return {Function} directivesLinkFn
	 */
	
	function makeNodeLinkFn(directives) {
	  return function nodeLinkFn(vm, el, host, scope, frag) {
	    // reverse apply because it's sorted low to high
	    var i = directives.length;
	    while (i--) {
	      vm._bindDir(directives[i], el, host, scope, frag);
	    }
	  };
	}
	
	/**
	 * Check if an interpolation string contains one-time tokens.
	 *
	 * @param {Array} tokens
	 * @return {Boolean}
	 */
	
	function hasOneTime(tokens) {
	  var i = tokens.length;
	  while (i--) {
	    if (tokens[i].oneTime) return true;
	  }
	}
	
	function isScript(el) {
	  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
	}
	
	var specialCharRE = /[^\w\-:\.]/;
	
	/**
	 * Process an element or a DocumentFragment based on a
	 * instance option object. This allows us to transclude
	 * a template node/fragment before the instance is created,
	 * so the processed fragment can then be cloned and reused
	 * in v-for.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transclude(el, options) {
	  // extract container attributes to pass them down
	  // to compiler, because they need to be compiled in
	  // parent scope. we are mutating the options object here
	  // assuming the same object will be used for compile
	  // right after this.
	  if (options) {
	    options._containerAttrs = extractAttrs(el);
	  }
	  // for template tags, what we want is its content as
	  // a documentFragment (for fragment instances)
	  if (isTemplate(el)) {
	    el = parseTemplate(el);
	  }
	  if (options) {
	    if (options._asComponent && !options.template) {
	      options.template = '<slot></slot>';
	    }
	    if (options.template) {
	      options._content = extractContent(el);
	      el = transcludeTemplate(el, options);
	    }
	  }
	  if (isFragment(el)) {
	    // anchors for fragment instance
	    // passing in `persist: true` to avoid them being
	    // discarded by IE during template cloning
	    prepend(createAnchor('v-start', true), el);
	    el.appendChild(createAnchor('v-end', true));
	  }
	  return el;
	}
	
	/**
	 * Process the template option.
	 * If the replace option is true this will swap the $el.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transcludeTemplate(el, options) {
	  var template = options.template;
	  var frag = parseTemplate(template, true);
	  if (frag) {
	    var replacer = frag.firstChild;
	    var tag = replacer.tagName && replacer.tagName.toLowerCase();
	    if (options.replace) {
	      /* istanbul ignore if */
	      if (el === document.body) {
	        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
	      }
	      // there are many cases where the instance must
	      // become a fragment instance: basically anything that
	      // can create more than 1 root nodes.
	      if (
	      // multi-children template
	      frag.childNodes.length > 1 ||
	      // non-element template
	      replacer.nodeType !== 1 ||
	      // single nested component
	      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
	      // element directive
	      resolveAsset(options, 'elementDirectives', tag) ||
	      // for block
	      replacer.hasAttribute('v-for') ||
	      // if block
	      replacer.hasAttribute('v-if')) {
	        return frag;
	      } else {
	        options._replacerAttrs = extractAttrs(replacer);
	        mergeAttrs(el, replacer);
	        return replacer;
	      }
	    } else {
	      el.appendChild(frag);
	      return el;
	    }
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);
	  }
	}
	
	/**
	 * Helper to extract a component container's attributes
	 * into a plain object array.
	 *
	 * @param {Element} el
	 * @return {Array}
	 */
	
	function extractAttrs(el) {
	  if (el.nodeType === 1 && el.hasAttributes()) {
	    return toArray(el.attributes);
	  }
	}
	
	/**
	 * Merge the attributes of two elements, and make sure
	 * the class names are merged properly.
	 *
	 * @param {Element} from
	 * @param {Element} to
	 */
	
	function mergeAttrs(from, to) {
	  var attrs = from.attributes;
	  var i = attrs.length;
	  var name, value;
	  while (i--) {
	    name = attrs[i].name;
	    value = attrs[i].value;
	    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
	      to.setAttribute(name, value);
	    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
	      value.split(/\s+/).forEach(function (cls) {
	        addClass(to, cls);
	      });
	    }
	  }
	}
	
	/**
	 * Scan and determine slot content distribution.
	 * We do this during transclusion instead at compile time so that
	 * the distribution is decoupled from the compilation order of
	 * the slots.
	 *
	 * @param {Element|DocumentFragment} template
	 * @param {Element} content
	 * @param {Vue} vm
	 */
	
	function resolveSlots(vm, content) {
	  if (!content) {
	    return;
	  }
	  var contents = vm._slotContents = Object.create(null);
	  var el, name;
	  for (var i = 0, l = content.children.length; i < l; i++) {
	    el = content.children[i];
	    /* eslint-disable no-cond-assign */
	    if (name = el.getAttribute('slot')) {
	      (contents[name] || (contents[name] = [])).push(el);
	    }
	    /* eslint-enable no-cond-assign */
	    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {
	      warn('The "slot" attribute must be static.', vm.$parent);
	    }
	  }
	  for (name in contents) {
	    contents[name] = extractFragment(contents[name], content);
	  }
	  if (content.hasChildNodes()) {
	    var nodes = content.childNodes;
	    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
	      return;
	    }
	    contents['default'] = extractFragment(content.childNodes, content);
	  }
	}
	
	/**
	 * Extract qualified content nodes from a node list.
	 *
	 * @param {NodeList} nodes
	 * @return {DocumentFragment}
	 */
	
	function extractFragment(nodes, parent) {
	  var frag = document.createDocumentFragment();
	  nodes = toArray(nodes);
	  for (var i = 0, l = nodes.length; i < l; i++) {
	    var node = nodes[i];
	    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
	      parent.removeChild(node);
	      node = parseTemplate(node, true);
	    }
	    frag.appendChild(node);
	  }
	  return frag;
	}
	
	
	
	var compiler = Object.freeze({
		compile: compile,
		compileAndLinkProps: compileAndLinkProps,
		compileRoot: compileRoot,
		transclude: transclude,
		resolveSlots: resolveSlots
	});
	
	function stateMixin (Vue) {
	  /**
	   * Accessor for `$data` property, since setting $data
	   * requires observing the new object and updating
	   * proxied properties.
	   */
	
	  Object.defineProperty(Vue.prototype, '$data', {
	    get: function get() {
	      return this._data;
	    },
	    set: function set(newData) {
	      if (newData !== this._data) {
	        this._setData(newData);
	      }
	    }
	  });
	
	  /**
	   * Setup the scope of an instance, which contains:
	   * - observed data
	   * - computed properties
	   * - user methods
	   * - meta properties
	   */
	
	  Vue.prototype._initState = function () {
	    this._initProps();
	    this._initMeta();
	    this._initMethods();
	    this._initData();
	    this._initComputed();
	  };
	
	  /**
	   * Initialize props.
	   */
	
	  Vue.prototype._initProps = function () {
	    var options = this.$options;
	    var el = options.el;
	    var props = options.props;
	    if (props && !el) {
	      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
	    }
	    // make sure to convert string selectors into element now
	    el = options.el = query(el);
	    this._propsUnlinkFn = el && el.nodeType === 1 && props
	    // props must be linked in proper scope if inside v-for
	    ? compileAndLinkProps(this, el, props, this._scope) : null;
	  };
	
	  /**
	   * Initialize the data.
	   */
	
	  Vue.prototype._initData = function () {
	    var dataFn = this.$options.data;
	    var data = this._data = dataFn ? dataFn() : {};
	    if (!isPlainObject(data)) {
	      data = {};
	      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);
	    }
	    var props = this._props;
	    // proxy data on instance
	    var keys = Object.keys(data);
	    var i, key;
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      // there are two scenarios where we can proxy a data key:
	      // 1. it's not already defined as a prop
	      // 2. it's provided via a instantiation option AND there are no
	      //    template prop present
	      if (!props || !hasOwn(props, key)) {
	        this._proxy(key);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
	      }
	    }
	    // observe data
	    observe(data, this);
	  };
	
	  /**
	   * Swap the instance's $data. Called in $data's setter.
	   *
	   * @param {Object} newData
	   */
	
	  Vue.prototype._setData = function (newData) {
	    newData = newData || {};
	    var oldData = this._data;
	    this._data = newData;
	    var keys, key, i;
	    // unproxy keys not present in new data
	    keys = Object.keys(oldData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!(key in newData)) {
	        this._unproxy(key);
	      }
	    }
	    // proxy keys not already proxied,
	    // and trigger change for changed values
	    keys = Object.keys(newData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!hasOwn(this, key)) {
	        // new property
	        this._proxy(key);
	      }
	    }
	    oldData.__ob__.removeVm(this);
	    observe(newData, this);
	    this._digest();
	  };
	
	  /**
	   * Proxy a property, so that
	   * vm.prop === vm._data.prop
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._proxy = function (key) {
	    if (!isReserved(key)) {
	      // need to store ref to self here
	      // because these getter/setters might
	      // be called by child scopes via
	      // prototype inheritance.
	      var self = this;
	      Object.defineProperty(self, key, {
	        configurable: true,
	        enumerable: true,
	        get: function proxyGetter() {
	          return self._data[key];
	        },
	        set: function proxySetter(val) {
	          self._data[key] = val;
	        }
	      });
	    }
	  };
	
	  /**
	   * Unproxy a property.
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._unproxy = function (key) {
	    if (!isReserved(key)) {
	      delete this[key];
	    }
	  };
	
	  /**
	   * Force update on every watcher in scope.
	   */
	
	  Vue.prototype._digest = function () {
	    for (var i = 0, l = this._watchers.length; i < l; i++) {
	      this._watchers[i].update(true); // shallow updates
	    }
	  };
	
	  /**
	   * Setup computed properties. They are essentially
	   * special getter/setters
	   */
	
	  function noop() {}
	  Vue.prototype._initComputed = function () {
	    var computed = this.$options.computed;
	    if (computed) {
	      for (var key in computed) {
	        var userDef = computed[key];
	        var def = {
	          enumerable: true,
	          configurable: true
	        };
	        if (typeof userDef === 'function') {
	          def.get = makeComputedGetter(userDef, this);
	          def.set = noop;
	        } else {
	          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
	          def.set = userDef.set ? bind(userDef.set, this) : noop;
	        }
	        Object.defineProperty(this, key, def);
	      }
	    }
	  };
	
	  function makeComputedGetter(getter, owner) {
	    var watcher = new Watcher(owner, getter, null, {
	      lazy: true
	    });
	    return function computedGetter() {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value;
	    };
	  }
	
	  /**
	   * Setup instance methods. Methods must be bound to the
	   * instance since they might be passed down as a prop to
	   * child components.
	   */
	
	  Vue.prototype._initMethods = function () {
	    var methods = this.$options.methods;
	    if (methods) {
	      for (var key in methods) {
	        this[key] = bind(methods[key], this);
	      }
	    }
	  };
	
	  /**
	   * Initialize meta information like $index, $key & $value.
	   */
	
	  Vue.prototype._initMeta = function () {
	    var metas = this.$options._meta;
	    if (metas) {
	      for (var key in metas) {
	        defineReactive(this, key, metas[key]);
	      }
	    }
	  };
	}
	
	var eventRE = /^v-on:|^@/;
	
	function eventsMixin (Vue) {
	  /**
	   * Setup the instance's option events & watchers.
	   * If the value is a string, we pull it from the
	   * instance's methods by name.
	   */
	
	  Vue.prototype._initEvents = function () {
	    var options = this.$options;
	    if (options._asComponent) {
	      registerComponentEvents(this, options.el);
	    }
	    registerCallbacks(this, '$on', options.events);
	    registerCallbacks(this, '$watch', options.watch);
	  };
	
	  /**
	   * Register v-on events on a child component
	   *
	   * @param {Vue} vm
	   * @param {Element} el
	   */
	
	  function registerComponentEvents(vm, el) {
	    var attrs = el.attributes;
	    var name, value, handler;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      name = attrs[i].name;
	      if (eventRE.test(name)) {
	        name = name.replace(eventRE, '');
	        // force the expression into a statement so that
	        // it always dynamically resolves the method to call (#2670)
	        // kinda ugly hack, but does the job.
	        value = attrs[i].value;
	        if (isSimplePath(value)) {
	          value += '.apply(this, $arguments)';
	        }
	        handler = (vm._scope || vm._context).$eval(value, true);
	        handler._fromParent = true;
	        vm.$on(name.replace(eventRE), handler);
	      }
	    }
	  }
	
	  /**
	   * Register callbacks for option events and watchers.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {Object} hash
	   */
	
	  function registerCallbacks(vm, action, hash) {
	    if (!hash) return;
	    var handlers, key, i, j;
	    for (key in hash) {
	      handlers = hash[key];
	      if (isArray(handlers)) {
	        for (i = 0, j = handlers.length; i < j; i++) {
	          register(vm, action, key, handlers[i]);
	        }
	      } else {
	        register(vm, action, key, handlers);
	      }
	    }
	  }
	
	  /**
	   * Helper to register an event/watch callback.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {String} key
	   * @param {Function|String|Object} handler
	   * @param {Object} [options]
	   */
	
	  function register(vm, action, key, handler, options) {
	    var type = typeof handler;
	    if (type === 'function') {
	      vm[action](key, handler, options);
	    } else if (type === 'string') {
	      var methods = vm.$options.methods;
	      var method = methods && methods[handler];
	      if (method) {
	        vm[action](key, method, options);
	      } else {
	        process.env.NODE_ENV !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
	      }
	    } else if (handler && type === 'object') {
	      register(vm, action, key, handler.handler, handler);
	    }
	  }
	
	  /**
	   * Setup recursive attached/detached calls
	   */
	
	  Vue.prototype._initDOMHooks = function () {
	    this.$on('hook:attached', onAttached);
	    this.$on('hook:detached', onDetached);
	  };
	
	  /**
	   * Callback to recursively call attached hook on children
	   */
	
	  function onAttached() {
	    if (!this._isAttached) {
	      this._isAttached = true;
	      this.$children.forEach(callAttach);
	    }
	  }
	
	  /**
	   * Iterator to call attached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callAttach(child) {
	    if (!child._isAttached && inDoc(child.$el)) {
	      child._callHook('attached');
	    }
	  }
	
	  /**
	   * Callback to recursively call detached hook on children
	   */
	
	  function onDetached() {
	    if (this._isAttached) {
	      this._isAttached = false;
	      this.$children.forEach(callDetach);
	    }
	  }
	
	  /**
	   * Iterator to call detached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callDetach(child) {
	    if (child._isAttached && !inDoc(child.$el)) {
	      child._callHook('detached');
	    }
	  }
	
	  /**
	   * Trigger all handlers for a hook
	   *
	   * @param {String} hook
	   */
	
	  Vue.prototype._callHook = function (hook) {
	    this.$emit('pre-hook:' + hook);
	    var handlers = this.$options[hook];
	    if (handlers) {
	      for (var i = 0, j = handlers.length; i < j; i++) {
	        handlers[i].call(this);
	      }
	    }
	    this.$emit('hook:' + hook);
	  };
	}
	
	function noop$1() {}
	
	/**
	 * A directive links a DOM element with a piece of data,
	 * which is the result of evaluating an expression.
	 * It registers a watcher with the expression and calls
	 * the DOM update function when a change is triggered.
	 *
	 * @param {Object} descriptor
	 *                 - {String} name
	 *                 - {Object} def
	 *                 - {String} expression
	 *                 - {Array<Object>} [filters]
	 *                 - {Object} [modifiers]
	 *                 - {Boolean} literal
	 *                 - {String} attr
	 *                 - {String} arg
	 *                 - {String} raw
	 *                 - {String} [ref]
	 *                 - {Array<Object>} [interp]
	 *                 - {Boolean} [hasOneTime]
	 * @param {Vue} vm
	 * @param {Node} el
	 * @param {Vue} [host] - transclusion host component
	 * @param {Object} [scope] - v-for scope
	 * @param {Fragment} [frag] - owner fragment
	 * @constructor
	 */
	function Directive(descriptor, vm, el, host, scope, frag) {
	  this.vm = vm;
	  this.el = el;
	  // copy descriptor properties
	  this.descriptor = descriptor;
	  this.name = descriptor.name;
	  this.expression = descriptor.expression;
	  this.arg = descriptor.arg;
	  this.modifiers = descriptor.modifiers;
	  this.filters = descriptor.filters;
	  this.literal = this.modifiers && this.modifiers.literal;
	  // private
	  this._locked = false;
	  this._bound = false;
	  this._listeners = null;
	  // link context
	  this._host = host;
	  this._scope = scope;
	  this._frag = frag;
	  // store directives on node in dev mode
	  if (process.env.NODE_ENV !== 'production' && this.el) {
	    this.el._vue_directives = this.el._vue_directives || [];
	    this.el._vue_directives.push(this);
	  }
	}
	
	/**
	 * Initialize the directive, mixin definition properties,
	 * setup the watcher, call definition bind() and update()
	 * if present.
	 */
	
	Directive.prototype._bind = function () {
	  var name = this.name;
	  var descriptor = this.descriptor;
	
	  // remove attribute
	  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
	    var attr = descriptor.attr || 'v-' + name;
	    this.el.removeAttribute(attr);
	  }
	
	  // copy def properties
	  var def = descriptor.def;
	  if (typeof def === 'function') {
	    this.update = def;
	  } else {
	    extend(this, def);
	  }
	
	  // setup directive params
	  this._setupParams();
	
	  // initial bind
	  if (this.bind) {
	    this.bind();
	  }
	  this._bound = true;
	
	  if (this.literal) {
	    this.update && this.update(descriptor.raw);
	  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
	    // wrapped updater for context
	    var dir = this;
	    if (this.update) {
	      this._update = function (val, oldVal) {
	        if (!dir._locked) {
	          dir.update(val, oldVal);
	        }
	      };
	    } else {
	      this._update = noop$1;
	    }
	    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
	    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
	    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
	    {
	      filters: this.filters,
	      twoWay: this.twoWay,
	      deep: this.deep,
	      preProcess: preProcess,
	      postProcess: postProcess,
	      scope: this._scope
	    });
	    // v-model with inital inline value need to sync back to
	    // model instead of update to DOM on init. They would
	    // set the afterBind hook to indicate that.
	    if (this.afterBind) {
	      this.afterBind();
	    } else if (this.update) {
	      this.update(watcher.value);
	    }
	  }
	};
	
	/**
	 * Setup all param attributes, e.g. track-by,
	 * transition-mode, etc...
	 */
	
	Directive.prototype._setupParams = function () {
	  if (!this.params) {
	    return;
	  }
	  var params = this.params;
	  // swap the params array with a fresh object.
	  this.params = Object.create(null);
	  var i = params.length;
	  var key, val, mappedKey;
	  while (i--) {
	    key = hyphenate(params[i]);
	    mappedKey = camelize(key);
	    val = getBindAttr(this.el, key);
	    if (val != null) {
	      // dynamic
	      this._setupParamWatcher(mappedKey, val);
	    } else {
	      // static
	      val = getAttr(this.el, key);
	      if (val != null) {
	        this.params[mappedKey] = val === '' ? true : val;
	      }
	    }
	  }
	};
	
	/**
	 * Setup a watcher for a dynamic param.
	 *
	 * @param {String} key
	 * @param {String} expression
	 */
	
	Directive.prototype._setupParamWatcher = function (key, expression) {
	  var self = this;
	  var called = false;
	  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
	    self.params[key] = val;
	    // since we are in immediate mode,
	    // only call the param change callbacks if this is not the first update.
	    if (called) {
	      var cb = self.paramWatchers && self.paramWatchers[key];
	      if (cb) {
	        cb.call(self, val, oldVal);
	      }
	    } else {
	      called = true;
	    }
	  }, {
	    immediate: true,
	    user: false
	  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
	};
	
	/**
	 * Check if the directive is a function caller
	 * and if the expression is a callable one. If both true,
	 * we wrap up the expression and use it as the event
	 * handler.
	 *
	 * e.g. on-click="a++"
	 *
	 * @return {Boolean}
	 */
	
	Directive.prototype._checkStatement = function () {
	  var expression = this.expression;
	  if (expression && this.acceptStatement && !isSimplePath(expression)) {
	    var fn = parseExpression(expression).get;
	    var scope = this._scope || this.vm;
	    var handler = function handler(e) {
	      scope.$event = e;
	      fn.call(scope, scope);
	      scope.$event = null;
	    };
	    if (this.filters) {
	      handler = scope._applyFilters(handler, null, this.filters);
	    }
	    this.update(handler);
	    return true;
	  }
	};
	
	/**
	 * Set the corresponding value with the setter.
	 * This should only be used in two-way directives
	 * e.g. v-model.
	 *
	 * @param {*} value
	 * @public
	 */
	
	Directive.prototype.set = function (value) {
	  /* istanbul ignore else */
	  if (this.twoWay) {
	    this._withLock(function () {
	      this._watcher.set(value);
	    });
	  } else if (process.env.NODE_ENV !== 'production') {
	    warn('Directive.set() can only be used inside twoWay' + 'directives.');
	  }
	};
	
	/**
	 * Execute a function while preventing that function from
	 * triggering updates on this directive instance.
	 *
	 * @param {Function} fn
	 */
	
	Directive.prototype._withLock = function (fn) {
	  var self = this;
	  self._locked = true;
	  fn.call(self);
	  nextTick(function () {
	    self._locked = false;
	  });
	};
	
	/**
	 * Convenience method that attaches a DOM event listener
	 * to the directive element and autometically tears it down
	 * during unbind.
	 *
	 * @param {String} event
	 * @param {Function} handler
	 * @param {Boolean} [useCapture]
	 */
	
	Directive.prototype.on = function (event, handler, useCapture) {
	  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
	};
	
	/**
	 * Teardown the watcher and call unbind.
	 */
	
	Directive.prototype._teardown = function () {
	  if (this._bound) {
	    this._bound = false;
	    if (this.unbind) {
	      this.unbind();
	    }
	    if (this._watcher) {
	      this._watcher.teardown();
	    }
	    var listeners = this._listeners;
	    var i;
	    if (listeners) {
	      i = listeners.length;
	      while (i--) {
	        off(this.el, listeners[i][0], listeners[i][1]);
	      }
	    }
	    var unwatchFns = this._paramUnwatchFns;
	    if (unwatchFns) {
	      i = unwatchFns.length;
	      while (i--) {
	        unwatchFns[i]();
	      }
	    }
	    if (process.env.NODE_ENV !== 'production' && this.el) {
	      this.el._vue_directives.$remove(this);
	    }
	    this.vm = this.el = this._watcher = this._listeners = null;
	  }
	};
	
	function lifecycleMixin (Vue) {
	  /**
	   * Update v-ref for component.
	   *
	   * @param {Boolean} remove
	   */
	
	  Vue.prototype._updateRef = function (remove) {
	    var ref = this.$options._ref;
	    if (ref) {
	      var refs = (this._scope || this._context).$refs;
	      if (remove) {
	        if (refs[ref] === this) {
	          refs[ref] = null;
	        }
	      } else {
	        refs[ref] = this;
	      }
	    }
	  };
	
	  /**
	   * Transclude, compile and link element.
	   *
	   * If a pre-compiled linker is available, that means the
	   * passed in element will be pre-transcluded and compiled
	   * as well - all we need to do is to call the linker.
	   *
	   * Otherwise we need to call transclude/compile/link here.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._compile = function (el) {
	    var options = this.$options;
	
	    // transclude and init element
	    // transclude can potentially replace original
	    // so we need to keep reference; this step also injects
	    // the template and caches the original attributes
	    // on the container node and replacer node.
	    var original = el;
	    el = transclude(el, options);
	    this._initElement(el);
	
	    // handle v-pre on root node (#2026)
	    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
	      return;
	    }
	
	    // root is always compiled per-instance, because
	    // container attrs and props can be different every time.
	    var contextOptions = this._context && this._context.$options;
	    var rootLinker = compileRoot(el, options, contextOptions);
	
	    // resolve slot distribution
	    resolveSlots(this, options._content);
	
	    // compile and link the rest
	    var contentLinkFn;
	    var ctor = this.constructor;
	    // component compilation can be cached
	    // as long as it's not using inline-template
	    if (options._linkerCachable) {
	      contentLinkFn = ctor.linker;
	      if (!contentLinkFn) {
	        contentLinkFn = ctor.linker = compile(el, options);
	      }
	    }
	
	    // link phase
	    // make sure to link root with prop scope!
	    var rootUnlinkFn = rootLinker(this, el, this._scope);
	    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);
	
	    // register composite unlink function
	    // to be called during instance destruction
	    this._unlinkFn = function () {
	      rootUnlinkFn();
	      // passing destroying: true to avoid searching and
	      // splicing the directives
	      contentUnlinkFn(true);
	    };
	
	    // finally replace original
	    if (options.replace) {
	      replace(original, el);
	    }
	
	    this._isCompiled = true;
	    this._callHook('compiled');
	  };
	
	  /**
	   * Initialize instance element. Called in the public
	   * $mount() method.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._initElement = function (el) {
	    if (isFragment(el)) {
	      this._isFragment = true;
	      this.$el = this._fragmentStart = el.firstChild;
	      this._fragmentEnd = el.lastChild;
	      // set persisted text anchors to empty
	      if (this._fragmentStart.nodeType === 3) {
	        this._fragmentStart.data = this._fragmentEnd.data = '';
	      }
	      this._fragment = el;
	    } else {
	      this.$el = el;
	    }
	    this.$el.__vue__ = this;
	    this._callHook('beforeCompile');
	  };
	
	  /**
	   * Create and bind a directive to an element.
	   *
	   * @param {Object} descriptor - parsed directive descriptor
	   * @param {Node} node   - target node
	   * @param {Vue} [host] - transclusion host component
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - owner fragment
	   */
	
	  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
	    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
	  };
	
	  /**
	   * Teardown an instance, unobserves the data, unbind all the
	   * directives, turn off all the event listeners, etc.
	   *
	   * @param {Boolean} remove - whether to remove the DOM node.
	   * @param {Boolean} deferCleanup - if true, defer cleanup to
	   *                                 be called later
	   */
	
	  Vue.prototype._destroy = function (remove, deferCleanup) {
	    if (this._isBeingDestroyed) {
	      if (!deferCleanup) {
	        this._cleanup();
	      }
	      return;
	    }
	
	    var destroyReady;
	    var pendingRemoval;
	
	    var self = this;
	    // Cleanup should be called either synchronously or asynchronoysly as
	    // callback of this.$remove(), or if remove and deferCleanup are false.
	    // In any case it should be called after all other removing, unbinding and
	    // turning of is done
	    var cleanupIfPossible = function cleanupIfPossible() {
	      if (destroyReady && !pendingRemoval && !deferCleanup) {
	        self._cleanup();
	      }
	    };
	
	    // remove DOM element
	    if (remove && this.$el) {
	      pendingRemoval = true;
	      this.$remove(function () {
	        pendingRemoval = false;
	        cleanupIfPossible();
	      });
	    }
	
	    this._callHook('beforeDestroy');
	    this._isBeingDestroyed = true;
	    var i;
	    // remove self from parent. only necessary
	    // if parent is not being destroyed as well.
	    var parent = this.$parent;
	    if (parent && !parent._isBeingDestroyed) {
	      parent.$children.$remove(this);
	      // unregister ref (remove: true)
	      this._updateRef(true);
	    }
	    // destroy all children.
	    i = this.$children.length;
	    while (i--) {
	      this.$children[i].$destroy();
	    }
	    // teardown props
	    if (this._propsUnlinkFn) {
	      this._propsUnlinkFn();
	    }
	    // teardown all directives. this also tearsdown all
	    // directive-owned watchers.
	    if (this._unlinkFn) {
	      this._unlinkFn();
	    }
	    i = this._watchers.length;
	    while (i--) {
	      this._watchers[i].teardown();
	    }
	    // remove reference to self on $el
	    if (this.$el) {
	      this.$el.__vue__ = null;
	    }
	
	    destroyReady = true;
	    cleanupIfPossible();
	  };
	
	  /**
	   * Clean up to ensure garbage collection.
	   * This is called after the leave transition if there
	   * is any.
	   */
	
	  Vue.prototype._cleanup = function () {
	    if (this._isDestroyed) {
	      return;
	    }
	    // remove self from owner fragment
	    // do it in cleanup so that we can call $destroy with
	    // defer right when a fragment is about to be removed.
	    if (this._frag) {
	      this._frag.children.$remove(this);
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (this._data && this._data.__ob__) {
	      this._data.__ob__.removeVm(this);
	    }
	    // Clean up references to private properties and other
	    // instances. preserve reference to _data so that proxy
	    // accessors still work. The only potential side effect
	    // here is that mutating the instance after it's destroyed
	    // may affect the state of other components that are still
	    // observing the same object, but that seems to be a
	    // reasonable responsibility for the user rather than
	    // always throwing an error on them.
	    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
	    // call the last hook...
	    this._isDestroyed = true;
	    this._callHook('destroyed');
	    // turn off all instance listeners.
	    this.$off();
	  };
	}
	
	function miscMixin (Vue) {
	  /**
	   * Apply a list of filter (descriptors) to a value.
	   * Using plain for loops here because this will be called in
	   * the getter of any watcher with filters so it is very
	   * performance sensitive.
	   *
	   * @param {*} value
	   * @param {*} [oldValue]
	   * @param {Array} filters
	   * @param {Boolean} write
	   * @return {*}
	   */
	
	  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
	    var filter, fn, args, arg, offset, i, l, j, k;
	    for (i = 0, l = filters.length; i < l; i++) {
	      filter = filters[write ? l - i - 1 : i];
	      fn = resolveAsset(this.$options, 'filters', filter.name, true);
	      if (!fn) continue;
	      fn = write ? fn.write : fn.read || fn;
	      if (typeof fn !== 'function') continue;
	      args = write ? [value, oldValue] : [value];
	      offset = write ? 2 : 1;
	      if (filter.args) {
	        for (j = 0, k = filter.args.length; j < k; j++) {
	          arg = filter.args[j];
	          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
	        }
	      }
	      value = fn.apply(this, args);
	    }
	    return value;
	  };
	
	  /**
	   * Resolve a component, depending on whether the component
	   * is defined normally or using an async factory function.
	   * Resolves synchronously if already resolved, otherwise
	   * resolves asynchronously and caches the resolved
	   * constructor on the factory.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  Vue.prototype._resolveComponent = function (value, cb) {
	    var factory;
	    if (typeof value === 'function') {
	      factory = value;
	    } else {
	      factory = resolveAsset(this.$options, 'components', value, true);
	    }
	    /* istanbul ignore if */
	    if (!factory) {
	      return;
	    }
	    // async component factory
	    if (!factory.options) {
	      if (factory.resolved) {
	        // cached
	        cb(factory.resolved);
	      } else if (factory.requested) {
	        // pool callbacks
	        factory.pendingCallbacks.push(cb);
	      } else {
	        factory.requested = true;
	        var cbs = factory.pendingCallbacks = [cb];
	        factory.call(this, function resolve(res) {
	          if (isPlainObject(res)) {
	            res = Vue.extend(res);
	          }
	          // cache resolved
	          factory.resolved = res;
	          // invoke callbacks
	          for (var i = 0, l = cbs.length; i < l; i++) {
	            cbs[i](res);
	          }
	        }, function reject(reason) {
	          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
	        });
	      }
	    } else {
	      // normal component
	      cb(factory);
	    }
	  };
	}
	
	var filterRE$1 = /[^|]\|[^|]/;
	
	function dataAPI (Vue) {
	  /**
	   * Get the value from an expression on this vm.
	   *
	   * @param {String} exp
	   * @param {Boolean} [asStatement]
	   * @return {*}
	   */
	
	  Vue.prototype.$get = function (exp, asStatement) {
	    var res = parseExpression(exp);
	    if (res) {
	      if (asStatement) {
	        var self = this;
	        return function statementHandler() {
	          self.$arguments = toArray(arguments);
	          var result = res.get.call(self, self);
	          self.$arguments = null;
	          return result;
	        };
	      } else {
	        try {
	          return res.get.call(this, this);
	        } catch (e) {}
	      }
	    }
	  };
	
	  /**
	   * Set the value from an expression on this vm.
	   * The expression must be a valid left-hand
	   * expression in an assignment.
	   *
	   * @param {String} exp
	   * @param {*} val
	   */
	
	  Vue.prototype.$set = function (exp, val) {
	    var res = parseExpression(exp, true);
	    if (res && res.set) {
	      res.set.call(this, this, val);
	    }
	  };
	
	  /**
	   * Delete a property on the VM
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype.$delete = function (key) {
	    del(this._data, key);
	  };
	
	  /**
	   * Watch an expression, trigger callback when its
	   * value changes.
	   *
	   * @param {String|Function} expOrFn
	   * @param {Function} cb
	   * @param {Object} [options]
	   *                 - {Boolean} deep
	   *                 - {Boolean} immediate
	   * @return {Function} - unwatchFn
	   */
	
	  Vue.prototype.$watch = function (expOrFn, cb, options) {
	    var vm = this;
	    var parsed;
	    if (typeof expOrFn === 'string') {
	      parsed = parseDirective(expOrFn);
	      expOrFn = parsed.expression;
	    }
	    var watcher = new Watcher(vm, expOrFn, cb, {
	      deep: options && options.deep,
	      sync: options && options.sync,
	      filters: parsed && parsed.filters,
	      user: !options || options.user !== false
	    });
	    if (options && options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn() {
	      watcher.teardown();
	    };
	  };
	
	  /**
	   * Evaluate a text directive, including filters.
	   *
	   * @param {String} text
	   * @param {Boolean} [asStatement]
	   * @return {String}
	   */
	
	  Vue.prototype.$eval = function (text, asStatement) {
	    // check for filters.
	    if (filterRE$1.test(text)) {
	      var dir = parseDirective(text);
	      // the filter regex check might give false positive
	      // for pipes inside strings, so it's possible that
	      // we don't get any filters here
	      var val = this.$get(dir.expression, asStatement);
	      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
	    } else {
	      // no filter
	      return this.$get(text, asStatement);
	    }
	  };
	
	  /**
	   * Interpolate a piece of template text.
	   *
	   * @param {String} text
	   * @return {String}
	   */
	
	  Vue.prototype.$interpolate = function (text) {
	    var tokens = parseText(text);
	    var vm = this;
	    if (tokens) {
	      if (tokens.length === 1) {
	        return vm.$eval(tokens[0].value) + '';
	      } else {
	        return tokens.map(function (token) {
	          return token.tag ? vm.$eval(token.value) : token.value;
	        }).join('');
	      }
	    } else {
	      return text;
	    }
	  };
	
	  /**
	   * Log instance data as a plain JS object
	   * so that it is easier to inspect in console.
	   * This method assumes console is available.
	   *
	   * @param {String} [path]
	   */
	
	  Vue.prototype.$log = function (path) {
	    var data = path ? getPath(this._data, path) : this._data;
	    if (data) {
	      data = clean(data);
	    }
	    // include computed fields
	    if (!path) {
	      var key;
	      for (key in this.$options.computed) {
	        data[key] = clean(this[key]);
	      }
	      if (this._props) {
	        for (key in this._props) {
	          data[key] = clean(this[key]);
	        }
	      }
	    }
	    console.log(data);
	  };
	
	  /**
	   * "clean" a getter/setter converted object into a plain
	   * object copy.
	   *
	   * @param {Object} - obj
	   * @return {Object}
	   */
	
	  function clean(obj) {
	    return JSON.parse(JSON.stringify(obj));
	  }
	}
	
	function domAPI (Vue) {
	  /**
	   * Convenience on-instance nextTick. The callback is
	   * auto-bound to the instance, and this avoids component
	   * modules having to rely on the global Vue.
	   *
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$nextTick = function (fn) {
	    nextTick(fn, this);
	  };
	
	  /**
	   * Append instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$appendTo = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, append, appendWithTransition);
	  };
	
	  /**
	   * Prepend instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$prependTo = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.hasChildNodes()) {
	      this.$before(target.firstChild, cb, withTransition);
	    } else {
	      this.$appendTo(target, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Insert instance before target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$before = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
	  };
	
	  /**
	   * Insert instance after target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$after = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.nextSibling) {
	      this.$before(target.nextSibling, cb, withTransition);
	    } else {
	      this.$appendTo(target.parentNode, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Remove instance from DOM
	   *
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$remove = function (cb, withTransition) {
	    if (!this.$el.parentNode) {
	      return cb && cb();
	    }
	    var inDocument = this._isAttached && inDoc(this.$el);
	    // if we are not in document, no need to check
	    // for transitions
	    if (!inDocument) withTransition = false;
	    var self = this;
	    var realCb = function realCb() {
	      if (inDocument) self._callHook('detached');
	      if (cb) cb();
	    };
	    if (this._isFragment) {
	      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
	    } else {
	      var op = withTransition === false ? removeWithCb : removeWithTransition;
	      op(this.$el, this, realCb);
	    }
	    return this;
	  };
	
	  /**
	   * Shared DOM insertion function.
	   *
	   * @param {Vue} vm
	   * @param {Element} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition]
	   * @param {Function} op1 - op for non-transition insert
	   * @param {Function} op2 - op for transition insert
	   * @return vm
	   */
	
	  function insert(vm, target, cb, withTransition, op1, op2) {
	    target = query(target);
	    var targetIsDetached = !inDoc(target);
	    var op = withTransition === false || targetIsDetached ? op1 : op2;
	    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
	    if (vm._isFragment) {
	      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
	        op(node, target, vm);
	      });
	      cb && cb();
	    } else {
	      op(vm.$el, target, vm, cb);
	    }
	    if (shouldCallHook) {
	      vm._callHook('attached');
	    }
	    return vm;
	  }
	
	  /**
	   * Check for selectors
	   *
	   * @param {String|Element} el
	   */
	
	  function query(el) {
	    return typeof el === 'string' ? document.querySelector(el) : el;
	  }
	
	  /**
	   * Append operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function append(el, target, vm, cb) {
	    target.appendChild(el);
	    if (cb) cb();
	  }
	
	  /**
	   * InsertBefore operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function beforeWithCb(el, target, vm, cb) {
	    before(el, target);
	    if (cb) cb();
	  }
	
	  /**
	   * Remove operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function removeWithCb(el, vm, cb) {
	    remove(el);
	    if (cb) cb();
	  }
	}
	
	function eventsAPI (Vue) {
	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$on = function (event, fn) {
	    (this._events[event] || (this._events[event] = [])).push(fn);
	    modifyListenerCount(this, event, 1);
	    return this;
	  };
	
	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$once = function (event, fn) {
	    var self = this;
	    function on() {
	      self.$off(event, on);
	      fn.apply(this, arguments);
	    }
	    on.fn = fn;
	    this.$on(event, on);
	    return this;
	  };
	
	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$off = function (event, fn) {
	    var cbs;
	    // all
	    if (!arguments.length) {
	      if (this.$parent) {
	        for (event in this._events) {
	          cbs = this._events[event];
	          if (cbs) {
	            modifyListenerCount(this, event, -cbs.length);
	          }
	        }
	      }
	      this._events = {};
	      return this;
	    }
	    // specific event
	    cbs = this._events[event];
	    if (!cbs) {
	      return this;
	    }
	    if (arguments.length === 1) {
	      modifyListenerCount(this, event, -cbs.length);
	      this._events[event] = null;
	      return this;
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        modifyListenerCount(this, event, -1);
	        cbs.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Trigger an event on self.
	   *
	   * @param {String|Object} event
	   * @return {Boolean} shouldPropagate
	   */
	
	  Vue.prototype.$emit = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    var cbs = this._events[event];
	    var shouldPropagate = isSource || !cbs;
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      // this is a somewhat hacky solution to the question raised
	      // in #2102: for an inline component listener like <comp @test="doThis">,
	      // the propagation handling is somewhat broken. Therefore we
	      // need to treat these inline callbacks differently.
	      var hasParentCbs = isSource && cbs.some(function (cb) {
	        return cb._fromParent;
	      });
	      if (hasParentCbs) {
	        shouldPropagate = false;
	      }
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        var cb = cbs[i];
	        var res = cb.apply(this, args);
	        if (res === true && (!hasParentCbs || cb._fromParent)) {
	          shouldPropagate = true;
	        }
	      }
	    }
	    return shouldPropagate;
	  };
	
	  /**
	   * Recursively broadcast an event to all children instances.
	   *
	   * @param {String|Object} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$broadcast = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    // if no child has registered for this event,
	    // then there's no need to broadcast.
	    if (!this._eventsCount[event]) return;
	    var children = this.$children;
	    var args = toArray(arguments);
	    if (isSource) {
	      // use object event to indicate non-source emit
	      // on children
	      args[0] = { name: event, source: this };
	    }
	    for (var i = 0, l = children.length; i < l; i++) {
	      var child = children[i];
	      var shouldPropagate = child.$emit.apply(child, args);
	      if (shouldPropagate) {
	        child.$broadcast.apply(child, args);
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Recursively propagate an event up the parent chain.
	   *
	   * @param {String} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$dispatch = function (event) {
	    var shouldPropagate = this.$emit.apply(this, arguments);
	    if (!shouldPropagate) return;
	    var parent = this.$parent;
	    var args = toArray(arguments);
	    // use object event to indicate non-source emit
	    // on parents
	    args[0] = { name: event, source: this };
	    while (parent) {
	      shouldPropagate = parent.$emit.apply(parent, args);
	      parent = shouldPropagate ? parent.$parent : null;
	    }
	    return this;
	  };
	
	  /**
	   * Modify the listener counts on all parents.
	   * This bookkeeping allows $broadcast to return early when
	   * no child has listened to a certain event.
	   *
	   * @param {Vue} vm
	   * @param {String} event
	   * @param {Number} count
	   */
	
	  var hookRE = /^hook:/;
	  function modifyListenerCount(vm, event, count) {
	    var parent = vm.$parent;
	    // hooks do not get broadcasted so no need
	    // to do bookkeeping for them
	    if (!parent || !count || hookRE.test(event)) return;
	    while (parent) {
	      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
	      parent = parent.$parent;
	    }
	  }
	}
	
	function lifecycleAPI (Vue) {
	  /**
	   * Set instance target element and kick off the compilation
	   * process. The passed in `el` can be a selector string, an
	   * existing Element, or a DocumentFragment (for block
	   * instances).
	   *
	   * @param {Element|DocumentFragment|string} el
	   * @public
	   */
	
	  Vue.prototype.$mount = function (el) {
	    if (this._isCompiled) {
	      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);
	      return;
	    }
	    el = query(el);
	    if (!el) {
	      el = document.createElement('div');
	    }
	    this._compile(el);
	    this._initDOMHooks();
	    if (inDoc(this.$el)) {
	      this._callHook('attached');
	      ready.call(this);
	    } else {
	      this.$once('hook:attached', ready);
	    }
	    return this;
	  };
	
	  /**
	   * Mark an instance as ready.
	   */
	
	  function ready() {
	    this._isAttached = true;
	    this._isReady = true;
	    this._callHook('ready');
	  }
	
	  /**
	   * Teardown the instance, simply delegate to the internal
	   * _destroy.
	   *
	   * @param {Boolean} remove
	   * @param {Boolean} deferCleanup
	   */
	
	  Vue.prototype.$destroy = function (remove, deferCleanup) {
	    this._destroy(remove, deferCleanup);
	  };
	
	  /**
	   * Partially compile a piece of DOM and return a
	   * decompile function.
	   *
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host]
	   * @param {Object} [scope]
	   * @param {Fragment} [frag]
	   * @return {Function}
	   */
	
	  Vue.prototype.$compile = function (el, host, scope, frag) {
	    return compile(el, this.$options, true)(this, el, host, scope, frag);
	  };
	}
	
	/**
	 * The exposed Vue constructor.
	 *
	 * API conventions:
	 * - public API methods/properties are prefixed with `$`
	 * - internal methods/properties are prefixed with `_`
	 * - non-prefixed properties are assumed to be proxied user
	 *   data.
	 *
	 * @constructor
	 * @param {Object} [options]
	 * @public
	 */
	
	function Vue(options) {
	  this._init(options);
	}
	
	// install internals
	initMixin(Vue);
	stateMixin(Vue);
	eventsMixin(Vue);
	lifecycleMixin(Vue);
	miscMixin(Vue);
	
	// install instance APIs
	dataAPI(Vue);
	domAPI(Vue);
	eventsAPI(Vue);
	lifecycleAPI(Vue);
	
	var slot = {
	
	  priority: SLOT,
	  params: ['name'],
	
	  bind: function bind() {
	    // this was resolved during component transclusion
	    var name = this.params.name || 'default';
	    var content = this.vm._slotContents && this.vm._slotContents[name];
	    if (!content || !content.hasChildNodes()) {
	      this.fallback();
	    } else {
	      this.compile(content.cloneNode(true), this.vm._context, this.vm);
	    }
	  },
	
	  compile: function compile(content, context, host) {
	    if (content && context) {
	      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
	        // if the inserted slot has v-if
	        // inject fallback content as the v-else
	        var elseBlock = document.createElement('template');
	        elseBlock.setAttribute('v-else', '');
	        elseBlock.innerHTML = this.el.innerHTML;
	        // the else block should be compiled in child scope
	        elseBlock._context = this.vm;
	        content.appendChild(elseBlock);
	      }
	      var scope = host ? host._scope : this._scope;
	      this.unlink = context.$compile(content, host, scope, this._frag);
	    }
	    if (content) {
	      replace(this.el, content);
	    } else {
	      remove(this.el);
	    }
	  },
	
	  fallback: function fallback() {
	    this.compile(extractContent(this.el, true), this.vm);
	  },
	
	  unbind: function unbind() {
	    if (this.unlink) {
	      this.unlink();
	    }
	  }
	};
	
	var partial = {
	
	  priority: PARTIAL,
	
	  params: ['name'],
	
	  // watch changes to name for dynamic partials
	  paramWatchers: {
	    name: function name(value) {
	      vIf.remove.call(this);
	      if (value) {
	        this.insert(value);
	      }
	    }
	  },
	
	  bind: function bind() {
	    this.anchor = createAnchor('v-partial');
	    replace(this.el, this.anchor);
	    this.insert(this.params.name);
	  },
	
	  insert: function insert(id) {
	    var partial = resolveAsset(this.vm.$options, 'partials', id, true);
	    if (partial) {
	      this.factory = new FragmentFactory(this.vm, partial);
	      vIf.insert.call(this);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	  }
	};
	
	var elementDirectives = {
	  slot: slot,
	  partial: partial
	};
	
	var convertArray = vFor._postProcess;
	
	/**
	 * Limit filter for arrays
	 *
	 * @param {Number} n
	 * @param {Number} offset (Decimal expected)
	 */
	
	function limitBy(arr, n, offset) {
	  offset = offset ? parseInt(offset, 10) : 0;
	  n = toNumber(n);
	  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
	}
	
	/**
	 * Filter filter for arrays
	 *
	 * @param {String} search
	 * @param {String} [delimiter]
	 * @param {String} ...dataKeys
	 */
	
	function filterBy(arr, search, delimiter) {
	  arr = convertArray(arr);
	  if (search == null) {
	    return arr;
	  }
	  if (typeof search === 'function') {
	    return arr.filter(search);
	  }
	  // cast to lowercase string
	  search = ('' + search).toLowerCase();
	  // allow optional `in` delimiter
	  // because why not
	  var n = delimiter === 'in' ? 3 : 2;
	  // extract and flatten keys
	  var keys = Array.prototype.concat.apply([], toArray(arguments, n));
	  var res = [];
	  var item, key, val, j;
	  for (var i = 0, l = arr.length; i < l; i++) {
	    item = arr[i];
	    val = item && item.$value || item;
	    j = keys.length;
	    if (j) {
	      while (j--) {
	        key = keys[j];
	        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
	          res.push(item);
	          break;
	        }
	      }
	    } else if (contains(item, search)) {
	      res.push(item);
	    }
	  }
	  return res;
	}
	
	/**
	 * Filter filter for arrays
	 *
	 * @param {String|Array<String>|Function} ...sortKeys
	 * @param {Number} [order]
	 */
	
	function orderBy(arr) {
	  var comparator = null;
	  var sortKeys = undefined;
	  arr = convertArray(arr);
	
	  // determine order (last argument)
	  var args = toArray(arguments, 1);
	  var order = args[args.length - 1];
	  if (typeof order === 'number') {
	    order = order < 0 ? -1 : 1;
	    args = args.length > 1 ? args.slice(0, -1) : args;
	  } else {
	    order = 1;
	  }
	
	  // determine sortKeys & comparator
	  var firstArg = args[0];
	  if (!firstArg) {
	    return arr;
	  } else if (typeof firstArg === 'function') {
	    // custom comparator
	    comparator = function (a, b) {
	      return firstArg(a, b) * order;
	    };
	  } else {
	    // string keys. flatten first
	    sortKeys = Array.prototype.concat.apply([], args);
	    comparator = function (a, b, i) {
	      i = i || 0;
	      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
	    };
	  }
	
	  function baseCompare(a, b, sortKeyIndex) {
	    var sortKey = sortKeys[sortKeyIndex];
	    if (sortKey) {
	      if (sortKey !== '$key') {
	        if (isObject(a) && '$value' in a) a = a.$value;
	        if (isObject(b) && '$value' in b) b = b.$value;
	      }
	      a = isObject(a) ? getPath(a, sortKey) : a;
	      b = isObject(b) ? getPath(b, sortKey) : b;
	    }
	    return a === b ? 0 : a > b ? order : -order;
	  }
	
	  // sort on a copy to avoid mutating original array
	  return arr.slice().sort(comparator);
	}
	
	/**
	 * String contain helper
	 *
	 * @param {*} val
	 * @param {String} search
	 */
	
	function contains(val, search) {
	  var i;
	  if (isPlainObject(val)) {
	    var keys = Object.keys(val);
	    i = keys.length;
	    while (i--) {
	      if (contains(val[keys[i]], search)) {
	        return true;
	      }
	    }
	  } else if (isArray(val)) {
	    i = val.length;
	    while (i--) {
	      if (contains(val[i], search)) {
	        return true;
	      }
	    }
	  } else if (val != null) {
	    return val.toString().toLowerCase().indexOf(search) > -1;
	  }
	}
	
	var digitsRE = /(\d{3})(?=\d)/g;
	
	// asset collections must be a plain object.
	var filters = {
	
	  orderBy: orderBy,
	  filterBy: filterBy,
	  limitBy: limitBy,
	
	  /**
	   * Stringify value.
	   *
	   * @param {Number} indent
	   */
	
	  json: {
	    read: function read(value, indent) {
	      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
	    },
	    write: function write(value) {
	      try {
	        return JSON.parse(value);
	      } catch (e) {
	        return value;
	      }
	    }
	  },
	
	  /**
	   * 'abc' => 'Abc'
	   */
	
	  capitalize: function capitalize(value) {
	    if (!value && value !== 0) return '';
	    value = value.toString();
	    return value.charAt(0).toUpperCase() + value.slice(1);
	  },
	
	  /**
	   * 'abc' => 'ABC'
	   */
	
	  uppercase: function uppercase(value) {
	    return value || value === 0 ? value.toString().toUpperCase() : '';
	  },
	
	  /**
	   * 'AbC' => 'abc'
	   */
	
	  lowercase: function lowercase(value) {
	    return value || value === 0 ? value.toString().toLowerCase() : '';
	  },
	
	  /**
	   * 12345 => $12,345.00
	   *
	   * @param {String} sign
	   * @param {Number} decimals Decimal places
	   */
	
	  currency: function currency(value, _currency, decimals) {
	    value = parseFloat(value);
	    if (!isFinite(value) || !value && value !== 0) return '';
	    _currency = _currency != null ? _currency : '$';
	    decimals = decimals != null ? decimals : 2;
	    var stringified = Math.abs(value).toFixed(decimals);
	    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
	    var i = _int.length % 3;
	    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
	    var _float = decimals ? stringified.slice(-1 - decimals) : '';
	    var sign = value < 0 ? '-' : '';
	    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
	  },
	
	  /**
	   * 'item' => 'items'
	   *
	   * @params
	   *  an array of strings corresponding to
	   *  the single, double, triple ... forms of the word to
	   *  be pluralized. When the number to be pluralized
	   *  exceeds the length of the args, it will use the last
	   *  entry in the array.
	   *
	   *  e.g. ['single', 'double', 'triple', 'multiple']
	   */
	
	  pluralize: function pluralize(value) {
	    var args = toArray(arguments, 1);
	    var length = args.length;
	    if (length > 1) {
	      var index = value % 10 - 1;
	      return index in args ? args[index] : args[length - 1];
	    } else {
	      return args[0] + (value === 1 ? '' : 's');
	    }
	  },
	
	  /**
	   * Debounce a handler function.
	   *
	   * @param {Function} handler
	   * @param {Number} delay = 300
	   * @return {Function}
	   */
	
	  debounce: function debounce(handler, delay) {
	    if (!handler) return;
	    if (!delay) {
	      delay = 300;
	    }
	    return _debounce(handler, delay);
	  }
	};
	
	function installGlobalAPI (Vue) {
	  /**
	   * Vue and every constructor that extends Vue has an
	   * associated options object, which can be accessed during
	   * compilation steps as `this.constructor.options`.
	   *
	   * These can be seen as the default options of every
	   * Vue instance.
	   */
	
	  Vue.options = {
	    directives: directives,
	    elementDirectives: elementDirectives,
	    filters: filters,
	    transitions: {},
	    components: {},
	    partials: {},
	    replace: true
	  };
	
	  /**
	   * Expose useful internals
	   */
	
	  Vue.util = util;
	  Vue.config = config;
	  Vue.set = set;
	  Vue['delete'] = del;
	  Vue.nextTick = nextTick;
	
	  /**
	   * The following are exposed for advanced usage / plugins
	   */
	
	  Vue.compiler = compiler;
	  Vue.FragmentFactory = FragmentFactory;
	  Vue.internalDirectives = internalDirectives;
	  Vue.parsers = {
	    path: path,
	    text: text,
	    template: template,
	    directive: directive,
	    expression: expression
	  };
	
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	
	  Vue.cid = 0;
	  var cid = 1;
	
	  /**
	   * Class inheritance
	   *
	   * @param {Object} extendOptions
	   */
	
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var isFirstExtend = Super.cid === 0;
	    if (isFirstExtend && extendOptions._Ctor) {
	      return extendOptions._Ctor;
	    }
	    var name = extendOptions.name || Super.options.name;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
	        name = null;
	      }
	    }
	    var Sub = createClass(name || 'VueComponent');
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(Super.options, extendOptions);
	    Sub['super'] = Super;
	    // allow further extension
	    Sub.extend = Super.extend;
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	    // cache constructor
	    if (isFirstExtend) {
	      extendOptions._Ctor = Sub;
	    }
	    return Sub;
	  };
	
	  /**
	   * A function that returns a sub-class constructor with the
	   * given name. This gives us much nicer output when
	   * logging instances in the console.
	   *
	   * @param {String} name
	   * @return {Function}
	   */
	
	  function createClass(name) {
	    /* eslint-disable no-new-func */
	    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
	    /* eslint-enable no-new-func */
	  }
	
	  /**
	   * Plugin system
	   *
	   * @param {Object} plugin
	   */
	
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return;
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this;
	  };
	
	  /**
	   * Apply a global mixin by merging it into the default
	   * options.
	   */
	
	  Vue.mixin = function (mixin) {
	    Vue.options = mergeOptions(Vue.options, mixin);
	  };
	
	  /**
	   * Create asset registration methods with the following
	   * signature:
	   *
	   * @param {String} id
	   * @param {*} definition
	   */
	
	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (id, definition) {
	      if (!definition) {
	        return this.options[type + 's'][id];
	      } else {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
	            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          if (!definition.name) {
	            definition.name = id;
	          }
	          definition = Vue.extend(definition);
	        }
	        this.options[type + 's'][id] = definition;
	        return definition;
	      }
	    };
	  });
	
	  // expose internal transition API
	  extend(Vue.transition, transition);
	}
	
	installGlobalAPI(Vue);
	
	Vue.version = '1.0.26';
	
	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue);
	    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
	      console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
	    }
	  }
	}, 0);
	
	module.exports = Vue;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Keen UI v0.8.9 (https://github.com/JosephusPaye/keen-ui)
	 * (c) 2016 Josephus Paye II
	 * Released under the MIT License.
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Keen"] = factory();
		else
			root["Keen"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		__webpack_require__(1);
		
		var _UiAlert = __webpack_require__(2);
		
		var _UiAlert2 = _interopRequireDefault(_UiAlert);
		
		var _UiAutocomplete = __webpack_require__(81);
		
		var _UiAutocomplete2 = _interopRequireDefault(_UiAutocomplete);
		
		var _UiButton = __webpack_require__(109);
		
		var _UiButton2 = _interopRequireDefault(_UiButton);
		
		var _UiCheckbox = __webpack_require__(113);
		
		var _UiCheckbox2 = _interopRequireDefault(_UiCheckbox);
		
		var _UiCollapsible = __webpack_require__(117);
		
		var _UiCollapsible2 = _interopRequireDefault(_UiCollapsible);
		
		var _UiConfirm = __webpack_require__(121);
		
		var _UiConfirm2 = _interopRequireDefault(_UiConfirm);
		
		var _UiFab = __webpack_require__(129);
		
		var _UiFab2 = _interopRequireDefault(_UiFab);
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiIconButton = __webpack_require__(10);
		
		var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
		
		var _UiMenu = __webpack_require__(13);
		
		var _UiMenu2 = _interopRequireDefault(_UiMenu);
		
		var _UiMenuOption = __webpack_require__(16);
		
		var _UiMenuOption2 = _interopRequireDefault(_UiMenuOption);
		
		var _UiModal = __webpack_require__(124);
		
		var _UiModal2 = _interopRequireDefault(_UiModal);
		
		var _UiPopover = __webpack_require__(63);
		
		var _UiPopover2 = _interopRequireDefault(_UiPopover);
		
		var _UiPreloader = __webpack_require__(133);
		
		var _UiPreloader2 = _interopRequireDefault(_UiPreloader);
		
		var _UiProgressCircular = __webpack_require__(67);
		
		var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
		
		var _UiProgressLinear = __webpack_require__(137);
		
		var _UiProgressLinear2 = _interopRequireDefault(_UiProgressLinear);
		
		var _UiRadio = __webpack_require__(141);
		
		var _UiRadio2 = _interopRequireDefault(_UiRadio);
		
		var _UiRadioGroup = __webpack_require__(145);
		
		var _UiRadioGroup2 = _interopRequireDefault(_UiRadioGroup);
		
		var _UiRating = __webpack_require__(149);
		
		var _UiRating2 = _interopRequireDefault(_UiRating);
		
		var _UiRatingIcon = __webpack_require__(152);
		
		var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
		
		var _UiRatingPreview = __webpack_require__(157);
		
		var _UiRatingPreview2 = _interopRequireDefault(_UiRatingPreview);
		
		var _UiRippleInk = __webpack_require__(20);
		
		var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
		
		var _UiSelect = __webpack_require__(161);
		
		var _UiSelect2 = _interopRequireDefault(_UiSelect);
		
		var _UiSlider = __webpack_require__(172);
		
		var _UiSlider2 = _interopRequireDefault(_UiSlider);
		
		var _UiSnackbar = __webpack_require__(184);
		
		var _UiSnackbar2 = _interopRequireDefault(_UiSnackbar);
		
		var _UiSnackbarContainer = __webpack_require__(188);
		
		var _UiSnackbarContainer2 = _interopRequireDefault(_UiSnackbarContainer);
		
		var _UiSwitch = __webpack_require__(192);
		
		var _UiSwitch2 = _interopRequireDefault(_UiSwitch);
		
		var _UiTab = __webpack_require__(196);
		
		var _UiTab2 = _interopRequireDefault(_UiTab);
		
		var _UiTabs = __webpack_require__(200);
		
		var _UiTabs2 = _interopRequireDefault(_UiTabs);
		
		var _UiTextbox = __webpack_require__(208);
		
		var _UiTextbox2 = _interopRequireDefault(_UiTextbox);
		
		var _UiToolbar = __webpack_require__(212);
		
		var _UiToolbar2 = _interopRequireDefault(_UiToolbar);
		
		var _UiTooltip = __webpack_require__(74);
		
		var _UiTooltip2 = _interopRequireDefault(_UiTooltip);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var Keen = {
		    UiAlert: _UiAlert2.default,
		    UiAutocomplete: _UiAutocomplete2.default,
		    UiButton: _UiButton2.default,
		    UiCheckbox: _UiCheckbox2.default,
		    UiCollapsible: _UiCollapsible2.default,
		    UiConfirm: _UiConfirm2.default,
		    UiFab: _UiFab2.default,
		    UiIcon: _UiIcon2.default,
		    UiIconButton: _UiIconButton2.default,
		    UiMenu: _UiMenu2.default,
		    UiMenuOption: _UiMenuOption2.default,
		    UiModal: _UiModal2.default,
		    UiPopover: _UiPopover2.default,
		    UiPreloader: _UiPreloader2.default,
		    UiProgressCircular: _UiProgressCircular2.default,
		    UiProgressLinear: _UiProgressLinear2.default,
		    UiRadio: _UiRadio2.default,
		    UiRadioGroup: _UiRadioGroup2.default,
		    UiRating: _UiRating2.default,
		    UiRatingIcon: _UiRatingIcon2.default,
		    UiRatingPreview: _UiRatingPreview2.default,
		    UiRippleInk: _UiRippleInk2.default,
		    UiSelect: _UiSelect2.default,
		    UiSlider: _UiSlider2.default,
		    UiSnackbar: _UiSnackbar2.default,
		    UiSnackbarContainer: _UiSnackbarContainer2.default,
		    UiSwitch: _UiSwitch2.default,
		    UiTab: _UiTab2.default,
		    UiTabs: _UiTabs2.default,
		    UiTextbox: _UiTextbox2.default,
		    UiToolbar: _UiToolbar2.default,
		    UiTooltip: _UiTooltip2.default,
		
		    install: function install(Vue) {
		        Vue.component('ui-alert', _UiAlert2.default);
		        Vue.component('ui-autocomplete', _UiAutocomplete2.default);
		        Vue.component('ui-button', _UiButton2.default);
		        Vue.component('ui-checkbox', _UiCheckbox2.default);
		        Vue.component('ui-collapsible', _UiCollapsible2.default);
		        Vue.component('ui-confirm', _UiConfirm2.default);
		        Vue.component('ui-fab', _UiFab2.default);
		        Vue.component('ui-icon', _UiIcon2.default);
		        Vue.component('ui-icon-button', _UiIconButton2.default);
		        Vue.component('ui-menu', _UiMenu2.default);
		        Vue.component('ui-menu-option', _UiMenuOption2.default);
		        Vue.component('ui-modal', _UiModal2.default);
		        Vue.component('ui-popover', _UiPopover2.default);
		        Vue.component('ui-preloader', _UiPreloader2.default);
		        Vue.component('ui-progress-circular', _UiProgressCircular2.default);
		        Vue.component('ui-progress-linear', _UiProgressLinear2.default);
		        Vue.component('ui-radio', _UiRadio2.default);
		        Vue.component('ui-radio-group', _UiRadioGroup2.default);
		        Vue.component('ui-rating', _UiRating2.default);
		        Vue.component('ui-rating-icon', _UiRatingIcon2.default);
		        Vue.component('ui-rating-preview', _UiRatingPreview2.default);
		        Vue.component('ui-ripple-ink', _UiRippleInk2.default);
		        Vue.component('ui-select', _UiSelect2.default);
		        Vue.component('ui-slider', _UiSlider2.default);
		        Vue.component('ui-snackbar', _UiSnackbar2.default);
		        Vue.component('ui-snackbar-container', _UiSnackbarContainer2.default);
		        Vue.component('ui-switch', _UiSwitch2.default);
		        Vue.component('ui-tab', _UiTab2.default);
		        Vue.component('ui-tabs', _UiTabs2.default);
		        Vue.component('ui-textbox', _UiTextbox2.default);
		        Vue.component('ui-toolbar', _UiToolbar2.default);
		        Vue.component('ui-tooltip', _UiTooltip2.default);
		    }
		};
		
		module.exports = Keen;
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		'use strict';
		
		document.addEventListener('DOMContentLoaded', function () {
		    var hadKeyboardEvent = false;
		    var keyboardModalityWhitelist = ['input:not([type])', 'input[type=text]', 'input[type=number]', 'input[type=date]', 'input[type=time]', 'input[type=datetime]', 'textarea', '[role=textbox]', '[supports-modality=keyboard]'].join(',');
		
		    var isHandlingKeyboardThrottle;
		
		    var matcher = function () {
		        var el = document.body;
		
		        if (el.matchesSelector) {
		            return el.matchesSelector;
		        }
		
		        if (el.webkitMatchesSelector) {
		            return el.webkitMatchesSelector;
		        }
		
		        if (el.mozMatchesSelector) {
		            return el.mozMatchesSelector;
		        }
		
		        if (el.msMatchesSelector) {
		            return el.msMatchesSelector;
		        }
		
		        console.error('Couldn\'t find any matchesSelector method on document.body.');
		    }();
		
		    var disableFocusRingByDefault = function disableFocusRingByDefault() {
		        var css = 'body:not([modality=keyboard]) :focus { outline: none; }';
		        var head = document.head || document.getElementsByTagName('head')[0];
		        var style = document.createElement('style');
		
		        style.type = 'text/css';
		        style.id = 'disable-focus-ring';
		
		        if (style.styleSheet) {
		            style.styleSheet.cssText = css;
		        } else {
		            style.appendChild(document.createTextNode(css));
		        }
		
		        head.insertBefore(style, head.firstChild);
		    };
		
		    var focusTriggersKeyboardModality = function focusTriggersKeyboardModality(el) {
		        var triggers = false;
		
		        if (matcher) {
		            triggers = matcher.call(el, keyboardModalityWhitelist) && matcher.call(el, ':not([readonly])');
		        }
		
		        return triggers;
		    };
		
		    disableFocusRingByDefault();
		
		    document.body.addEventListener('keydown', function () {
		        hadKeyboardEvent = true;
		
		        if (isHandlingKeyboardThrottle) {
		            clearTimeout(isHandlingKeyboardThrottle);
		        }
		
		        isHandlingKeyboardThrottle = setTimeout(function () {
		            hadKeyboardEvent = false;
		        }, 100);
		    }, true);
		
		    document.body.addEventListener('focus', function (e) {
		        if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
		            document.body.setAttribute('modality', 'keyboard');
		        }
		    }, true);
		
		    document.body.addEventListener('blur', function () {
		        document.body.removeAttribute('modality');
		    }, true);
		});
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(3)
		__vue_script__ = __webpack_require__(5)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiAlert.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(80)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiAlert.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 4 */,
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiIconButton = __webpack_require__(10);
		
		var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-alert',
		
		    props: {
		        show: {
		            type: Boolean,
		            default: true
		        },
		        type: {
		            type: String,
		            default: 'info' },
		        text: String,
		        icon: String,
		        hideIcon: {
		            type: Boolean,
		            default: false
		        },
		        dismissible: {
		            type: Boolean,
		            default: true
		        }
		    },
		
		    computed: {
		        iconName: function iconName() {
		            if (this.icon) {
		                return this.icon;
		            }
		
		            var icon = this.type;
		
		            if (icon === 'success') {
		                icon = 'check_circle';
		            }
		
		            return icon;
		        }
		    },
		
		    methods: {
		        close: function close() {
		            this.show = false;
		            this.$dispatch('dismissed');
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default,
		        UiIconButton: _UiIconButton2.default
		    }
		};
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(7)
		__vue_script__ = __webpack_require__(8)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiIcon.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(9)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiIcon.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    name: 'ui-icon',
		
		    props: {
		        icon: {
		            type: String,
		            required: true
		        },
		        removeText: {
		            type: Boolean,
		            default: false
		        }
		    }
		};
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		module.exports = "\n<i\n    class=\"ui-icon material-icons\" :class=\"[icon]\" v-text=\"removeText ? null : icon\"\n    aria-hidden=\"true\"\n></i>\n";
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(11)
		__vue_script__ = __webpack_require__(12)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiIconButton.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(79)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiIconButton.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 11 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiMenu = __webpack_require__(13);
		
		var _UiMenu2 = _interopRequireDefault(_UiMenu);
		
		var _UiPopover = __webpack_require__(63);
		
		var _UiPopover2 = _interopRequireDefault(_UiPopover);
		
		var _UiProgressCircular = __webpack_require__(67);
		
		var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _HasDropdown = __webpack_require__(72);
		
		var _HasDropdown2 = _interopRequireDefault(_HasDropdown);
		
		var _ShowsTooltip = __webpack_require__(73);
		
		var _ShowsTooltip2 = _interopRequireDefault(_ShowsTooltip);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-icon-button',
		
		    props: {
		        type: {
		            type: String,
		            default: 'normal', coerce: function coerce(type) {
		                return 'ui-icon-button-' + type;
		            }
		        },
		        buttonType: {
		            type: String,
		            default: 'button'
		        },
		        color: {
		            type: String,
		            default: 'default', coerce: function coerce(color) {
		                return 'color-' + color;
		            }
		        },
		        icon: {
		            type: String,
		            required: true
		        },
		        ariaLabel: String,
		        loading: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        styleClasses: function styleClasses() {
		            var classes = [this.type, this.color];
		
		            if (this.hasDropdown) {
		                classes.push('ui-dropdown');
		            }
		
		            return classes;
		        },
		        spinnerColor: function spinnerColor() {
		            if (this.color === 'color-default' || this.color === 'color-black') {
		                return 'black';
		            }
		
		            return 'white';
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default,
		        UiMenu: _UiMenu2.default,
		        UiPopover: _UiPopover2.default,
		        UiProgressCircular: _UiProgressCircular2.default
		    },
		
		    mixins: [_HasDropdown2.default, _ShowsTooltip2.default, _ShowsRippleInk2.default],
		
		    directives: {
		        disabled: _disabled2.default
		    }
		};
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(14)
		__vue_script__ = __webpack_require__(15)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiMenu.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(62)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiMenu.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiMenuOption = __webpack_require__(16);
		
		var _UiMenuOption2 = _interopRequireDefault(_UiMenuOption);
		
		var _ShowsDropdown = __webpack_require__(58);
		
		var _ShowsDropdown2 = _interopRequireDefault(_ShowsDropdown);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-menu',
		
		    props: {
		        options: {
		            type: Array,
		            required: true,
		            default: function _default() {
		                return [];
		            }
		        },
		        showIcons: {
		            type: Boolean,
		            default: false
		        },
		        showSecondaryText: {
		            type: Boolean,
		            default: false
		        },
		        hideRippleInk: {
		            type: Boolean,
		            default: false
		        },
		        closeOnSelect: {
		            type: Boolean,
		            default: true
		        },
		        partial: {
		            type: String,
		            default: 'ui-menu-default'
		        }
		    },
		
		    events: {
		        'dropdown-opened': function dropdownOpened() {
		            if (this.containFocus) {
		                document.addEventListener('focus', this.restrictFocus, true);
		            }
		
		            this.$dispatch('opened');
		
		            return true;
		        },
		
		        'dropdown-closed': function dropdownClosed() {
		            if (this.containFocus) {
		                document.removeEventListener('focus', this.restrictFocus, true);
		            }
		
		            this.$dispatch('closed');
		
		            return true;
		        }
		    },
		
		    methods: {
		        optionSelect: function optionSelect(option) {
		            if (!(option.disabled || option.type === 'divider')) {
		                this.$dispatch('option-selected', option);
		
		                if (this.closeOnSelect) {
		                    this.closeDropdown();
		                }
		            }
		        },
		        restrictFocus: function restrictFocus(e) {
		            if (!this.$els.dropdown.contains(e.target)) {
		                e.stopPropagation();
		
		                this.$els.dropdown.querySelector('.ui-menu-option').focus();
		            }
		        },
		        redirectFocus: function redirectFocus(e) {
		            e.stopPropagation();
		
		            this.$els.dropdown.querySelector('.ui-menu-option').focus();
		        }
		    },
		
		    components: {
		        UiMenuOption: _UiMenuOption2.default
		    },
		
		    mixins: [_ShowsDropdown2.default]
		};
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(17)
		__vue_script__ = __webpack_require__(18)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiMenuOption.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(57)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiMenuOption.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-menu-option',
		
		    props: {
		        type: String,
		        text: String,
		        icon: String,
		        showIcon: {
		            type: Boolean,
		            default: false
		        },
		        secondaryText: String,
		        showSecondaryText: {
		            type: Boolean,
		            default: false
		        },
		        partial: {
		            type: String,
		            default: 'ui-menu-default'
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        },
		        option: Object
		    },
		
		    computed: {
		        isDivider: function isDivider() {
		            return this.type === 'divider';
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    partials: {
		        'ui-menu-default': '\n            <ui-icon\n                class="ui-menu-option-icon" :icon="icon" v-if="showIcon && !isDivider && icon"\n            ></ui-icon>\n\n            <div class="ui-menu-option-text" v-text="text" v-if="!isDivider"></div>\n\n            <div\n                class="ui-menu-option-secondary-text" v-text="secondaryText"\n                v-if="showSecondaryText && !isDivider && secondaryText"\n            ></div>\n        '
		    },
		
		    mixins: [_ShowsRippleInk2.default]
		};
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiRippleInk = __webpack_require__(20);
		
		var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    props: {
		        hideRippleInk: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    components: {
		        UiRippleInk: _UiRippleInk2.default
		    }
		};
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(21)
		__vue_script__ = __webpack_require__(22)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRippleInk.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(56)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRippleInk.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _classlist = __webpack_require__(23);
		
		var _classlist2 = _interopRequireDefault(_classlist);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var startRipple = function startRipple(eventType, event) {
		    var holder = event.currentTarget;
		
		    if (!_classlist2.default.has(holder, 'ui-ripple-ink')) {
		        holder = holder.querySelector('.ui-ripple-ink');
		
		        if (!holder) {
		            return;
		        }
		    }
		
		    var prev = holder.getAttribute('data-ui-event');
		
		    if (prev && prev !== eventType) {
		        return;
		    }
		
		    holder.setAttribute('data-ui-event', eventType);
		
		    var rect = holder.getBoundingClientRect();
		    var x = event.offsetX;
		    var y;
		
		    if (x !== undefined) {
		        y = event.offsetY;
		    } else {
		        x = event.clientX - rect.left;
		        y = event.clientY - rect.top;
		    }
		
		    var ripple = document.createElement('div');
		    var max;
		
		    if (rect.width === rect.height) {
		        max = rect.width * 1.412;
		    } else {
		        max = Math.sqrt(rect.width * rect.width + rect.height * rect.height);
		    }
		
		    var dim = max * 2 + 'px';
		
		    ripple.style.width = dim;
		    ripple.style.height = dim;
		    ripple.style.marginLeft = -max + x + 'px';
		    ripple.style.marginTop = -max + y + 'px';
		
		    ripple.className = 'ripple';
		    holder.appendChild(ripple);
		
		    setTimeout(function () {
		        _classlist2.default.add(ripple, 'held');
		    }, 0);
		
		    var releaseEvent = eventType === 'mousedown' ? 'mouseup' : 'touchend';
		
		    var release = function release() {
		        document.removeEventListener(releaseEvent, release);
		
		        _classlist2.default.add(ripple, 'done');
		
		        setTimeout(function () {
		            holder.removeChild(ripple);
		
		            if (!holder.children.length) {
		                _classlist2.default.remove(holder, 'active');
		                holder.removeAttribute('data-ui-event');
		            }
		        }, 450);
		    };
		
		    document.addEventListener(releaseEvent, release);
		};
		
		var handleMouseDown = function handleMouseDown(e) {
		    if (e.button === 0) {
		        startRipple(e.type, e);
		    }
		};
		
		var handleTouchStart = function handleTouchStart(e) {
		    if (e.changedTouches) {
		        for (var i = 0; i < e.changedTouches.length; ++i) {
		            startRipple(e.type, e.changedTouches[i]);
		        }
		    }
		};
		
		exports.default = {
		    name: 'ui-ripple-ink',
		
		    props: {
		        trigger: {
		            type: Element,
		            required: true
		        }
		    },
		
		    watch: {
		        trigger: function trigger() {
		            this.initialize();
		        }
		    },
		
		    ready: function ready() {
		        this.initialize();
		    },
		    beforeDestory: function beforeDestory() {
		        if (this.trigger) {
		            this.trigger.removeEventListener('mousedown', handleMouseDown);
		            this.trigger.removeEventListener('touchstart', handleTouchStart);
		        }
		    },
		
		
		    methods: {
		        initialize: function initialize() {
		            if (this.trigger) {
		                this.trigger.addEventListener('touchstart', handleTouchStart);
		                this.trigger.addEventListener('mousedown', handleMouseDown);
		            }
		        }
		    }
		};
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _typeof2 = __webpack_require__(24);
		
		var _typeof3 = _interopRequireDefault(_typeof2);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		var trim = /^\s+|\s+$/g;
		var whitespace = /\s+/g;
		
		function interpret(input) {
		    return typeof input === 'string' ? input.replace(trim, '').split(whitespace) : input;
		}
		
		function classes(el) {
		    if (isElement(el)) {
		        return el.className.replace(trim, '').split(whitespace);
		    }
		
		    return [];
		}
		
		function set(el, input) {
		    if (isElement(el)) {
		        el.className = interpret(input).join(' ');
		    }
		}
		
		function add(el, input) {
		    var current = remove(el, input);
		    var values = interpret(input);
		
		    current.push.apply(current, values);
		    set(el, current);
		
		    return current;
		}
		
		function remove(el, input) {
		    var current = classes(el);
		    var values = interpret(input);
		
		    values.forEach(function (value) {
		        var i = current.indexOf(value);
		        if (i !== -1) {
		            current.splice(i, 1);
		        }
		    });
		
		    set(el, current);
		
		    return current;
		}
		
		function contains(el, input) {
		    var current = classes(el);
		    var values = interpret(input);
		
		    return values.every(function (value) {
		        return current.indexOf(value) !== -1;
		    });
		}
		
		function isElement(o) {
		    var elementObjects = (typeof HTMLElement === 'undefined' ? 'undefined' : (0, _typeof3.default)(HTMLElement)) === 'object';
		
		    return elementObjects ? o instanceof HTMLElement : isElementObject(o);
		}
		
		function isElementObject(o) {
		    return o && (typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object' && typeof o.nodeName === 'string' && o.nodeType === 1;
		}
		
		exports.default = {
		    add: add,
		    remove: remove,
		    contains: contains,
		    has: contains,
		    set: set,
		    get: classes
		};
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		var _Symbol = __webpack_require__(25)["default"];
		
		exports["default"] = function (obj) {
		  return obj && obj.constructor === _Symbol ? "symbol" : typeof obj;
		};
		
		exports.__esModule = true;
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = { "default": __webpack_require__(26), __esModule: true };
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		__webpack_require__(27);
		__webpack_require__(55);
		module.exports = __webpack_require__(34).Symbol;
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		// ECMAScript 6 symbols shim
		var $              = __webpack_require__(28)
		  , global         = __webpack_require__(29)
		  , has            = __webpack_require__(30)
		  , DESCRIPTORS    = __webpack_require__(31)
		  , $export        = __webpack_require__(33)
		  , redefine       = __webpack_require__(37)
		  , $fails         = __webpack_require__(32)
		  , shared         = __webpack_require__(40)
		  , setToStringTag = __webpack_require__(41)
		  , uid            = __webpack_require__(43)
		  , wks            = __webpack_require__(42)
		  , keyOf          = __webpack_require__(44)
		  , $names         = __webpack_require__(49)
		  , enumKeys       = __webpack_require__(50)
		  , isArray        = __webpack_require__(51)
		  , anObject       = __webpack_require__(52)
		  , toIObject      = __webpack_require__(45)
		  , createDesc     = __webpack_require__(39)
		  , getDesc        = $.getDesc
		  , setDesc        = $.setDesc
		  , _create        = $.create
		  , getNames       = $names.get
		  , $Symbol        = global.Symbol
		  , $JSON          = global.JSON
		  , _stringify     = $JSON && $JSON.stringify
		  , setter         = false
		  , HIDDEN         = wks('_hidden')
		  , isEnum         = $.isEnum
		  , SymbolRegistry = shared('symbol-registry')
		  , AllSymbols     = shared('symbols')
		  , useNative      = typeof $Symbol == 'function'
		  , ObjectProto    = Object.prototype;
		
		// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
		var setSymbolDesc = DESCRIPTORS && $fails(function(){
		  return _create(setDesc({}, 'a', {
		    get: function(){ return setDesc(this, 'a', {value: 7}).a; }
		  })).a != 7;
		}) ? function(it, key, D){
		  var protoDesc = getDesc(ObjectProto, key);
		  if(protoDesc)delete ObjectProto[key];
		  setDesc(it, key, D);
		  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
		} : setDesc;
		
		var wrap = function(tag){
		  var sym = AllSymbols[tag] = _create($Symbol.prototype);
		  sym._k = tag;
		  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
		    configurable: true,
		    set: function(value){
		      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
		      setSymbolDesc(this, tag, createDesc(1, value));
		    }
		  });
		  return sym;
		};
		
		var isSymbol = function(it){
		  return typeof it == 'symbol';
		};
		
		var $defineProperty = function defineProperty(it, key, D){
		  if(D && has(AllSymbols, key)){
		    if(!D.enumerable){
		      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
		      it[HIDDEN][key] = true;
		    } else {
		      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
		      D = _create(D, {enumerable: createDesc(0, false)});
		    } return setSymbolDesc(it, key, D);
		  } return setDesc(it, key, D);
		};
		var $defineProperties = function defineProperties(it, P){
		  anObject(it);
		  var keys = enumKeys(P = toIObject(P))
		    , i    = 0
		    , l = keys.length
		    , key;
		  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
		  return it;
		};
		var $create = function create(it, P){
		  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
		};
		var $propertyIsEnumerable = function propertyIsEnumerable(key){
		  var E = isEnum.call(this, key);
		  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
		    ? E : true;
		};
		var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
		  var D = getDesc(it = toIObject(it), key);
		  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
		  return D;
		};
		var $getOwnPropertyNames = function getOwnPropertyNames(it){
		  var names  = getNames(toIObject(it))
		    , result = []
		    , i      = 0
		    , key;
		  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
		  return result;
		};
		var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
		  var names  = getNames(toIObject(it))
		    , result = []
		    , i      = 0
		    , key;
		  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
		  return result;
		};
		var $stringify = function stringify(it){
		  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
		  var args = [it]
		    , i    = 1
		    , $$   = arguments
		    , replacer, $replacer;
		  while($$.length > i)args.push($$[i++]);
		  replacer = args[1];
		  if(typeof replacer == 'function')$replacer = replacer;
		  if($replacer || !isArray(replacer))replacer = function(key, value){
		    if($replacer)value = $replacer.call(this, key, value);
		    if(!isSymbol(value))return value;
		  };
		  args[1] = replacer;
		  return _stringify.apply($JSON, args);
		};
		var buggyJSON = $fails(function(){
		  var S = $Symbol();
		  // MS Edge converts symbol values to JSON as {}
		  // WebKit converts symbol values to JSON as null
		  // V8 throws on boxed symbols
		  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
		});
		
		// 19.4.1.1 Symbol([description])
		if(!useNative){
		  $Symbol = function Symbol(){
		    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
		    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
		  };
		  redefine($Symbol.prototype, 'toString', function toString(){
		    return this._k;
		  });
		
		  isSymbol = function(it){
		    return it instanceof $Symbol;
		  };
		
		  $.create     = $create;
		  $.isEnum     = $propertyIsEnumerable;
		  $.getDesc    = $getOwnPropertyDescriptor;
		  $.setDesc    = $defineProperty;
		  $.setDescs   = $defineProperties;
		  $.getNames   = $names.get = $getOwnPropertyNames;
		  $.getSymbols = $getOwnPropertySymbols;
		
		  if(DESCRIPTORS && !__webpack_require__(54)){
		    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
		  }
		}
		
		var symbolStatics = {
		  // 19.4.2.1 Symbol.for(key)
		  'for': function(key){
		    return has(SymbolRegistry, key += '')
		      ? SymbolRegistry[key]
		      : SymbolRegistry[key] = $Symbol(key);
		  },
		  // 19.4.2.5 Symbol.keyFor(sym)
		  keyFor: function keyFor(key){
		    return keyOf(SymbolRegistry, key);
		  },
		  useSetter: function(){ setter = true; },
		  useSimple: function(){ setter = false; }
		};
		// 19.4.2.2 Symbol.hasInstance
		// 19.4.2.3 Symbol.isConcatSpreadable
		// 19.4.2.4 Symbol.iterator
		// 19.4.2.6 Symbol.match
		// 19.4.2.8 Symbol.replace
		// 19.4.2.9 Symbol.search
		// 19.4.2.10 Symbol.species
		// 19.4.2.11 Symbol.split
		// 19.4.2.12 Symbol.toPrimitive
		// 19.4.2.13 Symbol.toStringTag
		// 19.4.2.14 Symbol.unscopables
		$.each.call((
		  'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
		  'species,split,toPrimitive,toStringTag,unscopables'
		).split(','), function(it){
		  var sym = wks(it);
		  symbolStatics[it] = useNative ? sym : wrap(sym);
		});
		
		setter = true;
		
		$export($export.G + $export.W, {Symbol: $Symbol});
		
		$export($export.S, 'Symbol', symbolStatics);
		
		$export($export.S + $export.F * !useNative, 'Object', {
		  // 19.1.2.2 Object.create(O [, Properties])
		  create: $create,
		  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
		  defineProperty: $defineProperty,
		  // 19.1.2.3 Object.defineProperties(O, Properties)
		  defineProperties: $defineProperties,
		  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
		  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
		  // 19.1.2.7 Object.getOwnPropertyNames(O)
		  getOwnPropertyNames: $getOwnPropertyNames,
		  // 19.1.2.8 Object.getOwnPropertySymbols(O)
		  getOwnPropertySymbols: $getOwnPropertySymbols
		});
		
		// 24.3.2 JSON.stringify(value [, replacer [, space]])
		$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});
		
		// 19.4.3.5 Symbol.prototype[@@toStringTag]
		setToStringTag($Symbol, 'Symbol');
		// 20.2.1.9 Math[@@toStringTag]
		setToStringTag(Math, 'Math', true);
		// 24.3.3 JSON[@@toStringTag]
		setToStringTag(global.JSON, 'JSON', true);
	
	/***/ },
	/* 28 */
	/***/ function(module, exports) {
	
		var $Object = Object;
		module.exports = {
		  create:     $Object.create,
		  getProto:   $Object.getPrototypeOf,
		  isEnum:     {}.propertyIsEnumerable,
		  getDesc:    $Object.getOwnPropertyDescriptor,
		  setDesc:    $Object.defineProperty,
		  setDescs:   $Object.defineProperties,
		  getKeys:    $Object.keys,
		  getNames:   $Object.getOwnPropertyNames,
		  getSymbols: $Object.getOwnPropertySymbols,
		  each:       [].forEach
		};
	
	/***/ },
	/* 29 */
	/***/ function(module, exports) {
	
		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ },
	/* 30 */
	/***/ function(module, exports) {
	
		var hasOwnProperty = {}.hasOwnProperty;
		module.exports = function(it, key){
		  return hasOwnProperty.call(it, key);
		};
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Thank's IE8 for his funny defineProperty
		module.exports = !__webpack_require__(32)(function(){
		  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
		});
	
	/***/ },
	/* 32 */
	/***/ function(module, exports) {
	
		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};
	
	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global    = __webpack_require__(29)
		  , core      = __webpack_require__(34)
		  , ctx       = __webpack_require__(35)
		  , PROTOTYPE = 'prototype';
		
		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && key in target;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(param){
		        return this instanceof C ? new C(param) : C(param);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
		  }
		};
		// type bitmap
		$export.F = 1;  // forced
		$export.G = 2;  // global
		$export.S = 4;  // static
		$export.P = 8;  // proto
		$export.B = 16; // bind
		$export.W = 32; // wrap
		module.exports = $export;
	
	/***/ },
	/* 34 */
	/***/ function(module, exports) {
	
		var core = module.exports = {version: '1.2.6'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {
	
		// optional / simple context binding
		var aFunction = __webpack_require__(36);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};
	
	/***/ },
	/* 36 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(38);
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $          = __webpack_require__(28)
		  , createDesc = __webpack_require__(39);
		module.exports = __webpack_require__(31) ? function(object, key, value){
		  return $.setDesc(object, key, createDesc(1, value));
		} : function(object, key, value){
		  object[key] = value;
		  return object;
		};
	
	/***/ },
	/* 39 */
	/***/ function(module, exports) {
	
		module.exports = function(bitmap, value){
		  return {
		    enumerable  : !(bitmap & 1),
		    configurable: !(bitmap & 2),
		    writable    : !(bitmap & 4),
		    value       : value
		  };
		};
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		var global = __webpack_require__(29)
		  , SHARED = '__core-js_shared__'
		  , store  = global[SHARED] || (global[SHARED] = {});
		module.exports = function(key){
		  return store[key] || (store[key] = {});
		};
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		var def = __webpack_require__(28).setDesc
		  , has = __webpack_require__(30)
		  , TAG = __webpack_require__(42)('toStringTag');
		
		module.exports = function(it, tag, stat){
		  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
		};
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		var store  = __webpack_require__(40)('wks')
		  , uid    = __webpack_require__(43)
		  , Symbol = __webpack_require__(29).Symbol;
		module.exports = function(name){
		  return store[name] || (store[name] =
		    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
		};
	
	/***/ },
	/* 43 */
	/***/ function(module, exports) {
	
		var id = 0
		  , px = Math.random();
		module.exports = function(key){
		  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
		};
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		var $         = __webpack_require__(28)
		  , toIObject = __webpack_require__(45);
		module.exports = function(object, el){
		  var O      = toIObject(object)
		    , keys   = $.getKeys(O)
		    , length = keys.length
		    , index  = 0
		    , key;
		  while(length > index)if(O[key = keys[index++]] === el)return key;
		};
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		// to indexed object, toObject with fallback for non-array-like ES3 strings
		var IObject = __webpack_require__(46)
		  , defined = __webpack_require__(48);
		module.exports = function(it){
		  return IObject(defined(it));
		};
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		var cof = __webpack_require__(47);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
		  return cof(it) == 'String' ? it.split('') : Object(it);
		};
	
	/***/ },
	/* 47 */
	/***/ function(module, exports) {
	
		var toString = {}.toString;
		
		module.exports = function(it){
		  return toString.call(it).slice(8, -1);
		};
	
	/***/ },
	/* 48 */
	/***/ function(module, exports) {
	
		// 7.2.1 RequireObjectCoercible(argument)
		module.exports = function(it){
		  if(it == undefined)throw TypeError("Can't call method on  " + it);
		  return it;
		};
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
		var toIObject = __webpack_require__(45)
		  , getNames  = __webpack_require__(28).getNames
		  , toString  = {}.toString;
		
		var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
		  ? Object.getOwnPropertyNames(window) : [];
		
		var getWindowNames = function(it){
		  try {
		    return getNames(it);
		  } catch(e){
		    return windowNames.slice();
		  }
		};
		
		module.exports.get = function getOwnPropertyNames(it){
		  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
		  return getNames(toIObject(it));
		};
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		// all enumerable object keys, includes symbols
		var $ = __webpack_require__(28);
		module.exports = function(it){
		  var keys       = $.getKeys(it)
		    , getSymbols = $.getSymbols;
		  if(getSymbols){
		    var symbols = getSymbols(it)
		      , isEnum  = $.isEnum
		      , i       = 0
		      , key;
		    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
		  }
		  return keys;
		};
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		// 7.2.2 IsArray(argument)
		var cof = __webpack_require__(47);
		module.exports = Array.isArray || function(arg){
		  return cof(arg) == 'Array';
		};
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		var isObject = __webpack_require__(53);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};
	
	/***/ },
	/* 53 */
	/***/ function(module, exports) {
	
		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};
	
	/***/ },
	/* 54 */
	/***/ function(module, exports) {
	
		module.exports = true;
	
	/***/ },
	/* 55 */
	/***/ function(module, exports) {
	
	
	
	/***/ },
	/* 56 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-ripple-ink\"></div>\n";
	
	/***/ },
	/* 57 */
	/***/ function(module, exports) {
	
		module.exports = "\n<a\n    class=\"ui-menu-option\" role=\"menu-item\" :tabindex=\"(isDivider || disabled) ? null : '0'\"\n    :class=\"{ 'divider': isDivider, 'disabled' : disabled }\"\n>\n    <div class=\"ui-menu-option-content\" :class=\"[partial]\">\n        <partial :name=\"partial\"></partial>\n    </div>\n\n    <ui-ripple-ink\n        :trigger=\"$el\" v-if=\"!hideRippleInk && !disabled && !isDivider\"\n    ></ui-ripple-ink>\n</a>\n";
	
	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _tetherDrop = __webpack_require__(59);
		
		var _tetherDrop2 = _interopRequireDefault(_tetherDrop);
		
		var _classlist = __webpack_require__(23);
		
		var _classlist2 = _interopRequireDefault(_classlist);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    props: {
		        id: String,
		        trigger: Element,
		        containFocus: {
		            type: Boolean,
		            default: true
		        },
		        dropdownPosition: {
		            type: String,
		            default: 'bottom left'
		        },
		        openOn: {
		            type: String,
		            default: 'click' }
		    },
		
		    data: function data() {
		        return {
		            drop: null,
		            lastFocussedElement: null
		        };
		    },
		    ready: function ready() {
		        if (this.trigger) {
		            this.initializeDropdown();
		        }
		    },
		    beforeDestroy: function beforeDestroy() {
		        if (this.drop) {
		            this.drop.remove();
		            this.drop.destroy();
		        }
		    },
		
		
		    events: {
		        'ui-dropdown::open': function uiDropdownOpen(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.openDropdown();
		        },
		
		        'ui-dropdown::close': function uiDropdownClose(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.closeDropdown();
		        },
		
		        'ui-dropdown::toggle': function uiDropdownToggle(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.toggleDropdown();
		        }
		    },
		
		    methods: {
		        initializeDropdown: function initializeDropdown() {
		            this.drop = new _tetherDrop2.default({
		                target: this.trigger,
		                content: this.$els.dropdown,
		                position: this.dropdownPosition,
		                constrainToWindow: true,
		                openOn: this.openOn
		            });
		
		            if (this.dropdownPosition !== 'bottom left') {
		                this.drop.open();
		                this.drop.close();
		                this.drop.open();
		                this.drop.close();
		            }
		
		            this.drop.on('open', this.positionDrop);
		            this.drop.on('open', this.dropdownOpened);
		            this.drop.on('close', this.dropdownClosed);
		        },
		        openDropdown: function openDropdown() {
		            if (this.drop) {
		                this.drop.open();
		            }
		        },
		        positionDrop: function positionDrop() {
		            var drop = this.drop;
		            var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		
		            var dropWidth = drop.drop.getBoundingClientRect().width;
		            var left = drop.target.getBoundingClientRect().left;
		            var availableSpace = windowWidth - left;
		
		            if (dropWidth > availableSpace) {
		                var direction = dropWidth > availableSpace ? 'right' : 'left';
		
		                drop.tether.attachment.left = direction;
		                drop.tether.targetAttachment.left = direction;
		
		                drop.position();
		            }
		        },
		        closeDropdown: function closeDropdown() {
		            if (this.drop) {
		                this.drop.close();
		            }
		        },
		        toggleDropdown: function toggleDropdown(e) {
		            if (this.drop) {
		                this.drop.toggle(e);
		            }
		        },
		        dropdownOpened: function dropdownOpened() {
		            _classlist2.default.add(this.trigger, 'dropdown-open');
		
		            this.lastFocussedElement = document.activeElement;
		            this.$els.dropdown.focus();
		
		            this.$dispatch('dropdown-opened');
		        },
		        dropdownClosed: function dropdownClosed() {
		            _classlist2.default.remove(this.trigger, 'dropdown-open');
		
		            if (this.lastFocussedElement) {
		                this.lastFocussedElement.focus();
		            }
		
		            this.$dispatch('dropdown-closed');
		        }
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether-drop 1.4.1 */
		
		(function(root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(60)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === 'object') {
		    module.exports = factory(require('tether'));
		  } else {
		    root.Drop = factory(root.Tether);
		  }
		}(this, function(Tether) {
		
		/* global Tether */
		'use strict';
		
		var _bind = Function.prototype.bind;
		
		var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
		
		var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
		
		var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		var _Tether$Utils = Tether.Utils;
		var extend = _Tether$Utils.extend;
		var addClass = _Tether$Utils.addClass;
		var removeClass = _Tether$Utils.removeClass;
		var hasClass = _Tether$Utils.hasClass;
		var Evented = _Tether$Utils.Evented;
		
		function sortAttach(str) {
		  var _str$split = str.split(' ');
		
		  var _str$split2 = _slicedToArray(_str$split, 2);
		
		  var first = _str$split2[0];
		  var second = _str$split2[1];
		
		  if (['left', 'right'].indexOf(first) >= 0) {
		    var _ref = [second, first];
		    first = _ref[0];
		    second = _ref[1];
		  }
		  return [first, second].join(' ');
		}
		
		function removeFromArray(arr, item) {
		  var index = undefined;
		  var results = [];
		  while ((index = arr.indexOf(item)) !== -1) {
		    results.push(arr.splice(index, 1));
		  }
		  return results;
		}
		
		var clickEvents = ['click'];
		if ('ontouchstart' in document.documentElement) {
		  clickEvents.push('touchstart');
		}
		
		var transitionEndEvents = {
		  'WebkitTransition': 'webkitTransitionEnd',
		  'MozTransition': 'transitionend',
		  'OTransition': 'otransitionend',
		  'transition': 'transitionend'
		};
		
		var transitionEndEvent = '';
		for (var _name in transitionEndEvents) {
		  if (({}).hasOwnProperty.call(transitionEndEvents, _name)) {
		    var tempEl = document.createElement('p');
		    if (typeof tempEl.style[_name] !== 'undefined') {
		      transitionEndEvent = transitionEndEvents[_name];
		    }
		  }
		}
		
		var MIRROR_ATTACH = {
		  left: 'right',
		  right: 'left',
		  top: 'bottom',
		  bottom: 'top',
		  middle: 'middle',
		  center: 'center'
		};
		
		var allDrops = {};
		
		// Drop can be included in external libraries.  Calling createContext gives you a fresh
		// copy of drop which won't interact with other copies on the page (beyond calling the document events).
		
		function createContext() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		  var drop = function drop() {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }
		
		    return new (_bind.apply(DropInstance, [null].concat(args)))();
		  };
		
		  extend(drop, {
		    createContext: createContext,
		    drops: [],
		    defaults: {}
		  });
		
		  var defaultOptions = {
		    classPrefix: 'drop',
		    defaults: {
		      position: 'bottom left',
		      openOn: 'click',
		      beforeClose: null,
		      constrainToScrollParent: true,
		      constrainToWindow: true,
		      classes: '',
		      remove: false,
		      openDelay: 0,
		      closeDelay: 50,
		      // inherited from openDelay and closeDelay if not explicitly defined
		      focusDelay: null,
		      blurDelay: null,
		      hoverOpenDelay: null,
		      hoverCloseDelay: null,
		      tetherOptions: {}
		    }
		  };
		
		  extend(drop, defaultOptions, options);
		  extend(drop.defaults, defaultOptions.defaults, options.defaults);
		
		  if (typeof allDrops[drop.classPrefix] === 'undefined') {
		    allDrops[drop.classPrefix] = [];
		  }
		
		  drop.updateBodyClasses = function () {
		    // There is only one body, so despite the context concept, we still iterate through all
		    // drops which share our classPrefix.
		
		    var anyOpen = false;
		    var drops = allDrops[drop.classPrefix];
		    var len = drops.length;
		    for (var i = 0; i < len; ++i) {
		      if (drops[i].isOpened()) {
		        anyOpen = true;
		        break;
		      }
		    }
		
		    if (anyOpen) {
		      addClass(document.body, drop.classPrefix + '-open');
		    } else {
		      removeClass(document.body, drop.classPrefix + '-open');
		    }
		  };
		
		  var DropInstance = (function (_Evented) {
		    _inherits(DropInstance, _Evented);
		
		    function DropInstance(opts) {
		      _classCallCheck(this, DropInstance);
		
		      _get(Object.getPrototypeOf(DropInstance.prototype), 'constructor', this).call(this);
		      this.options = extend({}, drop.defaults, opts);
		      this.target = this.options.target;
		
		      if (typeof this.target === 'undefined') {
		        throw new Error('Drop Error: You must provide a target.');
		      }
		
		      var dataPrefix = 'data-' + drop.classPrefix;
		
		      var contentAttr = this.target.getAttribute(dataPrefix);
		      if (contentAttr && this.options.content == null) {
		        this.options.content = contentAttr;
		      }
		
		      var attrsOverride = ['position', 'openOn'];
		      for (var i = 0; i < attrsOverride.length; ++i) {
		
		        var override = this.target.getAttribute(dataPrefix + '-' + attrsOverride[i]);
		        if (override && this.options[attrsOverride[i]] == null) {
		          this.options[attrsOverride[i]] = override;
		        }
		      }
		
		      if (this.options.classes && this.options.addTargetClasses !== false) {
		        addClass(this.target, this.options.classes);
		      }
		
		      drop.drops.push(this);
		      allDrops[drop.classPrefix].push(this);
		
		      this._boundEvents = [];
		      this.bindMethods();
		      this.setupElements();
		      this.setupEvents();
		      this.setupTether();
		    }
		
		    _createClass(DropInstance, [{
		      key: '_on',
		      value: function _on(element, event, handler) {
		        this._boundEvents.push({ element: element, event: event, handler: handler });
		        element.addEventListener(event, handler);
		      }
		    }, {
		      key: 'bindMethods',
		      value: function bindMethods() {
		        this.transitionEndHandler = this._transitionEndHandler.bind(this);
		      }
		    }, {
		      key: 'setupElements',
		      value: function setupElements() {
		        var _this = this;
		
		        this.drop = document.createElement('div');
		        addClass(this.drop, drop.classPrefix);
		
		        if (this.options.classes) {
		          addClass(this.drop, this.options.classes);
		        }
		
		        this.content = document.createElement('div');
		        addClass(this.content, drop.classPrefix + '-content');
		
		        if (typeof this.options.content === 'function') {
		          var generateAndSetContent = function generateAndSetContent() {
		            // content function might return a string or an element
		            var contentElementOrHTML = _this.options.content.call(_this, _this);
		
		            if (typeof contentElementOrHTML === 'string') {
		              _this.content.innerHTML = contentElementOrHTML;
		            } else if (typeof contentElementOrHTML === 'object') {
		              _this.content.innerHTML = '';
		              _this.content.appendChild(contentElementOrHTML);
		            } else {
		              throw new Error('Drop Error: Content function should return a string or HTMLElement.');
		            }
		          };
		
		          generateAndSetContent();
		          this.on('open', generateAndSetContent.bind(this));
		        } else if (typeof this.options.content === 'object') {
		          this.content.appendChild(this.options.content);
		        } else {
		          this.content.innerHTML = this.options.content;
		        }
		
		        this.drop.appendChild(this.content);
		      }
		    }, {
		      key: 'setupTether',
		      value: function setupTether() {
		        // Tether expects two attachment points, one in the target element, one in the
		        // drop.  We use a single one, and use the order as well, to allow us to put
		        // the drop on either side of any of the four corners.  This magic converts between
		        // the two:
		        var dropAttach = this.options.position.split(' ');
		        dropAttach[0] = MIRROR_ATTACH[dropAttach[0]];
		        dropAttach = dropAttach.join(' ');
		
		        var constraints = [];
		        if (this.options.constrainToScrollParent) {
		          constraints.push({
		            to: 'scrollParent',
		            pin: 'top, bottom',
		            attachment: 'together none'
		          });
		        } else {
		          // To get 'out of bounds' classes
		          constraints.push({
		            to: 'scrollParent'
		          });
		        }
		
		        if (this.options.constrainToWindow !== false) {
		          constraints.push({
		            to: 'window',
		            attachment: 'together'
		          });
		        } else {
		          // To get 'out of bounds' classes
		          constraints.push({
		            to: 'window'
		          });
		        }
		
		        var opts = {
		          element: this.drop,
		          target: this.target,
		          attachment: sortAttach(dropAttach),
		          targetAttachment: sortAttach(this.options.position),
		          classPrefix: drop.classPrefix,
		          offset: '0 0',
		          targetOffset: '0 0',
		          enabled: false,
		          constraints: constraints,
		          addTargetClasses: this.options.addTargetClasses
		        };
		
		        if (this.options.tetherOptions !== false) {
		          this.tether = new Tether(extend({}, opts, this.options.tetherOptions));
		        }
		      }
		    }, {
		      key: 'setupEvents',
		      value: function setupEvents() {
		        var _this2 = this;
		
		        if (!this.options.openOn) {
		          return;
		        }
		
		        if (this.options.openOn === 'always') {
		          setTimeout(this.open.bind(this));
		          return;
		        }
		
		        var events = this.options.openOn.split(' ');
		
		        if (events.indexOf('click') >= 0) {
		          var openHandler = function openHandler(event) {
		            _this2.toggle(event);
		            event.preventDefault();
		          };
		
		          var closeHandler = function closeHandler(event) {
		            if (!_this2.isOpened()) {
		              return;
		            }
		
		            // Clicking inside dropdown
		            if (event.target === _this2.drop || _this2.drop.contains(event.target)) {
		              return;
		            }
		
		            // Clicking target
		            if (event.target === _this2.target || _this2.target.contains(event.target)) {
		              return;
		            }
		
		            _this2.close(event);
		          };
		
		          for (var i = 0; i < clickEvents.length; ++i) {
		            var clickEvent = clickEvents[i];
		            this._on(this.target, clickEvent, openHandler);
		            this._on(document, clickEvent, closeHandler);
		          }
		        }
		
		        var inTimeout = null;
		        var outTimeout = null;
		
		        var inHandler = function inHandler(event) {
		          if (outTimeout !== null) {
		            clearTimeout(outTimeout);
		          } else {
		            inTimeout = setTimeout(function () {
		              _this2.open(event);
		              inTimeout = null;
		            }, (event.type === 'focus' ? _this2.options.focusDelay : _this2.options.hoverOpenDelay) || _this2.options.openDelay);
		          }
		        };
		
		        var outHandler = function outHandler(event) {
		          if (inTimeout !== null) {
		            clearTimeout(inTimeout);
		          } else {
		            outTimeout = setTimeout(function () {
		              _this2.close(event);
		              outTimeout = null;
		            }, (event.type === 'blur' ? _this2.options.blurDelay : _this2.options.hoverCloseDelay) || _this2.options.closeDelay);
		          }
		        };
		
		        if (events.indexOf('hover') >= 0) {
		          this._on(this.target, 'mouseover', inHandler);
		          this._on(this.drop, 'mouseover', inHandler);
		          this._on(this.target, 'mouseout', outHandler);
		          this._on(this.drop, 'mouseout', outHandler);
		        }
		
		        if (events.indexOf('focus') >= 0) {
		          this._on(this.target, 'focus', inHandler);
		          this._on(this.drop, 'focus', inHandler);
		          this._on(this.target, 'blur', outHandler);
		          this._on(this.drop, 'blur', outHandler);
		        }
		      }
		    }, {
		      key: 'isOpened',
		      value: function isOpened() {
		        if (this.drop) {
		          return hasClass(this.drop, drop.classPrefix + '-open');
		        }
		      }
		    }, {
		      key: 'toggle',
		      value: function toggle(event) {
		        if (this.isOpened()) {
		          this.close(event);
		        } else {
		          this.open(event);
		        }
		      }
		    }, {
		      key: 'open',
		      value: function open(event) {
		        var _this3 = this;
		
		        /* eslint no-unused-vars: 0 */
		        if (this.isOpened()) {
		          return;
		        }
		
		        if (!this.drop.parentNode) {
		          document.body.appendChild(this.drop);
		        }
		
		        if (typeof this.tether !== 'undefined') {
		          this.tether.enable();
		        }
		
		        addClass(this.drop, drop.classPrefix + '-open');
		        addClass(this.drop, drop.classPrefix + '-open-transitionend');
		
		        setTimeout(function () {
		          if (_this3.drop) {
		            addClass(_this3.drop, drop.classPrefix + '-after-open');
		          }
		        });
		
		        if (typeof this.tether !== 'undefined') {
		          this.tether.position();
		        }
		
		        this.trigger('open');
		
		        drop.updateBodyClasses();
		      }
		    }, {
		      key: '_transitionEndHandler',
		      value: function _transitionEndHandler(e) {
		        if (e.target !== e.currentTarget) {
		          return;
		        }
		
		        if (!hasClass(this.drop, drop.classPrefix + '-open')) {
		          removeClass(this.drop, drop.classPrefix + '-open-transitionend');
		        }
		        this.drop.removeEventListener(transitionEndEvent, this.transitionEndHandler);
		      }
		    }, {
		      key: 'beforeCloseHandler',
		      value: function beforeCloseHandler(event) {
		        var shouldClose = true;
		
		        if (!this.isClosing && typeof this.options.beforeClose === 'function') {
		          this.isClosing = true;
		          shouldClose = this.options.beforeClose(event, this) !== false;
		        }
		
		        this.isClosing = false;
		
		        return shouldClose;
		      }
		    }, {
		      key: 'close',
		      value: function close(event) {
		        if (!this.isOpened()) {
		          return;
		        }
		
		        if (!this.beforeCloseHandler(event)) {
		          return;
		        }
		
		        removeClass(this.drop, drop.classPrefix + '-open');
		        removeClass(this.drop, drop.classPrefix + '-after-open');
		
		        this.drop.addEventListener(transitionEndEvent, this.transitionEndHandler);
		
		        this.trigger('close');
		
		        if (typeof this.tether !== 'undefined') {
		          this.tether.disable();
		        }
		
		        drop.updateBodyClasses();
		
		        if (this.options.remove) {
		          this.remove(event);
		        }
		      }
		    }, {
		      key: 'remove',
		      value: function remove(event) {
		        this.close(event);
		        if (this.drop.parentNode) {
		          this.drop.parentNode.removeChild(this.drop);
		        }
		      }
		    }, {
		      key: 'position',
		      value: function position() {
		        if (this.isOpened() && typeof this.tether !== 'undefined') {
		          this.tether.position();
		        }
		      }
		    }, {
		      key: 'destroy',
		      value: function destroy() {
		        this.remove();
		
		        if (typeof this.tether !== 'undefined') {
		          this.tether.destroy();
		        }
		
		        for (var i = 0; i < this._boundEvents.length; ++i) {
		          var _boundEvents$i = this._boundEvents[i];
		          var element = _boundEvents$i.element;
		          var _event = _boundEvents$i.event;
		          var handler = _boundEvents$i.handler;
		
		          element.removeEventListener(_event, handler);
		        }
		
		        this._boundEvents = [];
		
		        this.tether = null;
		        this.drop = null;
		        this.content = null;
		        this.target = null;
		
		        removeFromArray(allDrops[drop.classPrefix], this);
		        removeFromArray(drop.drops, this);
		      }
		    }]);
		
		    return DropInstance;
		  })(Evented);
		
		  return drop;
		}
		
		var Drop = createContext();
		
		document.addEventListener('DOMContentLoaded', function () {
		  Drop.updateBodyClasses();
		});
		return Drop;
		
		}));
	
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.2.0 */
		
		(function(root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === 'object') {
		    module.exports = factory(require, exports, module);
		  } else {
		    root.Tether = factory();
		  }
		}(this, function(require, exports, module) {
		
		'use strict';
		
		var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
		
		var TetherBase = undefined;
		if (typeof TetherBase === 'undefined') {
		  TetherBase = { modules: [] };
		}
		
		function getScrollParent(el) {
		  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
		  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
		  var computedStyle = getComputedStyle(el) || {};
		  var position = computedStyle.position;
		
		  if (position === 'fixed') {
		    return el;
		  }
		
		  var parent = el;
		  while (parent = parent.parentNode) {
		    var style = undefined;
		    try {
		      style = getComputedStyle(parent);
		    } catch (err) {}
		
		    if (typeof style === 'undefined' || style === null) {
		      return parent;
		    }
		
		    var _style = style;
		    var overflow = _style.overflow;
		    var overflowX = _style.overflowX;
		    var overflowY = _style.overflowY;
		
		    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
		      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
		        return parent;
		      }
		    }
		  }
		
		  return document.body;
		}
		
		var uniqueId = (function () {
		  var id = 0;
		  return function () {
		    return ++id;
		  };
		})();
		
		var zeroPosCache = {};
		var getOrigin = function getOrigin(doc) {
		  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
		  // jitter as the user scrolls that messes with our ability to detect if two positions
		  // are equivilant or not.  We place an element at the top left of the page that will
		  // get the same jitter, so we can cancel the two out.
		  var node = doc._tetherZeroElement;
		  if (typeof node === 'undefined') {
		    node = doc.createElement('div');
		    node.setAttribute('data-tether-id', uniqueId());
		    extend(node.style, {
		      top: 0,
		      left: 0,
		      position: 'absolute'
		    });
		
		    doc.body.appendChild(node);
		
		    doc._tetherZeroElement = node;
		  }
		
		  var id = node.getAttribute('data-tether-id');
		  if (typeof zeroPosCache[id] === 'undefined') {
		    zeroPosCache[id] = {};
		
		    var rect = node.getBoundingClientRect();
		    for (var k in rect) {
		      // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
		      zeroPosCache[id][k] = rect[k];
		    }
		
		    // Clear the cache when this position call is done
		    defer(function () {
		      delete zeroPosCache[id];
		    });
		  }
		
		  return zeroPosCache[id];
		};
		
		function getBounds(el) {
		  var doc = undefined;
		  if (el === document) {
		    doc = document;
		    el = document.documentElement;
		  } else {
		    doc = el.ownerDocument;
		  }
		
		  var docEl = doc.documentElement;
		
		  var box = {};
		  // The original object returned by getBoundingClientRect is immutable, so we clone it
		  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
		  var rect = el.getBoundingClientRect();
		  for (var k in rect) {
		    box[k] = rect[k];
		  }
		
		  var origin = getOrigin(doc);
		
		  box.top -= origin.top;
		  box.left -= origin.left;
		
		  if (typeof box.width === 'undefined') {
		    box.width = document.body.scrollWidth - box.left - box.right;
		  }
		  if (typeof box.height === 'undefined') {
		    box.height = document.body.scrollHeight - box.top - box.bottom;
		  }
		
		  box.top = box.top - docEl.clientTop;
		  box.left = box.left - docEl.clientLeft;
		  box.right = doc.body.clientWidth - box.width - box.left;
		  box.bottom = doc.body.clientHeight - box.height - box.top;
		
		  return box;
		}
		
		function getOffsetParent(el) {
		  return el.offsetParent || document.documentElement;
		}
		
		function getScrollBarSize() {
		  var inner = document.createElement('div');
		  inner.style.width = '100%';
		  inner.style.height = '200px';
		
		  var outer = document.createElement('div');
		  extend(outer.style, {
		    position: 'absolute',
		    top: 0,
		    left: 0,
		    pointerEvents: 'none',
		    visibility: 'hidden',
		    width: '200px',
		    height: '150px',
		    overflow: 'hidden'
		  });
		
		  outer.appendChild(inner);
		
		  document.body.appendChild(outer);
		
		  var widthContained = inner.offsetWidth;
		  outer.style.overflow = 'scroll';
		  var widthScroll = inner.offsetWidth;
		
		  if (widthContained === widthScroll) {
		    widthScroll = outer.clientWidth;
		  }
		
		  document.body.removeChild(outer);
		
		  var width = widthContained - widthScroll;
		
		  return { width: width, height: width };
		}
		
		function extend() {
		  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		  var args = [];
		
		  Array.prototype.push.apply(args, arguments);
		
		  args.slice(1).forEach(function (obj) {
		    if (obj) {
		      for (var key in obj) {
		        if (({}).hasOwnProperty.call(obj, key)) {
		          out[key] = obj[key];
		        }
		      }
		    }
		  });
		
		  return out;
		}
		
		function removeClass(el, name) {
		  if (typeof el.classList !== 'undefined') {
		    name.split(' ').forEach(function (cls) {
		      if (cls.trim()) {
		        el.classList.remove(cls);
		      }
		    });
		  } else {
		    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
		    var className = getClassName(el).replace(regex, ' ');
		    setClassName(el, className);
		  }
		}
		
		function addClass(el, name) {
		  if (typeof el.classList !== 'undefined') {
		    name.split(' ').forEach(function (cls) {
		      if (cls.trim()) {
		        el.classList.add(cls);
		      }
		    });
		  } else {
		    removeClass(el, name);
		    var cls = getClassName(el) + (' ' + name);
		    setClassName(el, cls);
		  }
		}
		
		function hasClass(el, name) {
		  if (typeof el.classList !== 'undefined') {
		    return el.classList.contains(name);
		  }
		  var className = getClassName(el);
		  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
		}
		
		function getClassName(el) {
		  if (el.className instanceof SVGAnimatedString) {
		    return el.className.baseVal;
		  }
		  return el.className;
		}
		
		function setClassName(el, className) {
		  el.setAttribute('class', className);
		}
		
		function updateClasses(el, add, all) {
		  // Of the set of 'all' classes, we need the 'add' classes, and only the
		  // 'add' classes to be set.
		  all.forEach(function (cls) {
		    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
		      removeClass(el, cls);
		    }
		  });
		
		  add.forEach(function (cls) {
		    if (!hasClass(el, cls)) {
		      addClass(el, cls);
		    }
		  });
		}
		
		var deferred = [];
		
		var defer = function defer(fn) {
		  deferred.push(fn);
		};
		
		var flush = function flush() {
		  var fn = undefined;
		  while (fn = deferred.pop()) {
		    fn();
		  }
		};
		
		var Evented = (function () {
		  function Evented() {
		    _classCallCheck(this, Evented);
		  }
		
		  _createClass(Evented, [{
		    key: 'on',
		    value: function on(event, handler, ctx) {
		      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
		
		      if (typeof this.bindings === 'undefined') {
		        this.bindings = {};
		      }
		      if (typeof this.bindings[event] === 'undefined') {
		        this.bindings[event] = [];
		      }
		      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
		    }
		  }, {
		    key: 'once',
		    value: function once(event, handler, ctx) {
		      this.on(event, handler, ctx, true);
		    }
		  }, {
		    key: 'off',
		    value: function off(event, handler) {
		      if (typeof this.bindings !== 'undefined' && typeof this.bindings[event] !== 'undefined') {
		        return;
		      }
		
		      if (typeof handler === 'undefined') {
		        delete this.bindings[event];
		      } else {
		        var i = 0;
		        while (i < this.bindings[event].length) {
		          if (this.bindings[event][i].handler === handler) {
		            this.bindings[event].splice(i, 1);
		          } else {
		            ++i;
		          }
		        }
		      }
		    }
		  }, {
		    key: 'trigger',
		    value: function trigger(event) {
		      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
		        var i = 0;
		
		        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		          args[_key - 1] = arguments[_key];
		        }
		
		        while (i < this.bindings[event].length) {
		          var _bindings$event$i = this.bindings[event][i];
		          var handler = _bindings$event$i.handler;
		          var ctx = _bindings$event$i.ctx;
		          var once = _bindings$event$i.once;
		
		          var context = ctx;
		          if (typeof context === 'undefined') {
		            context = this;
		          }
		
		          handler.apply(context, args);
		
		          if (once) {
		            this.bindings[event].splice(i, 1);
		          } else {
		            ++i;
		          }
		        }
		      }
		    }
		  }]);
		
		  return Evented;
		})();
		
		TetherBase.Utils = {
		  getScrollParent: getScrollParent,
		  getBounds: getBounds,
		  getOffsetParent: getOffsetParent,
		  extend: extend,
		  addClass: addClass,
		  removeClass: removeClass,
		  hasClass: hasClass,
		  updateClasses: updateClasses,
		  defer: defer,
		  flush: flush,
		  uniqueId: uniqueId,
		  Evented: Evented,
		  getScrollBarSize: getScrollBarSize
		};
		/* globals TetherBase, performance */
		
		'use strict';
		
		var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
		
		var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
		
		if (typeof TetherBase === 'undefined') {
		  throw new Error('You must include the utils.js file before tether.js');
		}
		
		var _TetherBase$Utils = TetherBase.Utils;
		var getScrollParent = _TetherBase$Utils.getScrollParent;
		var getBounds = _TetherBase$Utils.getBounds;
		var getOffsetParent = _TetherBase$Utils.getOffsetParent;
		var extend = _TetherBase$Utils.extend;
		var addClass = _TetherBase$Utils.addClass;
		var removeClass = _TetherBase$Utils.removeClass;
		var updateClasses = _TetherBase$Utils.updateClasses;
		var defer = _TetherBase$Utils.defer;
		var flush = _TetherBase$Utils.flush;
		var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
		
		function within(a, b) {
		  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
		
		  return a + diff >= b && b >= a - diff;
		}
		
		var transformKey = (function () {
		  if (typeof document === 'undefined') {
		    return '';
		  }
		  var el = document.createElement('div');
		
		  var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
		  for (var i = 0; i < transforms.length; ++i) {
		    var key = transforms[i];
		    if (el.style[key] !== undefined) {
		      return key;
		    }
		  }
		})();
		
		var tethers = [];
		
		var position = function position() {
		  tethers.forEach(function (tether) {
		    tether.position(false);
		  });
		  flush();
		};
		
		function now() {
		  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
		    return performance.now();
		  }
		  return +new Date();
		}
		
		(function () {
		  var lastCall = null;
		  var lastDuration = null;
		  var pendingTimeout = null;
		
		  var tick = function tick() {
		    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
		      // We voluntarily throttle ourselves if we can't manage 60fps
		      lastDuration = Math.min(lastDuration - 16, 250);
		
		      // Just in case this is the last event, remember to position just once more
		      pendingTimeout = setTimeout(tick, 250);
		      return;
		    }
		
		    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
		      // Some browsers call events a little too frequently, refuse to run more than is reasonable
		      return;
		    }
		
		    if (typeof pendingTimeout !== 'undefined') {
		      clearTimeout(pendingTimeout);
		      pendingTimeout = null;
		    }
		
		    lastCall = now();
		    position();
		    lastDuration = now() - lastCall;
		  };
		
		  if (typeof window !== 'undefined') {
		    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
		      window.addEventListener(event, tick);
		    });
		  }
		})();
		
		var MIRROR_LR = {
		  center: 'center',
		  left: 'right',
		  right: 'left'
		};
		
		var MIRROR_TB = {
		  middle: 'middle',
		  top: 'bottom',
		  bottom: 'top'
		};
		
		var OFFSET_MAP = {
		  top: 0,
		  left: 0,
		  middle: '50%',
		  center: '50%',
		  bottom: '100%',
		  right: '100%'
		};
		
		var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
		  var left = attachment.left;
		  var top = attachment.top;
		
		  if (left === 'auto') {
		    left = MIRROR_LR[relativeToAttachment.left];
		  }
		
		  if (top === 'auto') {
		    top = MIRROR_TB[relativeToAttachment.top];
		  }
		
		  return { left: left, top: top };
		};
		
		var attachmentToOffset = function attachmentToOffset(attachment) {
		  var left = attachment.left;
		  var top = attachment.top;
		
		  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
		    left = OFFSET_MAP[attachment.left];
		  }
		
		  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
		    top = OFFSET_MAP[attachment.top];
		  }
		
		  return { left: left, top: top };
		};
		
		function addOffset() {
		  var out = { top: 0, left: 0 };
		
		  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
		    offsets[_key] = arguments[_key];
		  }
		
		  offsets.forEach(function (_ref) {
		    var top = _ref.top;
		    var left = _ref.left;
		
		    if (typeof top === 'string') {
		      top = parseFloat(top, 10);
		    }
		    if (typeof left === 'string') {
		      left = parseFloat(left, 10);
		    }
		
		    out.top += top;
		    out.left += left;
		  });
		
		  return out;
		}
		
		function offsetToPx(offset, size) {
		  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
		    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
		  }
		  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
		    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
		  }
		
		  return offset;
		}
		
		var parseOffset = function parseOffset(value) {
		  var _value$split = value.split(' ');
		
		  var _value$split2 = _slicedToArray(_value$split, 2);
		
		  var top = _value$split2[0];
		  var left = _value$split2[1];
		
		  return { top: top, left: left };
		};
		var parseAttachment = parseOffset;
		
		var TetherClass = (function () {
		  function TetherClass(options) {
		    var _this = this;
		
		    _classCallCheck(this, TetherClass);
		
		    this.position = this.position.bind(this);
		
		    tethers.push(this);
		
		    this.history = [];
		
		    this.setOptions(options, false);
		
		    TetherBase.modules.forEach(function (module) {
		      if (typeof module.initialize !== 'undefined') {
		        module.initialize.call(_this);
		      }
		    });
		
		    this.position();
		  }
		
		  _createClass(TetherClass, [{
		    key: 'getClass',
		    value: function getClass() {
		      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
		      var classes = this.options.classes;
		
		      if (typeof classes !== 'undefined' && classes[key]) {
		        return this.options.classes[key];
		      } else if (this.options.classPrefix) {
		        return this.options.classPrefix + '-' + key;
		      } else {
		        return key;
		      }
		    }
		  }, {
		    key: 'setOptions',
		    value: function setOptions(options) {
		      var _this2 = this;
		
		      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
		
		      var defaults = {
		        offset: '0 0',
		        targetOffset: '0 0',
		        targetAttachment: 'auto auto',
		        classPrefix: 'tether'
		      };
		
		      this.options = extend(defaults, options);
		
		      var _options = this.options;
		      var element = _options.element;
		      var target = _options.target;
		      var targetModifier = _options.targetModifier;
		
		      this.element = element;
		      this.target = target;
		      this.targetModifier = targetModifier;
		
		      if (this.target === 'viewport') {
		        this.target = document.body;
		        this.targetModifier = 'visible';
		      } else if (this.target === 'scroll-handle') {
		        this.target = document.body;
		        this.targetModifier = 'scroll-handle';
		      }
		
		      ['element', 'target'].forEach(function (key) {
		        if (typeof _this2[key] === 'undefined') {
		          throw new Error('Tether Error: Both element and target must be defined');
		        }
		
		        if (typeof _this2[key].jquery !== 'undefined') {
		          _this2[key] = _this2[key][0];
		        } else if (typeof _this2[key] === 'string') {
		          _this2[key] = document.querySelector(_this2[key]);
		        }
		      });
		
		      addClass(this.element, this.getClass('element'));
		      if (!(this.options.addTargetClasses === false)) {
		        addClass(this.target, this.getClass('target'));
		      }
		
		      if (!this.options.attachment) {
		        throw new Error('Tether Error: You must provide an attachment');
		      }
		
		      this.targetAttachment = parseAttachment(this.options.targetAttachment);
		      this.attachment = parseAttachment(this.options.attachment);
		      this.offset = parseOffset(this.options.offset);
		      this.targetOffset = parseOffset(this.options.targetOffset);
		
		      if (typeof this.scrollParent !== 'undefined') {
		        this.disable();
		      }
		
		      if (this.targetModifier === 'scroll-handle') {
		        this.scrollParent = this.target;
		      } else {
		        this.scrollParent = getScrollParent(this.target);
		      }
		
		      if (!(this.options.enabled === false)) {
		        this.enable(pos);
		      }
		    }
		  }, {
		    key: 'getTargetBounds',
		    value: function getTargetBounds() {
		      if (typeof this.targetModifier !== 'undefined') {
		        if (this.targetModifier === 'visible') {
		          if (this.target === document.body) {
		            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
		          } else {
		            var bounds = getBounds(this.target);
		
		            var out = {
		              height: bounds.height,
		              width: bounds.width,
		              top: bounds.top,
		              left: bounds.left
		            };
		
		            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
		            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
		            out.height = Math.min(innerHeight, out.height);
		            out.height -= 2;
		
		            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
		            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
		            out.width = Math.min(innerWidth, out.width);
		            out.width -= 2;
		
		            if (out.top < pageYOffset) {
		              out.top = pageYOffset;
		            }
		            if (out.left < pageXOffset) {
		              out.left = pageXOffset;
		            }
		
		            return out;
		          }
		        } else if (this.targetModifier === 'scroll-handle') {
		          var bounds = undefined;
		          var target = this.target;
		          if (target === document.body) {
		            target = document.documentElement;
		
		            bounds = {
		              left: pageXOffset,
		              top: pageYOffset,
		              height: innerHeight,
		              width: innerWidth
		            };
		          } else {
		            bounds = getBounds(target);
		          }
		
		          var style = getComputedStyle(target);
		
		          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;
		
		          var scrollBottom = 0;
		          if (hasBottomScroll) {
		            scrollBottom = 15;
		          }
		
		          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;
		
		          var out = {
		            width: 15,
		            height: height * 0.975 * (height / target.scrollHeight),
		            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
		          };
		
		          var fitAdj = 0;
		          if (height < 408 && this.target === document.body) {
		            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
		          }
		
		          if (this.target !== document.body) {
		            out.height = Math.max(out.height, 24);
		          }
		
		          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
		          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);
		
		          if (this.target === document.body) {
		            out.height = Math.max(out.height, 24);
		          }
		
		          return out;
		        }
		      } else {
		        return getBounds(this.target);
		      }
		    }
		  }, {
		    key: 'clearCache',
		    value: function clearCache() {
		      this._cache = {};
		    }
		  }, {
		    key: 'cache',
		    value: function cache(k, getter) {
		      // More than one module will often need the same DOM info, so
		      // we keep a cache which is cleared on each position call
		      if (typeof this._cache === 'undefined') {
		        this._cache = {};
		      }
		
		      if (typeof this._cache[k] === 'undefined') {
		        this._cache[k] = getter.call(this);
		      }
		
		      return this._cache[k];
		    }
		  }, {
		    key: 'enable',
		    value: function enable() {
		      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		
		      if (!(this.options.addTargetClasses === false)) {
		        addClass(this.target, this.getClass('enabled'));
		      }
		      addClass(this.element, this.getClass('enabled'));
		      this.enabled = true;
		
		      if (this.scrollParent !== document) {
		        this.scrollParent.addEventListener('scroll', this.position);
		      }
		
		      if (pos) {
		        this.position();
		      }
		    }
		  }, {
		    key: 'disable',
		    value: function disable() {
		      removeClass(this.target, this.getClass('enabled'));
		      removeClass(this.element, this.getClass('enabled'));
		      this.enabled = false;
		
		      if (typeof this.scrollParent !== 'undefined') {
		        this.scrollParent.removeEventListener('scroll', this.position);
		      }
		    }
		  }, {
		    key: 'destroy',
		    value: function destroy() {
		      var _this3 = this;
		
		      this.disable();
		
		      tethers.forEach(function (tether, i) {
		        if (tether === _this3) {
		          tethers.splice(i, 1);
		          return;
		        }
		      });
		    }
		  }, {
		    key: 'updateAttachClasses',
		    value: function updateAttachClasses(elementAttach, targetAttach) {
		      var _this4 = this;
		
		      elementAttach = elementAttach || this.attachment;
		      targetAttach = targetAttach || this.targetAttachment;
		      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];
		
		      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
		        // updateAttachClasses can be called more than once in a position call, so
		        // we need to clean up after ourselves such that when the last defer gets
		        // ran it doesn't add any extra classes from previous calls.
		        this._addAttachClasses.splice(0, this._addAttachClasses.length);
		      }
		
		      if (typeof this._addAttachClasses === 'undefined') {
		        this._addAttachClasses = [];
		      }
		      var add = this._addAttachClasses;
		
		      if (elementAttach.top) {
		        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
		      }
		      if (elementAttach.left) {
		        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
		      }
		      if (targetAttach.top) {
		        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
		      }
		      if (targetAttach.left) {
		        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
		      }
		
		      var all = [];
		      sides.forEach(function (side) {
		        all.push(_this4.getClass('element-attached') + '-' + side);
		        all.push(_this4.getClass('target-attached') + '-' + side);
		      });
		
		      defer(function () {
		        if (!(typeof _this4._addAttachClasses !== 'undefined')) {
		          return;
		        }
		
		        updateClasses(_this4.element, _this4._addAttachClasses, all);
		        if (!(_this4.options.addTargetClasses === false)) {
		          updateClasses(_this4.target, _this4._addAttachClasses, all);
		        }
		
		        delete _this4._addAttachClasses;
		      });
		    }
		  }, {
		    key: 'position',
		    value: function position() {
		      var _this5 = this;
		
		      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		
		      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
		      // tethers (in which case call Tether.Utils.flush yourself when you're done)
		
		      if (!this.enabled) {
		        return;
		      }
		
		      this.clearCache();
		
		      // Turn 'auto' attachments into the appropriate corner or edge
		      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);
		
		      this.updateAttachClasses(this.attachment, targetAttachment);
		
		      var elementPos = this.cache('element-bounds', function () {
		        return getBounds(_this5.element);
		      });
		
		      var width = elementPos.width;
		      var height = elementPos.height;
		
		      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
		        var _lastSize = this.lastSize;
		
		        // We cache the height and width to make it possible to position elements that are
		        // getting hidden.
		        width = _lastSize.width;
		        height = _lastSize.height;
		      } else {
		        this.lastSize = { width: width, height: height };
		      }
		
		      var targetPos = this.cache('target-bounds', function () {
		        return _this5.getTargetBounds();
		      });
		      var targetSize = targetPos;
		
		      // Get an actual px offset from the attachment
		      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
		      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);
		
		      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
		      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);
		
		      // Add the manually provided offset
		      offset = addOffset(offset, manualOffset);
		      targetOffset = addOffset(targetOffset, manualTargetOffset);
		
		      // It's now our goal to make (element position + offset) == (target position + target offset)
		      var left = targetPos.left + targetOffset.left - offset.left;
		      var top = targetPos.top + targetOffset.top - offset.top;
		
		      for (var i = 0; i < TetherBase.modules.length; ++i) {
		        var _module2 = TetherBase.modules[i];
		        var ret = _module2.position.call(this, {
		          left: left,
		          top: top,
		          targetAttachment: targetAttachment,
		          targetPos: targetPos,
		          elementPos: elementPos,
		          offset: offset,
		          targetOffset: targetOffset,
		          manualOffset: manualOffset,
		          manualTargetOffset: manualTargetOffset,
		          scrollbarSize: scrollbarSize,
		          attachment: this.attachment
		        });
		
		        if (ret === false) {
		          return false;
		        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
		          continue;
		        } else {
		          top = ret.top;
		          left = ret.left;
		        }
		      }
		
		      // We describe the position three different ways to give the optimizer
		      // a chance to decide the best possible way to position the element
		      // with the fewest repaints.
		      var next = {
		        // It's position relative to the page (absolute positioning when
		        // the element is a child of the body)
		        page: {
		          top: top,
		          left: left
		        },
		
		        // It's position relative to the viewport (fixed positioning)
		        viewport: {
		          top: top - pageYOffset,
		          bottom: pageYOffset - top - height + innerHeight,
		          left: left - pageXOffset,
		          right: pageXOffset - left - width + innerWidth
		        }
		      };
		
		      var scrollbarSize = undefined;
		      if (document.body.scrollWidth > window.innerWidth) {
		        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
		        next.viewport.bottom -= scrollbarSize.height;
		      }
		
		      if (document.body.scrollHeight > window.innerHeight) {
		        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
		        next.viewport.right -= scrollbarSize.width;
		      }
		
		      if (['', 'static'].indexOf(document.body.style.position) === -1 || ['', 'static'].indexOf(document.body.parentElement.style.position) === -1) {
		        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
		        next.page.bottom = document.body.scrollHeight - top - height;
		        next.page.right = document.body.scrollWidth - left - width;
		      }
		
		      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
		        (function () {
		          var offsetParent = _this5.cache('target-offsetparent', function () {
		            return getOffsetParent(_this5.target);
		          });
		          var offsetPosition = _this5.cache('target-offsetparent-bounds', function () {
		            return getBounds(offsetParent);
		          });
		          var offsetParentStyle = getComputedStyle(offsetParent);
		          var offsetParentSize = offsetPosition;
		
		          var offsetBorder = {};
		          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
		            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
		          });
		
		          offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
		          offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;
		
		          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
		            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
		              // We're within the visible part of the target's scroll parent
		              var scrollTop = offsetParent.scrollTop;
		              var scrollLeft = offsetParent.scrollLeft;
		
		              // It's position relative to the target's offset parent (absolute positioning when
		              // the element is moved to be a child of the target's offset parent).
		              next.offset = {
		                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
		                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
		              };
		            }
		          }
		        })();
		      }
		
		      // We could also travel up the DOM and try each containing context, rather than only
		      // looking at the body, but we're gonna get diminishing returns.
		
		      this.move(next);
		
		      this.history.unshift(next);
		
		      if (this.history.length > 3) {
		        this.history.pop();
		      }
		
		      if (flushChanges) {
		        flush();
		      }
		
		      return true;
		    }
		
		    // THE ISSUE
		  }, {
		    key: 'move',
		    value: function move(pos) {
		      var _this6 = this;
		
		      if (!(typeof this.element.parentNode !== 'undefined')) {
		        return;
		      }
		
		      var same = {};
		
		      for (var type in pos) {
		        same[type] = {};
		
		        for (var key in pos[type]) {
		          var found = false;
		
		          for (var i = 0; i < this.history.length; ++i) {
		            var point = this.history[i];
		            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
		              found = true;
		              break;
		            }
		          }
		
		          if (!found) {
		            same[type][key] = true;
		          }
		        }
		      }
		
		      var css = { top: '', left: '', right: '', bottom: '' };
		
		      var transcribe = function transcribe(_same, _pos) {
		        var hasOptimizations = typeof _this6.options.optimizations !== 'undefined';
		        var gpu = hasOptimizations ? _this6.options.optimizations.gpu : null;
		        if (gpu !== false) {
		          var yPos = undefined,
		              xPos = undefined;
		          if (_same.top) {
		            css.top = 0;
		            yPos = _pos.top;
		          } else {
		            css.bottom = 0;
		            yPos = -_pos.bottom;
		          }
		
		          if (_same.left) {
		            css.left = 0;
		            xPos = _pos.left;
		          } else {
		            css.right = 0;
		            xPos = -_pos.right;
		          }
		
		          css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';
		
		          if (transformKey !== 'msTransform') {
		            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
		            // but IE9 doesn't support 3d transforms and will choke.
		            css[transformKey] += " translateZ(0)";
		          }
		        } else {
		          if (_same.top) {
		            css.top = _pos.top + 'px';
		          } else {
		            css.bottom = _pos.bottom + 'px';
		          }
		
		          if (_same.left) {
		            css.left = _pos.left + 'px';
		          } else {
		            css.right = _pos.right + 'px';
		          }
		        }
		      };
		
		      var moved = false;
		      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
		        css.position = 'absolute';
		        transcribe(same.page, pos.page);
		      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
		        css.position = 'fixed';
		        transcribe(same.viewport, pos.viewport);
		      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
		        (function () {
		          css.position = 'absolute';
		          var offsetParent = _this6.cache('target-offsetparent', function () {
		            return getOffsetParent(_this6.target);
		          });
		
		          if (getOffsetParent(_this6.element) !== offsetParent) {
		            defer(function () {
		              _this6.element.parentNode.removeChild(_this6.element);
		              offsetParent.appendChild(_this6.element);
		            });
		          }
		
		          transcribe(same.offset, pos.offset);
		          moved = true;
		        })();
		      } else {
		        css.position = 'absolute';
		        transcribe({ top: true, left: true }, pos.page);
		      }
		
		      if (!moved) {
		        var offsetParentIsBody = true;
		        var currentNode = this.element.parentNode;
		        while (currentNode && currentNode.tagName !== 'BODY') {
		          if (getComputedStyle(currentNode).position !== 'static') {
		            offsetParentIsBody = false;
		            break;
		          }
		
		          currentNode = currentNode.parentNode;
		        }
		
		        if (!offsetParentIsBody) {
		          this.element.parentNode.removeChild(this.element);
		          document.body.appendChild(this.element);
		        }
		      }
		
		      // Any css change will trigger a repaint, so let's avoid one if nothing changed
		      var writeCSS = {};
		      var write = false;
		      for (var key in css) {
		        var val = css[key];
		        var elVal = this.element.style[key];
		
		        if (elVal !== '' && val !== '' && ['top', 'left', 'bottom', 'right'].indexOf(key) >= 0) {
		          elVal = parseFloat(elVal);
		          val = parseFloat(val);
		        }
		
		        if (elVal !== val) {
		          write = true;
		          writeCSS[key] = val;
		        }
		      }
		
		      if (write) {
		        defer(function () {
		          extend(_this6.element.style, writeCSS);
		        });
		      }
		    }
		  }]);
		
		  return TetherClass;
		})();
		
		TetherClass.modules = [];
		
		TetherBase.position = position;
		
		var Tether = extend(TetherClass, TetherBase);
		/* globals TetherBase */
		
		'use strict';
		
		var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
		
		var _TetherBase$Utils = TetherBase.Utils;
		var getBounds = _TetherBase$Utils.getBounds;
		var extend = _TetherBase$Utils.extend;
		var updateClasses = _TetherBase$Utils.updateClasses;
		var defer = _TetherBase$Utils.defer;
		
		var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];
		
		function getBoundingRect(tether, to) {
		  if (to === 'scrollParent') {
		    to = tether.scrollParent;
		  } else if (to === 'window') {
		    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
		  }
		
		  if (to === document) {
		    to = to.documentElement;
		  }
		
		  if (typeof to.nodeType !== 'undefined') {
		    (function () {
		      var size = getBounds(to);
		      var pos = size;
		      var style = getComputedStyle(to);
		
		      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];
		
		      BOUNDS_FORMAT.forEach(function (side, i) {
		        side = side[0].toUpperCase() + side.substr(1);
		        if (side === 'Top' || side === 'Left') {
		          to[i] += parseFloat(style['border' + side + 'Width']);
		        } else {
		          to[i] -= parseFloat(style['border' + side + 'Width']);
		        }
		      });
		    })();
		  }
		
		  return to;
		}
		
		TetherBase.modules.push({
		  position: function position(_ref) {
		    var _this = this;
		
		    var top = _ref.top;
		    var left = _ref.left;
		    var targetAttachment = _ref.targetAttachment;
		
		    if (!this.options.constraints) {
		      return true;
		    }
		
		    var _cache = this.cache('element-bounds', function () {
		      return getBounds(_this.element);
		    });
		
		    var height = _cache.height;
		    var width = _cache.width;
		
		    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
		      var _lastSize = this.lastSize;
		
		      // Handle the item getting hidden as a result of our positioning without glitching
		      // the classes in and out
		      width = _lastSize.width;
		      height = _lastSize.height;
		    }
		
		    var targetSize = this.cache('target-bounds', function () {
		      return _this.getTargetBounds();
		    });
		
		    var targetHeight = targetSize.height;
		    var targetWidth = targetSize.width;
		
		    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];
		
		    this.options.constraints.forEach(function (constraint) {
		      var outOfBoundsClass = constraint.outOfBoundsClass;
		      var pinnedClass = constraint.pinnedClass;
		
		      if (outOfBoundsClass) {
		        allClasses.push(outOfBoundsClass);
		      }
		      if (pinnedClass) {
		        allClasses.push(pinnedClass);
		      }
		    });
		
		    allClasses.forEach(function (cls) {
		      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
		        allClasses.push(cls + '-' + side);
		      });
		    });
		
		    var addClasses = [];
		
		    var tAttachment = extend({}, targetAttachment);
		    var eAttachment = extend({}, this.attachment);
		
		    this.options.constraints.forEach(function (constraint) {
		      var to = constraint.to;
		      var attachment = constraint.attachment;
		      var pin = constraint.pin;
		
		      if (typeof attachment === 'undefined') {
		        attachment = '';
		      }
		
		      var changeAttachX = undefined,
		          changeAttachY = undefined;
		      if (attachment.indexOf(' ') >= 0) {
		        var _attachment$split = attachment.split(' ');
		
		        var _attachment$split2 = _slicedToArray(_attachment$split, 2);
		
		        changeAttachY = _attachment$split2[0];
		        changeAttachX = _attachment$split2[1];
		      } else {
		        changeAttachX = changeAttachY = attachment;
		      }
		
		      var bounds = getBoundingRect(_this, to);
		
		      if (changeAttachY === 'target' || changeAttachY === 'both') {
		        if (top < bounds[1] && tAttachment.top === 'top') {
		          top += targetHeight;
		          tAttachment.top = 'bottom';
		        }
		
		        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
		          top -= targetHeight;
		          tAttachment.top = 'top';
		        }
		      }
		
		      if (changeAttachY === 'together') {
		        if (top < bounds[1] && tAttachment.top === 'top') {
		          if (eAttachment.top === 'bottom') {
		            top += targetHeight;
		            tAttachment.top = 'bottom';
		
		            top += height;
		            eAttachment.top = 'top';
		          } else if (eAttachment.top === 'top') {
		            top += targetHeight;
		            tAttachment.top = 'bottom';
		
		            top -= height;
		            eAttachment.top = 'bottom';
		          }
		        }
		
		        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
		          if (eAttachment.top === 'top') {
		            top -= targetHeight;
		            tAttachment.top = 'top';
		
		            top -= height;
		            eAttachment.top = 'bottom';
		          } else if (eAttachment.top === 'bottom') {
		            top -= targetHeight;
		            tAttachment.top = 'top';
		
		            top += height;
		            eAttachment.top = 'top';
		          }
		        }
		
		        if (tAttachment.top === 'middle') {
		          if (top + height > bounds[3] && eAttachment.top === 'top') {
		            top -= height;
		            eAttachment.top = 'bottom';
		          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
		            top += height;
		            eAttachment.top = 'top';
		          }
		        }
		      }
		
		      if (changeAttachX === 'target' || changeAttachX === 'both') {
		        if (left < bounds[0] && tAttachment.left === 'left') {
		          left += targetWidth;
		          tAttachment.left = 'right';
		        }
		
		        if (left + width > bounds[2] && tAttachment.left === 'right') {
		          left -= targetWidth;
		          tAttachment.left = 'left';
		        }
		      }
		
		      if (changeAttachX === 'together') {
		        if (left < bounds[0] && tAttachment.left === 'left') {
		          if (eAttachment.left === 'right') {
		            left += targetWidth;
		            tAttachment.left = 'right';
		
		            left += width;
		            eAttachment.left = 'left';
		          } else if (eAttachment.left === 'left') {
		            left += targetWidth;
		            tAttachment.left = 'right';
		
		            left -= width;
		            eAttachment.left = 'right';
		          }
		        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
		          if (eAttachment.left === 'left') {
		            left -= targetWidth;
		            tAttachment.left = 'left';
		
		            left -= width;
		            eAttachment.left = 'right';
		          } else if (eAttachment.left === 'right') {
		            left -= targetWidth;
		            tAttachment.left = 'left';
		
		            left += width;
		            eAttachment.left = 'left';
		          }
		        } else if (tAttachment.left === 'center') {
		          if (left + width > bounds[2] && eAttachment.left === 'left') {
		            left -= width;
		            eAttachment.left = 'right';
		          } else if (left < bounds[0] && eAttachment.left === 'right') {
		            left += width;
		            eAttachment.left = 'left';
		          }
		        }
		      }
		
		      if (changeAttachY === 'element' || changeAttachY === 'both') {
		        if (top < bounds[1] && eAttachment.top === 'bottom') {
		          top += height;
		          eAttachment.top = 'top';
		        }
		
		        if (top + height > bounds[3] && eAttachment.top === 'top') {
		          top -= height;
		          eAttachment.top = 'bottom';
		        }
		      }
		
		      if (changeAttachX === 'element' || changeAttachX === 'both') {
		        if (left < bounds[0]) {
		          if (eAttachment.left === 'right') {
		            left += width;
		            eAttachment.left = 'left';
		          } else if (eAttachment.left === 'center') {
		            left += width / 2;
		            eAttachment.left = 'left';
		          }
		        }
		
		        if (left + width > bounds[2]) {
		          if (eAttachment.left === 'left') {
		            left -= width;
		            eAttachment.left = 'right';
		          } else if (eAttachment.left === 'center') {
		            left -= width / 2;
		            eAttachment.left = 'right';
		          }
		        }
		      }
		
		      if (typeof pin === 'string') {
		        pin = pin.split(',').map(function (p) {
		          return p.trim();
		        });
		      } else if (pin === true) {
		        pin = ['top', 'left', 'right', 'bottom'];
		      }
		
		      pin = pin || [];
		
		      var pinned = [];
		      var oob = [];
		
		      if (top < bounds[1]) {
		        if (pin.indexOf('top') >= 0) {
		          top = bounds[1];
		          pinned.push('top');
		        } else {
		          oob.push('top');
		        }
		      }
		
		      if (top + height > bounds[3]) {
		        if (pin.indexOf('bottom') >= 0) {
		          top = bounds[3] - height;
		          pinned.push('bottom');
		        } else {
		          oob.push('bottom');
		        }
		      }
		
		      if (left < bounds[0]) {
		        if (pin.indexOf('left') >= 0) {
		          left = bounds[0];
		          pinned.push('left');
		        } else {
		          oob.push('left');
		        }
		      }
		
		      if (left + width > bounds[2]) {
		        if (pin.indexOf('right') >= 0) {
		          left = bounds[2] - width;
		          pinned.push('right');
		        } else {
		          oob.push('right');
		        }
		      }
		
		      if (pinned.length) {
		        (function () {
		          var pinnedClass = undefined;
		          if (typeof _this.options.pinnedClass !== 'undefined') {
		            pinnedClass = _this.options.pinnedClass;
		          } else {
		            pinnedClass = _this.getClass('pinned');
		          }
		
		          addClasses.push(pinnedClass);
		          pinned.forEach(function (side) {
		            addClasses.push(pinnedClass + '-' + side);
		          });
		        })();
		      }
		
		      if (oob.length) {
		        (function () {
		          var oobClass = undefined;
		          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
		            oobClass = _this.options.outOfBoundsClass;
		          } else {
		            oobClass = _this.getClass('out-of-bounds');
		          }
		
		          addClasses.push(oobClass);
		          oob.forEach(function (side) {
		            addClasses.push(oobClass + '-' + side);
		          });
		        })();
		      }
		
		      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
		        eAttachment.left = tAttachment.left = false;
		      }
		      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
		        eAttachment.top = tAttachment.top = false;
		      }
		
		      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
		        _this.updateAttachClasses(eAttachment, tAttachment);
		      }
		    });
		
		    defer(function () {
		      if (!(_this.options.addTargetClasses === false)) {
		        updateClasses(_this.target, addClasses, allClasses);
		      }
		      updateClasses(_this.element, addClasses, allClasses);
		    });
		
		    return { top: top, left: left };
		  }
		});
		/* globals TetherBase */
		
		'use strict';
		
		var _TetherBase$Utils = TetherBase.Utils;
		var getBounds = _TetherBase$Utils.getBounds;
		var updateClasses = _TetherBase$Utils.updateClasses;
		var defer = _TetherBase$Utils.defer;
		
		TetherBase.modules.push({
		  position: function position(_ref) {
		    var _this = this;
		
		    var top = _ref.top;
		    var left = _ref.left;
		
		    var _cache = this.cache('element-bounds', function () {
		      return getBounds(_this.element);
		    });
		
		    var height = _cache.height;
		    var width = _cache.width;
		
		    var targetPos = this.getTargetBounds();
		
		    var bottom = top + height;
		    var right = left + width;
		
		    var abutted = [];
		    if (top <= targetPos.bottom && bottom >= targetPos.top) {
		      ['left', 'right'].forEach(function (side) {
		        var targetPosSide = targetPos[side];
		        if (targetPosSide === left || targetPosSide === right) {
		          abutted.push(side);
		        }
		      });
		    }
		
		    if (left <= targetPos.right && right >= targetPos.left) {
		      ['top', 'bottom'].forEach(function (side) {
		        var targetPosSide = targetPos[side];
		        if (targetPosSide === top || targetPosSide === bottom) {
		          abutted.push(side);
		        }
		      });
		    }
		
		    var allClasses = [];
		    var addClasses = [];
		
		    var sides = ['left', 'top', 'right', 'bottom'];
		    allClasses.push(this.getClass('abutted'));
		    sides.forEach(function (side) {
		      allClasses.push(_this.getClass('abutted') + '-' + side);
		    });
		
		    if (abutted.length) {
		      addClasses.push(this.getClass('abutted'));
		    }
		
		    abutted.forEach(function (side) {
		      addClasses.push(_this.getClass('abutted') + '-' + side);
		    });
		
		    defer(function () {
		      if (!(_this.options.addTargetClasses === false)) {
		        updateClasses(_this.target, addClasses, allClasses);
		      }
		      updateClasses(_this.element, addClasses, allClasses);
		    });
		
		    return true;
		  }
		});
		/* globals TetherBase */
		
		'use strict';
		
		var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
		
		TetherBase.modules.push({
		  position: function position(_ref) {
		    var top = _ref.top;
		    var left = _ref.left;
		
		    if (!this.options.shift) {
		      return;
		    }
		
		    var shift = this.options.shift;
		    if (typeof this.options.shift === 'function') {
		      shift = this.options.shift.call(this, { top: top, left: left });
		    }
		
		    var shiftTop = undefined,
		        shiftLeft = undefined;
		    if (typeof shift === 'string') {
		      shift = shift.split(' ');
		      shift[1] = shift[1] || shift[0];
		
		      var _shift = shift;
		
		      var _shift2 = _slicedToArray(_shift, 2);
		
		      shiftTop = _shift2[0];
		      shiftLeft = _shift2[1];
		
		      shiftTop = parseFloat(shiftTop, 10);
		      shiftLeft = parseFloat(shiftLeft, 10);
		    } else {
		      shiftTop = shift.top;
		      shiftLeft = shift.left;
		    }
		
		    top += shiftTop;
		    left += shiftLeft;
		
		    return { top: top, left: left };
		  }
		});
		return Tether;
		
		}));
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    props: {
		        id: String
		    },
		
		    methods: {
		        eventTargetsComponent: function eventTargetsComponent(eventTarget) {
		            if (eventTarget === undefined || this.id === eventTarget) {
		                return true;
		            }
		
		            return false;
		        }
		    }
		};
	
	/***/ },
	/* 62 */
	/***/ function(module, exports) {
	
		module.exports = "\n<ul\n    class=\"ui-menu\" role=\"menu\" tabindex=\"-1\" @keydown.esc=\"closeDropdown\" v-el:dropdown\n    :class=\"{ 'has-icons': showIcons, 'has-secondary-text': showSecondaryText }\"\n>\n    <ui-menu-option\n        :type=\"option.type\" :icon=\"option.icon\" :text=\"option.text\" :disabled=\"option.disabled\"\n        :secondary-text=\"option.secondaryText\" :option=\"option\" :show-icon=\"showIcons\"\n        :show-secondary-text=\"showSecondaryText\" :hide-ripple-ink=\"hideRippleInk\"\n        :partial=\"option.partial || partial\"\n\n        @keydown.enter.prevent=\"optionSelect(option)\" @click=\"optionSelect(option)\"\n\n        v-for=\"option in options\"\n    ></ui-menu-option>\n\n    <div\n        class=\"ui-menu-focus-redirector\" @focus=\"redirectFocus\" tabindex=\"0\"\n    ></div>\n</ul>\n";
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(64)
		__vue_script__ = __webpack_require__(65)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiPopover.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(66)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiPopover.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 64 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _ShowsDropdown = __webpack_require__(58);
		
		var _ShowsDropdown2 = _interopRequireDefault(_ShowsDropdown);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-popover',
		
		    events: {
		        'dropdown-opened': function dropdownOpened() {
		            if (this.containFocus) {
		                document.addEventListener('focus', this.restrictFocus, true);
		            }
		
		            this.$dispatch('opened');
		
		            return true;
		        },
		
		        'dropdown-closed': function dropdownClosed() {
		            if (this.containFocus) {
		                document.removeEventListener('focus', this.restrictFocus, true);
		            }
		
		            this.$dispatch('closed');
		
		            return true;
		        }
		    },
		
		    methods: {
		        restrictFocus: function restrictFocus(e) {
		            if (!this.$els.dropdown.contains(e.target)) {
		                e.stopPropagation();
		
		                this.$els.dropdown.focus();
		            }
		        }
		    },
		
		    mixins: [_ShowsDropdown2.default]
		};
	
	/***/ },
	/* 66 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-popover\" role=\"dialog\" tabindex=\"-1\" @keydown.esc=\"closeDropdown\" v-el:dropdown\n>\n    <slot></slot>\n</div>\n";
	
	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(68)
		__vue_script__ = __webpack_require__(69)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiProgressCircular.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(70)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiProgressCircular.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 68 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 69 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    name: 'ui-progress-circular',
		
		    props: {
		        show: {
		            type: Boolean,
		            default: false
		        },
		        type: {
		            type: String,
		            default: 'indeterminate' },
		        color: {
		            type: String,
		            default: 'primary' },
		        value: {
		            type: Number,
		            default: 0
		        },
		        size: {
		            type: Number,
		            default: 32
		        },
		        stroke: Number,
		        autoStroke: {
		            type: Boolean,
		            default: true
		        },
		        disableTransition: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        strokeDashArray: function strokeDashArray() {
		            var circumference = 2 * Math.PI * this.radius;
		
		            return Math.round(circumference * 1000) / 1000;
		        },
		        strokeDashOffset: function strokeDashOffset() {
		            var value = this.moderateValue(this.value);
		            var circumference = 2 * Math.PI * this.radius;
		
		            return (100 - value) / 100 * circumference;
		        },
		        radius: function radius() {
		            return (this.size - this.stroke) / 2;
		        }
		    },
		
		    created: function created() {
		        if (!this.stroke) {
		            if (this.autoStroke) {
		                this.stroke = parseInt(this.size / 8, 10);
		            } else {
		                this.stroke = 4;
		            }
		        }
		    },
		
		
		    methods: {
		        moderateValue: function moderateValue(value) {
		            if (isNaN(value) || value < 0) {
		                return 0;
		            }
		
		            if (value > 100) {
		                return 100;
		            }
		
		            return value;
		        }
		    }
		};
	
	/***/ },
	/* 70 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-progress-circular\" :style=\"{ 'width': size + 'px', 'height': size + 'px' }\"\n    v-show=\"show\" :transition=\"disableTransition ? null : 'ui-progress-circular-toggle'\"\n>\n    <svg\n        class=\"ui-progress-circular-determinate\" :width=\"size\" :height=\"size\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" :aria-valuenow=\"value\"\n        v-if=\"type === 'determinate'\"\n    >\n        <circle\n            class=\"ui-progress-circular-determinate-path\" :class=\"[color]\" :r=\"radius\"\n            :cx=\"size / 2\" :cy=\"size / 2\" fill=\"transparent\" :stroke-dasharray=\"strokeDashArray\"\n            stroke-dashoffset=\"0\"\n\n            :style=\"{ 'stroke-dashoffset': strokeDashOffset, 'stroke-width': stroke }\"\n        ></circle>\n    </svg>\n\n    <svg\n        class=\"ui-progress-circular-indeterminate\" viewBox=\"25 25 50 50\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" v-else\n    >\n        <circle\n            class=\"ui-progress-circular-indeterminate-path\" :class=\"[color]\" cx=\"50\" cy=\"50\"\n            r=\"20\" fill=\"none\" stroke-miterlimit=\"10\" :stroke-width=\"stroke\"\n        >\n    </svg>\n</div>\n";
	
	/***/ },
	/* 71 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		exports.default = function (value) {
		    this.el.disabled = Boolean(value);
		};
	
	/***/ },
	/* 72 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    props: {
		        openDropdownOn: String,
		        dropdownPosition: String,
		        hasPopover: {
		            type: Boolean,
		            default: false
		        },
		        hasDropdownMenu: {
		            type: Boolean,
		            default: false
		        },
		        menuOptions: {
		            type: Array,
		            default: function _default() {
		                return [];
		            }
		        },
		        showMenuIcons: {
		            type: Boolean,
		            default: false
		        },
		        showMenuSecondaryText: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    methods: {
		        menuOptionSelect: function menuOptionSelect(option) {
		            this.$dispatch('menu-option-selected', option);
		        }
		    }
		};
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiTooltip = __webpack_require__(74);
		
		var _UiTooltip2 = _interopRequireDefault(_UiTooltip);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    props: {
		        tooltip: String,
		        openTooltipOn: String,
		        tooltipPosition: String
		    },
		
		    components: {
		        UiTooltip: _UiTooltip2.default
		    }
		};
	
	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(75)
		__vue_script__ = __webpack_require__(76)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiTooltip.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(78)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiTooltip.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 75 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _tetherTooltip = __webpack_require__(77);
		
		var _tetherTooltip2 = _interopRequireDefault(_tetherTooltip);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-tooltip',
		
		    props: {
		        content: String,
		        trigger: {
		            type: Element,
		            required: true
		        },
		        position: {
		            type: String,
		            default: 'bottom center'
		        },
		        openOn: {
		            type: String,
		            default: 'hover focus'
		        }
		    },
		
		    data: function data() {
		        return {
		            tooltip: null
		        };
		    },
		
		
		    watch: {
		        trigger: function trigger() {
		            if (!this.tooltip) {
		                this.initialize();
		            }
		        }
		    },
		
		    ready: function ready() {
		        this.initialize();
		    },
		    beforeDestory: function beforeDestory() {
		        if (this.tooltip) {
		            this.tooltip.remove();
		            this.tooltip.destroy();
		        }
		    },
		
		
		    methods: {
		        initialize: function initialize() {
		            if (this.trigger) {
		                this.tooltip = new _tetherTooltip2.default({
		                    target: this.trigger,
		                    content: this.$els.tooltip,
		                    classes: 'ui-tooltip-theme',
		                    position: this.position,
		                    openOn: 'hover focus'
		                });
		            }
		        }
		    }
		};
	
	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether-tooltip 1.1.0 */
		
		(function(root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(59),__webpack_require__(60)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === 'object') {
		    module.exports = factory(require('tether-drop'), require('tether'));
		  } else {
		    root.Tooltip = factory(root.Drop, root.Tether);
		  }
		}(this, function(Drop, Tether) {
		
		/* global Tether Drop */
		
		'use strict';
		
		var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
		
		var extend = Tether.Utils.extend;
		
		var _Drop = Drop.createContext({
		  classPrefix: 'tooltip'
		});
		
		var defaults = {
		  position: 'top center',
		  openOn: 'hover',
		  classes: 'tooltip-theme-arrows',
		  constrainToWindow: true,
		  constrainToScrollParent: false
		};
		
		var tooltipCount = 0;
		
		var Tooltip = (function () {
		  function Tooltip(options) {
		    _classCallCheck(this, Tooltip);
		
		    this.options = options;
		
		    if (!this.options.target) {
		      throw new Error('Tooltip Error: You must provide a target for Tooltip to attach to');
		    }
		
		    var position = this.options.target.getAttribute('data-tooltip-position');
		    if (position) {
		      if (typeof this.options.position === 'undefined') {
		        this.options.position = position;
		      }
		    }
		
		    var content = this.options.target.getAttribute('data-tooltip');
		
		    if (content) {
		      if (typeof this.options.content === 'undefined') {
		        var contentEl = document.createElement('div');
		        contentEl.innerHTML = content;
		
		        // Add ARIA attributes (see #50)
		        contentEl.setAttribute('role', 'tooltip');
		        contentEl.id = 'drop-tooltip-' + tooltipCount;
		        this.options.target.setAttribute('aria-describedby', contentEl.id);
		        tooltipCount += 1;
		
		        this.options.content = contentEl;
		      }
		    }
		
		    if (!this.options.content) {
		      throw new Error('Tooltip Error: You must provide content for Tooltip to display');
		    }
		
		    this.options = extend({}, defaults, this.options);
		
		    this.drop = new _Drop(this.options);
		  }
		
		  _createClass(Tooltip, [{
		    key: 'close',
		    value: function close() {
		      this.drop.close();
		    }
		  }, {
		    key: 'open',
		    value: function open() {
		      this.drop.open();
		    }
		  }, {
		    key: 'toggle',
		    value: function toggle() {
		      this.drop.toggle();
		    }
		  }, {
		    key: 'remove',
		    value: function remove() {
		      this.drop.remove();
		    }
		  }, {
		    key: 'destroy',
		    value: function destroy() {
		      this.drop.destroy();
		    }
		  }, {
		    key: 'position',
		    value: function position() {
		      this.drop.position();
		    }
		  }]);
		
		  return Tooltip;
		})();
		
		var initialized = [];
		
		Tooltip.init = function () {
		  var tooltipElements = document.querySelectorAll('[data-tooltip]');
		  var len = tooltipElements.length;
		  for (var i = 0; i < len; ++i) {
		    var el = tooltipElements[i];
		    if (initialized.indexOf(el) === -1) {
		      new Tooltip({
		        target: el
		      });
		      initialized.push(el);
		    }
		  }
		};
		
		document.addEventListener('DOMContentLoaded', function () {
		  if (Tooltip.autoinit !== false) {
		    Tooltip.init();
		  }
		});
		return Tooltip;
		
		}));
	
	
	/***/ },
	/* 78 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-tooltip\" v-text=\"content\" v-el:tooltip></div>\n";
	
	/***/ },
	/* 79 */
	/***/ function(module, exports) {
	
		module.exports = "\n<button\n    class=\"ui-icon-button\" :class=\"styleClasses\" :aria-label=\"ariaLabel || tooltip\"\n    :type=\"buttonType\" v-disabled=\"disabled || loading\" v-el:button\n>\n    <ui-icon\n        class=\"ui-icon-button-icon\" :icon=\"icon\" v-show=\"!loading\"\n    ></ui-icon>\n\n    <ui-progress-circular\n        class=\"ui-icon-button-spinner\" :color=\"spinnerColor\" :size=\"24\" :stroke=\"4.5\"\n        disable-transition v-show=\"loading\"\n    ></ui-progress-circular>\n\n    <ui-ripple-ink v-if=\"!hideRippleInk && !disabled\" :trigger=\"$els.button\"></ui-ripple-ink>\n\n    <ui-tooltip\n        :trigger=\"$els.button\" :content=\"tooltip\" :position=\"tooltipPosition\" v-if=\"tooltip\"\n        :open-on=\"openTooltipOn\"\n    ></ui-tooltip>\n\n    <ui-menu\n        class=\"ui-button-dropdown-menu\" :trigger=\"$els.button\" :options=\"menuOptions\"\n        :show-icons=\"showMenuIcons\" :show-secondary-text=\"showMenuSecondaryText\"\n        :open-on=\"openDropdownOn\" @option-selected=\"menuOptionSelect\"\n        :dropdown-position=\"dropdownPosition\" v-if=\"hasDropdownMenu\"\n    ></ui-menu>\n\n    <ui-popover\n        :trigger=\"$els.button\" :open-on=\"openDropdownOn\" :dropdown-position=\"dropdownPosition\"\n        v-if=\"hasPopover\"\n    >\n        <slot name=\"popover\"></slot>\n    </ui-popover>\n</button>\n";
	
	/***/ },
	/* 80 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-alert\">\n    <div\n        class=\"ui-alert-body\" :class=\"[type]\" role=\"alert\" v-show=\"show\"\n        transition=\"ui-alert-toggle\"\n    >\n        <ui-icon class=\"ui-alert-icon\" :icon=\"iconName\" v-if=\"!hideIcon\"></ui-icon>\n\n        <div class=\"ui-alert-text\">\n            <slot>\n                <span v-text=\"text\"></span>\n            </slot>\n        </div>\n\n        <ui-icon-button\n            class=\"ui-alert-close-button\" type=\"clear\" icon=\"&#xE5CD\" aria-label=\"Close\"\n            @click=\"close\" v-if=\"dismissible\"\n        ></ui-icon-button>\n    </div>\n</div>\n";
	
	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(82)
		__vue_script__ = __webpack_require__(83)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiAutocomplete.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(108)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiAutocomplete.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 82 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _fuzzysearch = __webpack_require__(84);
		
		var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiAutocompleteSuggestion = __webpack_require__(85);
		
		var _UiAutocompleteSuggestion2 = _interopRequireDefault(_UiAutocompleteSuggestion);
		
		var _autofocus = __webpack_require__(90);
		
		var _autofocus2 = _interopRequireDefault(_autofocus);
		
		var _HasTextInput = __webpack_require__(91);
		
		var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
		
		var _ValidatesInput = __webpack_require__(92);
		
		var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-autocomplete',
		
		    props: {
		        suggestions: {
		            type: Array,
		            default: []
		        },
		        limit: {
		            type: Number,
		            default: 8
		        },
		        partial: String,
		        append: {
		            type: Boolean,
		            default: false
		        },
		        appendDelimiter: {
		            type: String,
		            default: ', '
		        },
		        minChars: {
		            type: Number,
		            default: 2
		        },
		        showOnUpDown: {
		            type: Boolean,
		            default: true
		        },
		        autofocus: {
		            type: Boolean,
		            default: false
		        },
		        filter: Function,
		        autoHighlightFirstMatch: {
		            type: Boolean,
		            default: true
		        },
		        cycleHighlight: {
		            type: Boolean,
		            default: true
		        },
		        keys: {
		            type: Object,
		            default: function _default() {
		                return {
		                    text: 'text',
		                    value: 'value',
		                    image: 'image'
		                };
		            }
		        }
		    },
		
		    data: function data() {
		        return {
		            showDropdown: false,
		            highlightedItem: -1,
		            ignoreValueChange: false
		        };
		    },
		
		
		    computed: {
		        showIcon: function showIcon() {
		            return Boolean(this.icon);
		        }
		    },
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            if (document.activeElement === this.$els.input) {
		                document.activeElement.blur();
		            }
		
		            this.value = this.initialValue;
		            this.dirty = false;
		            this.valid = true;
		        }
		    },
		
		    watch: {
		        value: function value() {
		            if (!this.ignoreValueChange && this.value.length >= this.minChars) {
		                this.open();
		            }
		
		            this.highlightedItem = this.autoHighlightFirstMatch ? 0 : -1;
		        }
		    },
		
		    ready: function ready() {
		        document.addEventListener('click', this.closeOnExternalClick);
		    },
		    beforeDestroy: function beforeDestroy() {
		        document.removeEventListener('click', this.closeOnExternalClick);
		    },
		
		
		    methods: {
		        search: function search(item) {
		            if (this.filter) {
		                return this.filter(item, this.value);
		            }
		
		            var text = item[this.keys.text] || item;
		            var query = this.value;
		
		            if (typeof query === 'string') {
		                query = query.toLowerCase();
		            }
		
		            return (0, _fuzzysearch2.default)(query, text.toLowerCase());
		        },
		        select: function select(item) {
		            var _this = this;
		
		            if (this.append) {
		                this.value += this.appendDelimiter + (item[this.keys.value] || item);
		            } else {
		                this.value = item[this.keys.value] || item;
		            }
		
		            this.$dispatch('selected', item);
		
		            this.validate();
		
		            this.$nextTick(function () {
		                _this.close();
		                _this.$els.input.focus();
		            });
		        },
		        highlight: function highlight(index) {
		            var firstIndex = 0;
		            var lastIndex = this.$refs.items.length - 1;
		
		            if (index === -2) {
		                index = lastIndex;
		            } else if (index < firstIndex) {
		                index = this.cycleHighlight ? lastIndex : index;
		            } else if (index > lastIndex) {
		                index = this.cycleHighlight ? firstIndex : -1;
		            }
		
		            this.highlightedItem = index;
		
		            if (this.showOnUpDown) {
		                this.open();
		            }
		
		            if (index < firstIndex || index > lastIndex) {
		                this.$dispatch('highlight-overflow', index);
		            } else {
		                this.$dispatch('highlighted', this.$refs.items[index].item, index);
		            }
		        },
		        selectHighlighted: function selectHighlighted(index, e) {
		            if (this.showDropdown && this.$refs.items.length) {
		                e.preventDefault();
		                this.select(this.$refs.items[index].item);
		            }
		        },
		        clearSearch: function clearSearch() {
		            this.value = '';
		        },
		        open: function open() {
		            if (!this.showDropdown) {
		                this.showDropdown = true;
		                this.$dispatch('opened');
		            }
		        },
		        close: function close() {
		            if (this.showDropdown) {
		                this.showDropdown = false;
		                this.highlightedItem = -1;
		
		                this.$dispatch('closed');
		                this.validate();
		            }
		        },
		        closeOnExternalClick: function closeOnExternalClick(e) {
		            if (!this.$els.autocomplete.contains(e.target) && this.showDropdown) {
		                this.close();
		            }
		        },
		        focus: function focus() {
		            this.active = true;
		        },
		        blur: function blur() {
		            this.active = false;
		
		            if (!this.dirty) {
		                this.dirty = true;
		            }
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default,
		        UiAutocompleteSuggestion: _UiAutocompleteSuggestion2.default
		    },
		
		    directives: {
		        autofocus: _autofocus2.default
		    },
		
		    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
		};
	
	/***/ },
	/* 84 */
	/***/ function(module, exports) {
	
		'use strict';
		
		function fuzzysearch (needle, haystack) {
		  var tlen = haystack.length;
		  var qlen = needle.length;
		  if (qlen > tlen) {
		    return false;
		  }
		  if (qlen === tlen) {
		    return needle === haystack;
		  }
		  outer: for (var i = 0, j = 0; i < qlen; i++) {
		    var nch = needle.charCodeAt(i);
		    while (j < tlen) {
		      if (haystack.charCodeAt(j++) === nch) {
		        continue outer;
		      }
		    }
		    return false;
		  }
		  return true;
		}
		
		module.exports = fuzzysearch;
	
	
	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(86)
		__vue_script__ = __webpack_require__(87)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiAutocompleteSuggestion.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(89)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiAutocompleteSuggestion.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 86 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _uuid = __webpack_require__(88);
		
		var _uuid2 = _interopRequireDefault(_uuid);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-autocomplete-suggestion',
		
		    props: {
		        id: {
		            type: String,
		            default: function _default() {
		                return _uuid2.default.short();
		            }
		        },
		        item: {
		            type: [String, Object],
		            required: true
		        },
		        partial: {
		            type: String,
		            default: 'ui-autocomplete-simple' },
		        highlighted: {
		            type: Boolean,
		            default: false
		        },
		        keys: {
		            type: Object,
		            default: function _default() {
		                return {
		                    text: 'text',
		                    value: 'value',
		                    image: 'image'
		                };
		            }
		        }
		    },
		
		    partials: {
		        'ui-autocomplete-simple': '\n            <li class="ui-autocomplete-suggestion-item" v-text="item[keys.text] || item"></li>\n        ',
		
		        'ui-autocomplete-image': '\n            <div\n                class="image" :style="{ \'background-image\': \'url(\' + item[keys.image] + \')\' }"\n            ></div>\n            <div class="text" v-text="item[keys.text]"></div>\n        '
		    }
		};
	
	/***/ },
	/* 88 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		/**
		 * Fast UUID generator, RFC4122 version 4 compliant.
		 * @author Jeff Ward (jcward.com).
		 * @license MIT license
		 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
		 **/
		
		var lut = [];
		
		for (var i = 0; i < 256; i++) {
		    lut[i] = (i < 16 ? '0' : '') + i.toString(16);
		}
		
		var generate = function generate() {
		    var d0 = Math.random() * 0xffffffff | 0;
		    var d1 = Math.random() * 0xffffffff | 0;
		    var d2 = Math.random() * 0xffffffff | 0;
		    var d3 = Math.random() * 0xffffffff | 0;
		
		    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
		};
		
		var short = function short(prefix) {
		    prefix = prefix || '';
		
		    var uuid = generate();
		
		    return prefix + uuid.split('-')[0];
		};
		
		exports.default = {
		    generate: generate,
		    short: short
		};
	
	/***/ },
	/* 89 */
	/***/ function(module, exports) {
	
		module.exports = "\n<li\n    class=\"ui-autocomplete-suggestion\" :class=\"[partial, { 'highlighted': highlighted }]\"\n    :id=\"id\"\n>\n    <partial :name=\"partial\"></partial>\n</li>\n";
	
	/***/ },
	/* 90 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		exports.default = function (value) {
		    this.el.autofocus = Boolean(value);
		};
	
	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    props: {
		        id: String,
		        name: {
		            type: String,
		            required: true
		        },
		        placeholder: String,
		        value: {
		            type: [String, Number],
		            default: '',
		            twoWay: true
		        },
		        icon: String,
		        iconRight: {
		            type: Boolean,
		            default: false
		        },
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        helpText: String,
		        disabled: {
		            type: Boolean,
		            default: false
		        },
		        debounce: {
		            type: Number,
		            default: null
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false,
		            initialValue: ''
		        };
		    },
		
		
		    computed: {
		        showFeedback: function showFeedback() {
		            var canBeValidated = Boolean(this.validationRules);
		            var hasHelpText = Boolean(this.helpText);
		
		            return canBeValidated || hasHelpText;
		        }
		    },
		
		    created: function created() {
		        this.initialValue = this.value;
		    },
		
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _validatorjs = __webpack_require__(93);
		
		var _validatorjs2 = _interopRequireDefault(_validatorjs);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    props: {
		        valid: {
		            type: Boolean,
		            default: true,
		            twoWay: true
		        },
		        dirty: {
		            type: Boolean,
		            default: false,
		            twoWay: true
		        },
		        hideValidationErrors: {
		            type: Boolean,
		            default: false
		        },
		        validationRules: [String, Array],
		        validationMessages: Object
		    },
		
		    data: function data() {
		        return {
		            validationError: ''
		        };
		    },
		
		
		    events: {
		        'ui-input::set-validity': function uiInputSetValidity(valid, error, id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.setValidity(valid, error);
		        }
		    },
		
		    methods: {
		        validate: function validate() {
		            if (!this.validationRules || !this.dirty) {
		                return;
		            }
		
		            var data = {
		                value: this.value
		            };
		
		            var rules = {
		                value: this.validationRules
		            };
		
		            var validation = new _validatorjs2.default(data, rules, this.validationMessages);
		
		            validation.setAttributeNames({ value: this.name.replace(/_/g, ' ') });
		
		            this.setValidity(validation.passes(), validation.errors.first('value'));
		        },
		        setValidity: function setValidity(valid, error) {
		            this.valid = valid;
		
		            if (!valid && error && error.length) {
		                this.validationError = error;
		            }
		        }
		    }
		};
	
	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {
	
		var Rules = __webpack_require__(94);
		var Lang = __webpack_require__(95);
		var Errors = __webpack_require__(106);
		var Attributes = __webpack_require__(97);
		var AsyncResolvers = __webpack_require__(107);
		
		var Validator = function(input, rules, customMessages) {
		  var lang = Validator.getDefaultLang();
		  this.input = input;
		  this.messages = Lang._make(lang);
		  this.messages._setCustom(customMessages);
		  this.setAttributeFormatter(Validator.prototype.attributeFormatter);
		
		  this.errors = new Errors();
		  this.errorCount = 0;
		
		  this.hasAsync = false;
		  this.rules = this._parseRules(rules);
		};
		
		Validator.prototype = {
		
		  constructor: Validator,
		
		  /**
		   * Default language
		   *
		   * @type {string}
		   */
		  lang: 'en',
		
		  /**
		   * Numeric based rules
		   *
		   * @type {array}
		   */
		  numericRules: ['integer', 'numeric'],
		
		  /**
		   * Attribute formatter.
		   *
		   * @type {function}
		   */
		  attributeFormatter: Attributes.formatter,
		
		  /**
		   * Run validator
		   *
		   * @return {boolean} Whether it passes; true = passes, false = fails
		   */
		  check: function() {
		    var self = this;
		
		    for (var attribute in this.rules) {
		      var attributeRules = this.rules[attribute];
		      var inputValue = this.input[attribute]; // if it doesnt exist in input, it will be undefined
		
		      for (var i = 0, len = attributeRules.length, rule, ruleOptions, rulePassed; i < len; i++) {
		        ruleOptions = attributeRules[i];
		        rule = this.getRule(ruleOptions.name);
		
		        if (!this._isValidatable(rule, inputValue)) {
		          continue;
		        }
		
		        rulePassed = rule.validate(inputValue, ruleOptions.value, attribute);
		        if (!rulePassed) {
		          this._addFailure(rule);
		        }
		
		        if (this._shouldStopValidating(attribute, rulePassed)) {
		          break;
		        }
		      }
		    }
		
		    return this.errorCount === 0;
		  },
		
		  /**
		   * Run async validator
		   *
		   * @param {function} passes
		   * @param {function} fails
		   * @return {void}
		   */
		  checkAsync: function(passes, fails) {
		    var _this = this;
		    passes = passes || function() {};
		    fails = fails || function() {};
		
		    var failsOne = function(rule, message) {
		      _this._addFailure(rule, message);
		    };
		
		    var resolvedAll = function(allPassed) {
		      if (allPassed) {
		        passes();
		      } else {
		        fails();
		      }
		    };
		
		    var validateRule = function(inputValue, ruleOptions, attribute, rule) {
		      return function() {
		        var resolverIndex = asyncResolvers.add(rule);
		        rule.validate(inputValue, ruleOptions.value, attribute, function() {
		          asyncResolvers.resolve(resolverIndex);
		        });
		      };
		    };
		
		    var asyncResolvers = new AsyncResolvers(failsOne, resolvedAll);
		
		    for (var attribute in this.rules) {
		      var attributeRules = this.rules[attribute];
		      var inputValue = this.input[attribute]; // if it doesnt exist in input, it will be undefined
		
		      for (var i = 0, len = attributeRules.length, rule, ruleOptions; i < len; i++) {
		        ruleOptions = attributeRules[i];
		
		        rule = this.getRule(ruleOptions.name);
		
		        if (!this._isValidatable(rule, inputValue)) {
		          continue;
		        }
		
		        validateRule(inputValue, ruleOptions, attribute, rule)();
		      }
		    }
		
		    asyncResolvers.enableFiring();
		    asyncResolvers.fire();
		  },
		
		  /**
		   * Add failure and error message for given rule
		   *
		   * @param {Rule} rule
		   */
		  _addFailure: function(rule) {
		    var msg = this.messages.render(rule);
		    this.errors.add(rule.attribute, msg);
		    this.errorCount++;
		  },
		
		  /**
		   * Parse rules, normalizing format into: { attribute: [{ name: 'age', value: 3 }] }
		   *
		   * @param  {object} rules
		   * @return {object}
		   */
		  _parseRules: function(rules) {
		    var parsedRules = {};
		    for (var attribute in rules) {
		      var rulesArray = rules[attribute];
		      var attributeRules = [];
		
		      if (typeof rulesArray === 'string') {
		        rulesArray = rulesArray.split('|');
		      }
		
		      for (var i = 0, len = rulesArray.length, rule; i < len; i++) {
		        rule = this._extractRuleAndRuleValue(rulesArray[i]);
		        if (Rules.isAsync(rule.name)) {
		          this.hasAsync = true;
		        }
		        attributeRules.push(rule);
		      }
		
		      parsedRules[attribute] = attributeRules;
		    }
		    return parsedRules;
		  },
		
		  /**
		   * Extract a rule and a value from a ruleString (i.e. min:3), rule = min, value = 3
		   *
		   * @param  {string} ruleString min:3
		   * @return {object} object containing the name of the rule and value
		   */
		  _extractRuleAndRuleValue: function(ruleString) {
		    var rule = {},
		      ruleArray;
		
		    rule.name = ruleString;
		
		    if (ruleString.indexOf(':') >= 0) {
		      ruleArray = ruleString.split(':');
		      rule.name = ruleArray[0];
		      rule.value = ruleArray.slice(1).join(":");
		    }
		
		    return rule;
		  },
		
		  /**
		   * Determine if attribute has any of the given rules
		   *
		   * @param  {string}  attribute
		   * @param  {array}   findRules
		   * @return {boolean}
		   */
		  _hasRule: function(attribute, findRules) {
		    var rules = this.rules[attribute] || [];
		    for (var i = 0, len = rules.length; i < len; i++) {
		      if (findRules.indexOf(rules[i].name) > -1) {
		        return true;
		      }
		    }
		    return false;
		  },
		
		  /**
		   * Determine if attribute has any numeric-based rules.
		   *
		   * @param  {string}  attribute
		   * @return {Boolean}
		   */
		  _hasNumericRule: function(attribute) {
		    return this._hasRule(attribute, this.numericRules);
		  },
		
		  /**
		   * Determine if rule is validatable
		   *
		   * @param  {Rule}   rule
		   * @param  {mixed}  value
		   * @return {boolean}
		   */
		  _isValidatable: function(rule, value) {
		    if (Rules.isImplicit(rule.name)) {
		      return true;
		    }
		
		    return this.getRule('required').validate(value);
		  },
		
		
		  /**
		   * Determine if we should stop validating.
		   *
		   * @param  {string} attribute
		   * @param  {boolean} rulePassed
		   * @return {boolean}
		   */
		  _shouldStopValidating: function(attribute, rulePassed) {
		
		    var stopOnAttributes = this.stopOnAttributes;
		    if (stopOnAttributes === false || rulePassed === true) {
		      return false;
		    }
		
		    if (stopOnAttributes instanceof Array) {
		      return stopOnAttributes.indexOf(attribute) > -1;
		    }
		
		    return true;
		  },
		
		  /**
		   * Set custom attribute names.
		   *
		   * @param {object} attributes
		   * @return {void}
		   */
		  setAttributeNames: function(attributes) {
		    this.messages._setAttributeNames(attributes);
		  },
		
		  /**
		   * Set the attribute formatter.
		   *
		   * @param {fuction} func
		   * @return {void}
		   */
		  setAttributeFormatter: function(func) {
		    this.messages._setAttributeFormatter(func);
		  },
		
		  /**
		   * Get validation rule
		   *
		   * @param  {string} name
		   * @return {Rule}
		   */
		  getRule: function(name) {
		    return Rules.make(name, this);
		  },
		
		  /**
		   * Stop on first error.
		   *
		   * @param  {boolean|array} An array of attributes or boolean true/false for all attributes.
		   * @return {void}
		   */
		  stopOnError: function(attributes) {
		    this.stopOnAttributes = attributes;
		  },
		
		  /**
		   * Determine if validation passes
		   *
		   * @param {function} passes
		   * @return {boolean|undefined}
		   */
		  passes: function(passes) {
		    var async = this._checkAsync('passes', passes);
		    if (async) {
		      return this.checkAsync(passes);
		    }
		    return this.check();
		  },
		
		  /**
		   * Determine if validation fails
		   *
		   * @param {function} fails
		   * @return {boolean|undefined}
		   */
		  fails: function(fails) {
		    var async = this._checkAsync('fails', fails);
		    if (async) {
		      return this.checkAsync(function() {}, fails);
		    }
		    return !this.check();
		  },
		
		  /**
		   * Check if validation should be called asynchronously
		   *
		   * @param  {string}   funcName Name of the caller
		   * @param  {function} callback
		   * @return {boolean}
		   */
		  _checkAsync: function(funcName, callback) {
		    var hasCallback = typeof callback === 'function';
		    if (this.hasAsync && !hasCallback) {
		      throw funcName + ' expects a callback when async rules are being tested.';
		    }
		
		    return this.hasAsync || hasCallback;
		  }
		
		};
		
		/**
		 * Set messages for language
		 *
		 * @param {string} lang
		 * @param {object} messages
		 * @return {this}
		 */
		Validator.setMessages = function(lang, messages) {
		  Lang._set(lang, messages);
		  return this;
		};
		
		/**
		 * Get messages for given language
		 *
		 * @param  {string} lang
		 * @return {Messages}
		 */
		Validator.getMessages = function(lang) {
		  return Lang._get(lang);
		};
		
		/**
		 * Set default language to use
		 *
		 * @param {string} lang
		 * @return {void}
		 */
		Validator.useLang = function(lang) {
		  this.prototype.lang = lang;
		};
		
		/**
		 * Get default language
		 *
		 * @return {string}
		 */
		Validator.getDefaultLang = function() {
		  return this.prototype.lang;
		};
		
		/**
		 * Set the attribute formatter.
		 *
		 * @param {fuction} func
		 * @return {void}
		 */
		Validator.setAttributeFormatter = function(func) {
		  this.prototype.attributeFormatter = func;
		};
		
		/**
		 * Stop on first error.
		 *
		 * @param  {boolean|array} An array of attributes or boolean true/false for all attributes.
		 * @return {void}
		 */
		Validator.stopOnError = function(attributes) {
		  this.prototype.stopOnAttributes = attributes;
		};
		
		/**
		 * Register custom validation rule
		 *
		 * @param  {string}   name
		 * @param  {function} fn
		 * @param  {string}   message
		 * @return {void}
		 */
		Validator.register = function(name, fn, message) {
		  var lang = Validator.getDefaultLang();
		  Rules.register(name, fn);
		  Lang._setRuleMessage(lang, name, message);
		};
		
		/**
		 * Register asynchronous validation rule
		 *
		 * @param  {string}   name
		 * @param  {function} fn
		 * @param  {string}   message
		 * @return {void}
		 */
		Validator.registerAsync = function(name, fn, message) {
		  var lang = Validator.getDefaultLang();
		  Rules.registerAsync(name, fn);
		  Lang._setRuleMessage(lang, name, message);
		};
		
		module.exports = Validator;
	
	
	/***/ },
	/* 94 */
	/***/ function(module, exports) {
	
		var rules = {
		
		  required: function(val) {
		    var str;
		
		    if (val === undefined || val === null) {
		      return false;
		    }
		
		    str = String(val).replace(/\s/g, "");
		    return str.length > 0 ? true : false;
		  },
		
		  required_if: function(val, req, attribute) {
		    req = this.getParameters();
		    if (this.validator.input[req[0]] === req[1]) {
		      return this.validator.getRule('required').validate(val);
		    }
		
		    return true;
		  },
		
		  // compares the size of strings
		  // with numbers, compares the value
		  size: function(val, req, attribute) {
		    if (val) {
		      req = parseFloat(req);
		
		      var size = this.getSize();
		
		      return size === req;
		    }
		
		    return true;
		  },
		
		  string: function(val, req, attribute) {
		    return typeof val === 'string';
		  },
		
		  /**
		   * Compares the size of strings or the value of numbers if there is a truthy value
		   */
		  min: function(val, req, attribute) {
		    var size = this.getSize();
		    return size >= req;
		  },
		
		  /**
		   * Compares the size of strings or the value of numbers if there is a truthy value
		   */
		  max: function(val, req, attribute) {
		    var size = this.getSize();
		    return size <= req;
		  },
		
		  between: function(val, req, attribute) {
		    req = this.getParameters();
		    var size = this.getSize();
		    var min = parseFloat(req[0], 10);
		    var max = parseFloat(req[1], 10);
		    return size >= min && size <= max;
		  },
		
		  email: function(val) {
		    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		    return re.test(val);
		  },
		
		  numeric: function(val) {
		    var num;
		
		    num = Number(val); // tries to convert value to a number. useful if value is coming from form element
		
		    if (typeof num === 'number' && !isNaN(num) && typeof val !== 'boolean') {
		      return true;
		    } else {
		      return false;
		    }
		  },
		
		  array: function(val) {
		    return val instanceof Array;
		  },
		
		  url: function(url) {
		    return (/^https?:\/\/\S+/).test(url);
		  },
		
		  alpha: function(val) {
		    return (/^[a-zA-Z]+$/).test(val);
		  },
		
		  alpha_dash: function(val) {
		    return (/^[a-zA-Z0-9_\-]+$/).test(val);
		  },
		
		  alpha_num: function(val) {
		    return (/^[a-zA-Z0-9]+$/).test(val);
		  },
		
		  same: function(val, req) {
		    var val1 = this.validator.input[req];
		    var val2 = val;
		
		    if (val1 === val2) {
		      return true;
		    }
		
		    return false;
		  },
		
		  different: function(val, req) {
		    var val1 = this.validator.input[req];
		    var val2 = val;
		
		    if (val1 !== val2) {
		      return true;
		    }
		
		    return false;
		  },
		
		  "in": function(val, req) {
		    var list, i;
		
		    if (val) {
		      list = req.split(',');
		    }
		
		    if (val && !(val instanceof Array)) {
		      val = String(val); // if it is a number
		
		      for (i = 0; i < list.length; i++) {
		        if (val === list[i]) {
		          return true;
		        }
		      }
		
		      return false;
		    }
		
		    if (val && val instanceof Array) {
		      for (i = 0; i < val.length; i++) {
		        if (list.indexOf(val[i]) < 0) {
		          return false;
		        }
		      }
		    }
		
		    return true;
		  },
		
		  not_in: function(val, req) {
		    var list = req.split(',');
		    var len = list.length;
		    var returnVal = true;
		
		    val = String(val); // convert val to a string if it is a number
		
		    for (var i = 0; i < len; i++) {
		      if (val === list[i]) {
		        returnVal = false;
		        break;
		      }
		    }
		
		    return returnVal;
		  },
		
		  accepted: function(val) {
		    if (val === 'on' || val === 'yes' || val === 1 || val === '1' || val === true) {
		      return true;
		    }
		
		    return false;
		  },
		
		  confirmed: function(val, req, key) {
		    var confirmedKey = key + '_confirmation';
		
		    if (this.validator.input[confirmedKey] === val) {
		      return true;
		    }
		
		    return false;
		  },
		
		  integer: function(val) {
		    return String(parseInt(val, 10)) === String(val);
		  },
		
		  digits: function(val, req) {
		    var numericRule = this.validator.getRule('numeric');
		    if (numericRule.validate(val) && String(val).length === parseInt(req)) {
		      return true;
		    }
		
		    return false;
		  },
		
		  regex: function(val, req) {
		    var mod = /[g|i|m]{1,3}$/;
		    var flag = req.match(mod);
		    flag = flag ? flag[0] : "i";
		    req = req.replace(mod, "").slice(1, -1);
		    req = new RegExp(req, flag);
		    return !!val.match(req);
		  }
		
		};
		
		function Rule(name, fn, async) {
		  this.name = name;
		  this.fn = fn;
		  this.passes = null;
		  this.customMessage = undefined;
		  this.async = async;
		}
		
		Rule.prototype = {
		
		  /**
		   * Validate rule
		   *
		   * @param  {mixed} inputValue
		   * @param  {mixed} ruleValue
		   * @param  {string} attribute
		   * @param  {function} callback
		   * @return {boolean|undefined}
		   */
		  validate: function(inputValue, ruleValue, attribute, callback) {
		    var _this = this;
		    this._setValidatingData(attribute, inputValue, ruleValue);
		    if (typeof callback === 'function') {
		      this.callback = callback;
		      var handleResponse = function(passes, message) {
		        _this.response(passes, message);
		      };
		
		      if (this.async) {
		        return this.fn.apply(this, [inputValue, ruleValue, attribute, handleResponse]);
		      } else {
		        return handleResponse(this.fn.apply(this, [inputValue, ruleValue, attribute]));
		      }
		    }
		    return this.fn.apply(this, [inputValue, ruleValue, attribute]);
		  },
		
		  /**
		   * Set validating data
		   *
		   * @param {string} attribute
		   * @param {mixed} inputValue
		   * @param {mixed} ruleValue
		   * @return {void}
		   */
		  _setValidatingData: function(attribute, inputValue, ruleValue) {
		    this.attribute = attribute;
		    this.inputValue = inputValue;
		    this.ruleValue = ruleValue;
		  },
		
		  /**
		   * Get parameters
		   *
		   * @return {array}
		   */
		  getParameters: function() {
		    return this.ruleValue ? this.ruleValue.split(',') : [];
		  },
		
		  /**
		   * Get true size of value
		   *
		   * @return {integer|float}
		   */
		  getSize: function() {
		    var value = this.inputValue;
		
		    if (value instanceof Array) {
		      return value.length;
		    }
		
		    if (typeof value === 'number') {
		      return value;
		    }
		
		    if (this.validator._hasNumericRule(this.attribute)) {
		      return parseFloat(value, 10);
		    }
		
		    return value.length;
		  },
		
		  /**
		   * Get the type of value being checked; numeric or string.
		   *
		   * @return {string}
		   */
		  _getValueType: function() {
		
		    if (typeof this.inputValue === 'number' || this.validator._hasNumericRule(this.attribute)) {
		      return 'numeric';
		    }
		
		    return 'string';
		  },
		
		  /**
		   * Set the async callback response
		   *
		   * @param  {boolean|undefined} passes  Whether validation passed
		   * @param  {string|undefined} message Custom error message
		   * @return {void}
		   */
		  response: function(passes, message) {
		    this.passes = (passes === undefined || passes === true);
		    this.customMessage = message;
		    this.callback(this.passes, message);
		  },
		
		  /**
		   * Set validator instance
		   *
		   * @param {Validator} validator
		   * @return {void}
		   */
		  setValidator: function(validator) {
		    this.validator = validator;
		  }
		
		};
		
		var manager = {
		
		  /**
		   * List of async rule names
		   *
		   * @type {Array}
		   */
		  asyncRules: [],
		
		  /**
		   * Implicit rules (rules to always validate)
		   *
		   * @type {Array}
		   */
		  implicitRules: ['required', 'required_if', 'accepted'],
		
		  /**
		   * Get rule by name
		   *
		   * @param  {string} name
		   * @param {Validator}
		   * @return {Rule}
		   */
		  make: function(name, validator) {
		    var async = this.isAsync(name);
		    var rule = new Rule(name, rules[name], async);
		    rule.setValidator(validator);
		    return rule;
		  },
		
		  /**
		   * Determine if given rule is async
		   *
		   * @param  {string}  name
		   * @return {boolean}
		   */
		  isAsync: function(name) {
		    for (var i = 0, len = this.asyncRules.length; i < len; i++) {
		      if (this.asyncRules[i] === name) {
		        return true;
		      }
		    }
		    return false;
		  },
		
		  /**
		   * Determine if rule is implicit (should always validate)
		   *
		   * @param {string} name
		   * @return {boolean}
		   */
		  isImplicit: function(name) {
		    return this.implicitRules.indexOf(name) > -1;
		  },
		
		  /**
		   * Register new rule
		   *
		   * @param  {string}   name
		   * @param  {function} fn
		   * @return {void}
		   */
		  register: function(name, fn) {
		    rules[name] = fn;
		  },
		
		  /**
		   * Register async rule
		   *
		   * @param  {string}   name
		   * @param  {function} fn
		   * @return {void}
		   */
		  registerAsync: function(name, fn) {
		    this.register(name, fn);
		    this.asyncRules.push(name);
		  }
		
		};
		
		
		module.exports = manager;
	
	
	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {
	
		var Messages = __webpack_require__(96);
		
		__webpack_require__(98);
		
		var container = {
		
		  messages: {},
		
		  /**
		   * Set messages for language
		   *
		   * @param {string} lang
		   * @param {object} rawMessages
		   * @return {void}
		   */
		  _set: function(lang, rawMessages) {
		    this.messages[lang] = rawMessages;
		  },
		
		  /**
		   * Set message for given language's rule.
		   *
		   * @param {string} lang
		   * @param {string} attribute
		   * @param {string|object} message
		   * @return {void}
		   */
		  _setRuleMessage: function(lang, attribute, message) {
		    this._load(lang);
		    if (message === undefined) {
		      message = this.messages[lang].def;
		    }
		
		    this.messages[lang][attribute] = message;
		  },
		
		  /**
		   * Load messages (if not already loaded)
		   *
		   * @param  {string} lang
		   * @return {void}
		   */
		  _load: function(lang) {
		    if (!this.messages[lang]) {
		      var rawMessages = __webpack_require__(99)("./" + lang);
		      this._set(lang, rawMessages);
		    }
		  },
		
		  /**
		   * Get raw messages for language
		   *
		   * @param  {string} lang
		   * @return {object}
		   */
		  _get: function(lang) {
		    this._load(lang);
		    return this.messages[lang];
		  },
		
		  /**
		   * Make messages for given language
		   *
		   * @param  {string} lang
		   * @return {Messages}
		   */
		  _make: function(lang) {
		    this._load(lang);
		    return new Messages(lang, this.messages[lang]);
		  }
		
		};
		
		module.exports = container;
	
	
	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {
	
		var Attributes = __webpack_require__(97);
		
		var Messages = function(lang, messages) {
		  this.lang = lang;
		  this.messages = messages;
		  this.customMessages = {};
		  this.attributeNames = {};
		};
		
		Messages.prototype = {
		  constructor: Messages,
		
		  /**
		   * Set custom messages
		   *
		   * @param {object} customMessages
		   * @return {void}
		   */
		  _setCustom: function(customMessages) {
		    this.customMessages = customMessages || {};
		  },
		
		  /**
		   * Set custom attribute names.
		   *
		   * @param {object} attributes
		   */
		  _setAttributeNames: function(attributes) {
		    this.attributeNames = attributes;
		  },
		
		  /**
		   * Set the attribute formatter.
		   *
		   * @param {fuction} func
		   * @return {void}
		   */
		  _setAttributeFormatter: function(func) {
		    this.attributeFormatter = func;
		  },
		
		  /**
		   * Get attribute name to display.
		   *
		   * @param  {string} attribute
		   * @return {string}
		   */
		  _getAttributeName: function(attribute) {
		    var name = attribute;
		    if (this.attributeNames.hasOwnProperty(attribute)) {
		      return this.attributeNames[attribute];
		    } else if (this.messages.attributes.hasOwnProperty(attribute)) {
		      name = this.messages.attributes[attribute];
		    }
		
		    if (this.attributeFormatter) {
		      name = this.attributeFormatter(name);
		    }
		
		    return name;
		  },
		
		  /**
		   * Get all messages
		   *
		   * @return {object}
		   */
		  all: function() {
		    return this.messages;
		  },
		
		  /**
		   * Render message
		   *
		   * @param  {Rule} rule
		   * @return {string}
		   */
		  render: function(rule) {
		    if (rule.customMessage) {
		      return rule.customMessage;
		    }
		    var template = this._getTemplate(rule);
		
		    var message;
		    if (Attributes.replacements[rule.name]) {
		      message = Attributes.replacements[rule.name].apply(this, [template, rule]);
		    } else {
		      message = this._replacePlaceholders(rule, template, {});
		    }
		
		    return message;
		  },
		
		  /**
		   * Get the template to use for given rule
		   *
		   * @param  {Rule} rule
		   * @return {string}
		   */
		  _getTemplate: function(rule) {
		
		    var messages = this.messages;
		    var template = messages.def;
		    var customMessages = this.customMessages;
		    var formats = [rule.name + '.' + rule.attribute, rule.name];
		
		    for (var i = 0, format; i < formats.length; i++) {
		      format = formats[i];
		      if (customMessages.hasOwnProperty(format)) {
		        template = customMessages[format];
		        break;
		      } else if (messages.hasOwnProperty(format)) {
		        template = messages[format];
		        break;
		      }
		    }
		
		    if (typeof template === 'object') {
		      template = template[rule._getValueType()];
		    }
		
		    return template;
		  },
		
		  /**
		   * Replace placeholders in the template using the data object
		   *
		   * @param  {Rule} rule
		   * @param  {string} template
		   * @param  {object} data
		   * @return {string}
		   */
		  _replacePlaceholders: function(rule, template, data) {
		    var message, attribute;
		
		    data.attribute = this._getAttributeName(rule.attribute);
		    data[rule.name] = rule.getParameters().join(',');
		
		    if (typeof template === 'string' && typeof data === 'object') {
		      message = template;
		
		      for (attribute in data) {
		        message = message.replace(new RegExp(':' + attribute, 'g'), data[attribute]);
		      }
		    }
		
		    return message;
		  }
		
		};
		
		module.exports = Messages;
	
	
	/***/ },
	/* 97 */
	/***/ function(module, exports) {
	
		var replacements = {
		
		  /**
		   * Between replacement (replaces :min and :max)
		   *
		   * @param  {string} template
		   * @param  {Rule} rule
		   * @return {string}
		   */
		  between: function(template, rule) {
		    var parameters = rule.getParameters();
		    return this._replacePlaceholders(rule, template, {
		      min: parameters[0],
		      max: parameters[1]
		    });
		  },
		
		  /**
		   * Required_if replacement.
		   *
		   * @param  {string} template
		   * @param  {Rule} rule
		   * @return {string}
		   */
		  required_if: function(template, rule) {
		    var parameters = rule.getParameters();
		    return this._replacePlaceholders(rule, template, {
		      other: parameters[0],
		      value: parameters[1]
		    });
		  }
		};
		
		function formatter(attribute) {
		  return attribute.replace(/[_\[]/g, ' ').replace(/]/g, '');
		}
		
		module.exports = {
		  replacements: replacements,
		  formatter: formatter
		};
	
	
	/***/ },
	/* 98 */
	/***/ function(module, exports) {
	
		module.exports = {
		  accepted: 'The :attribute must be accepted.',
		  alpha: 'The :attribute field must contain only alphabetic characters.',
		  alpha_dash: 'The :attribute field may only contain alpha-numeric characters, as well as dashes and underscores.',
		  alpha_num: 'The :attribute field must be alphanumeric.',
		  between: 'The :attribute field must be between :min and :max.',
		  confirmed: 'The :attribute confirmation does not match.',
		  email: 'The :attribute format is invalid.',
		  def: 'The :attribute attribute has errors.',
		  digits: 'The :attribute must be :digits digits.',
		  different: 'The :attribute and :different must be different.',
		  'in': 'The selected :attribute is invalid.',
		  integer: 'The :attribute must be an integer.',
		  min: {
		    numeric: 'The :attribute must be at least :min.',
		    string: 'The :attribute must be at least :min characters.'
		  },
		  max: {
		    numeric: 'The :attribute may not be greater than :max.',
		    string: 'The :attribute may not be greater than :max characters.'
		  },
		  not_in: 'The selected :attribute is invalid.',
		  numeric: 'The :attribute must be a number.',
		  required: 'The :attribute field is required.',
		  required_if: 'The :attribute field is required when :other is :value.',
		  same: 'The :attribute and :same fields must match.',
		  size: {
		    numeric: 'The :attribute must be :size.',
		    string: 'The :attribute must be :size characters.'
		  },
		  string: 'The :attribute must be a string.',
		  url: 'The :attribute format is invalid.',
		  regex: 'The :attribute format is invalid',
		  attributes: {}
		};
	
	
	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {
	
		var map = {
			"./en": 98,
			"./en.js": 98,
			"./es": 100,
			"./es.js": 100,
			"./fr": 101,
			"./fr.js": 101,
			"./it": 102,
			"./it.js": 102,
			"./ja": 103,
			"./ja.js": 103,
			"./pl": 104,
			"./pl.js": 104,
			"./ru": 105,
			"./ru.js": 105
		};
		function webpackContext(req) {
			return __webpack_require__(webpackContextResolve(req));
		};
		function webpackContextResolve(req) {
			return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
		};
		webpackContext.keys = function webpackContextKeys() {
			return Object.keys(map);
		};
		webpackContext.resolve = webpackContextResolve;
		module.exports = webpackContext;
		webpackContext.id = 99;
	
	
	/***/ },
	/* 100 */
	/***/ function(module, exports) {
	
		module.exports = {
		  accepted: 'El campo :attribute debe ser aceptado.',
		  alpha: 'El campo :attribute solo debe contener letras.',
		  alpha_dash: 'El campo :attribute solo debe contener letras, números y guiones.',
		  alpha_num: 'El campo :attribute solo debe contener letras y números.',
		  attributes: {},
		  between: 'El campo :attribute tiene que estar entre :min - :max.',
		  confirmed: 'La confirmación de :attribute no coincide.',
		  different: 'El campo :attribute y :other deben ser diferentes.',
		  digits: 'El campo :attribute debe tener :digits dígitos.',
		  email: 'El campo :attribute no es un correo válido',
		  'in': 'El campo :attribute es inválido.',
		  integer: 'El campo :attribute debe ser un número entero.',
		  max: {
		    numeric: 'El campo :attribute no debe ser mayor a :max.',
		    string: 'El campo :attribute no debe ser mayor que :max caracteres.'
		  },
		  min: {
		    numeric: 'El tamaño del campo :attribute debe ser de al menos :min.',
		    string: 'El campo :attribute debe contener al menos :min caracteres.'
		  },
		  not_in: 'El campo :attribute es inválido.',
		  numeric: 'El campo :attribute debe ser numérico.',
		  regex: 'El formato del campo :attribute es inválido.',
		  required: 'El campo :attribute es obligatorio.',
		  required_if: 'El campo :attribute es obligatorio cuando :other es :value.',
		  same: 'El campo :attribute y :other deben coincidir.',
		  size: {
		    numeric: 'El tamaño del campo :attribute debe ser :size.',
		    string: 'El campo :attribute debe contener :size caracteres.'
		  },
		  url: 'El formato de :attribute es inválido.'
		};
	
	
	/***/ },
	/* 101 */
	/***/ function(module, exports) {
	
		module.exports = {
		  accepted: 'Le champs :attribute doit être accepté.',
		  alpha: 'Le champs :attribute ne peut contenir que des caractères alphabétiques.',
		  alpha_dash: 'Le champs :attribute ne peut contenir que des caractères alphanumériques, des tirets et underscores.',
		  alpha_num: 'Le champs :attribute doit être alphanumérique.',
		  between: 'Le champs :attribute doit être compris entre :min and :max.',
		  confirmed: 'Le champs :attribute ne correspond pas.',
		  email: 'Le champs :attribute contient un format invalide.',
		  def: 'Le champs :attribute contient un attribut erroné.',
		  digits: 'Le champs :attribute doit être de :digits chiffres.',
		  different: 'Le champs :attribute et :different doivent être differents.',
		  'in': 'Le champs :attribute est invalide.',
		  integer: 'Le champs :attribute doit être un entier.',
		  min: {
		    numeric: 'Le champs :attribute doit être contenir au moins :min.',
		    string: 'Le champs :attribute doit être contenir au moins :min caractères.'
		  },
		  max: {
		    numeric: 'Le champs :attribute ne doit être supérieur à :max.',
		    string: 'Le champs :attribute ne doit être plus de :max characters.'
		  },
		  not_in: 'Le champs :attribute est invalide.',
		  numeric: 'Le champs :attribute doit être un numéro.',
		  required: 'Le champs :attribute est obligatoire.',
		  required_if: 'Le champs :attribute est obligatoire quand :other est :value.',
		  same: 'Le champs :attribute et :same doivent correspondre.',
		  size: {
		    numeric: 'La taille du champs :attribute doit être :size.',
		    string: 'La taille du champs :attribute doit être de :size caractères.'
		  },
		  url: 'Le format du champs :attribute est invalide.',
		  regex: 'Le format du champs :attribute est invalide.',
		  attributes: {}
		};
	
	
	/***/ },
	/* 102 */
	/***/ function(module, exports) {
	
		module.exports = {
		  accepted: 'Il campo :attribute deve essere accettato.',
		  alpha: 'Il campo :attribute deve contenere sono caratteri alfabetici.',
		  alpha_dash: 'Il campo :attribute può contenere solo caratteri alfanumerici oltre a trattini e trattini bassi.',
		  alpha_num: 'Il campo :attribute deve essere alfanumerico.',
		  between: 'Il campo :attribute deve essere compreso tra :min e :max.',
		  confirmed: 'Il campo conferma :attribute non è uguale.',
		  email: 'Il formato dell\'attributo :attribute non è valido.',
		  def: 'Gli attributi del campo :attribute contengono degli errori.',
		  digits: 'Il campo :attribute deve essere di :digits cifre.',
		  different: 'Il campo :attribute e :different devo essere diversi.',
		  'in': 'Il valore del campo :attribute non è valido.',
		  integer: 'Il campo :attribute deve essere un valore intero.',
		  min: {
		    numeric: 'Il campo :attribute deve essere maggiore o uguale di :min.',
		    string: 'Il campo :attribute deve essere composto da almeno :min caratteri.'
		  },
		  max: {
		    numeric: 'Il campo :attribute deve essere minore o uguale di :max.',
		    string: 'Il campo :attribute deve essere composto da massimo :max caratteri.'
		  },
		  not_in: 'Il campo :attribute non è valido.',
		  numeric: 'Il campo :attribute deve essere un numero.',
		  required: 'Il campo :attribute è richiesto.',
		  required_if: 'Il campo :attribute è richiesto quando il campo :other è uguale a :value.',
		  same: 'I campi :attribute e :same devono essere uguali.',
		  size: {
		    numeric: 'La dimensione del campo :attribute deve essere uguale a :size.',
		    string: 'Il campo :attribute deve essere di :size caratteri.'
		  },
		  string: 'Il campo :attribute deve essere una stringa.',
		  url: 'Il formato del campo :attribute non è valido.',
		  regex: 'Il formato del campo :attribute non è valido.',
		  attributes: {}
		};
	
	
	/***/ },
	/* 103 */
	/***/ function(module, exports) {
	
		module.exports = {
		    accepted: ':attributeを確認してください。',
		    alpha: ':attributeは英字のみで入力してください。',
		    alpha_dash: ':attributeは英字とダッシュと下線のみで入力してください。',
		    alpha_num: ':attributeは英数字のみで入力してください。',
		    between: ':attributeは:min〜:max文字で入力してください。',
		    confirmed: ':attributeは確認が一致しません。',
		    email: ':attributeは正しいメールアドレスを入力してください。',
		    def: ':attributeは検証エラーが含まれています。',
		    digits: ':attributeは:digitsの数字のみで入力してください。',
		    different: ':attributeと:differentは同じであってはなりません。',
		    'in': '選択された:attributeは無効です。',
		    integer: ':attributeは整数で入力してください。',
		    min        : {
		        numeric : ":attributeは:min以上を入力してください。",
		        string  : ":attributeは:min文字以上で入力してください。"
		    },
		    max : {
		        numeric : ":attributeは:max以下を入力してください。",
		        string  : ":attributeは:max文字以上で入力してください。"
		    },
		    not_in      : "選択された:attributeは無効です。",
		    numeric     : ":attributeは数値で入力してください。",
		    required    : ":attributeは必須です。",
		    required_if : ":otherは:valueになったら:attributeは必須です。",
		    same        : ":attributeと:sameは同じでなければなりません。",
		    size        : {
		        numeric : ":attributeは:sizeを入力してください。",
		        string  : ":attributeは:size文字で入力してください。"
		    },
		    url        : ":attributeはURIを入力してください。",
		    regex      : ":attributeの値 \":value\" はパターンにマッチする必要があります。",
		    attributes : {}
		};
	
	
	/***/ },
	/* 104 */
	/***/ function(module, exports) {
	
		module.exports = {
		    accepted: 'Pole :attribute musi być zaakceptowane.',
		    alpha: 'Pole :attribute może zawierać tylko litery.',
		    alpha_dash: 'Pole :attribute moze zawierać tylko litery, myślnik i podrkeślenie.',
		    alpha_num: 'Pole :attribute moze zawierac tylko znaki alfanumeryczne.',
		    between: 'Pole :attribute musi mieć długość od :min do :max.',
		    confirmed: 'Pole :attribute nie spełnia warunku potwierdzenia.',
		    email: 'Pole :attribute ma niepoprawny format adresu email.',
		    def: 'Pole :attribute zawiera błędy.',
		    digits: 'Pole :attribute może zawierać tylko cyfry ze zbioru :digits.',
		    different: 'Pola :attribute i :different muszą się różnić.',
		    'in': 'Pole :attribute musi należeć do zbioru :in.',
		    integer: 'Pole :attribute musi być liczbą całkowitą.',
		    min: {
		        numeric: 'Pole :attribute musi być równe conajmniej :min.',
		        string: 'Pole :attribute musi zawierać conajmniej :min znaków.'
		    },
		    max: {
		        numeric: 'Pole :attribute nie moze być większe :max.',
		        string: 'Pole :attribute nie moze być dłuższe niż :max znaków.'
		    },
		    not_in: 'Pole :attribute nie może należeć do zbioru :not_in.',
		    numeric: 'Pole :attribute musi być liczbą.',
		    required: 'Pole :attribute jest wymagane.',
		    required_if: 'Pole :attribute jest wymagane jeśli pole :other jest równe :value.',
		    same: 'Pola :attribute i :same muszą być takie same.',
		    size: {
		        numeric: 'Pole :attribute musi być równe :size.',
		        string: 'Pole :attribute musi zawierać :size znaków.'
		    },
		    string: 'Pole :attribute musi być ciągiem znaków.',
		    url: 'Pole :attribute musi być poprawnym adresem URL.',
		    regex: 'Pole :attribute nie spełnia warunku.',
		    attributes: {}
		};
	
	
	/***/ },
	/* 105 */
	/***/ function(module, exports) {
	
		module.exports = {
		  accepted: 'Вы должны принять :attribute.',
		  alpha: 'Поле :attribute может содержать только буквы.',
		  alpha_dash: 'Поле :attribute может содержать только буквы, цифры, дефисы и символы подчёркивания.',
		  alpha_num: 'Поле :attribute может содержать только буквы и цифры.',
		  between: 'Поле :attribute должно быть между :min и :max.',
		  confirmed: 'Поле :attribute не совпадает с подтверждением.',
		  email: 'Поле :attribute должно быть действительным электронным адресом.',
		  def: 'Поле :attribute содержит ошибки.',
		  digits: 'Длина цифрового поля :attribute должна быть :digits.',
		  different: 'Поля :attribute и :different должны различаться.',
		  'in': 'Выбранное значение для :attribute ошибочно.',
		  integer: 'Поле :attribute должно быть целым числом.',
		  min: {
		    numeric: 'Значение поля :attribute должно быть больше или равно :min.',
		    string: 'Количество символов в поле :attribute должно быть не менее :min.'
		  },
		  max: {
		    numeric: 'Значение поля :attribute должно быть меньше или равно :max.',
		    string: 'Количество символов в поле :attribute не может превышать :max.'
		  },
		  not_in: 'Выбранное значение для :attribute ошибочно.',
		  numeric: 'Поле :attribute должно быть числом.',
		  required: 'Поле :attribute обязательно для заполнения.',
		  required_if: 'Поле :attribute требуется когда значения поля :other равно :value.',
		  same: 'Значение :attribute должно совпадать с :same.',
		  size: {
		    numeric: 'Значение поля :attribute должно быть равным :size.',
		    string: 'Количество символов в поле :attribute должно быть равно :size.'
		  },
		  url: 'Поле :attribute должно содержать валидный URL.',
		  regex: 'Неверный формат поля :attribute.',
		  attributes: {}
		};
	
	
	/***/ },
	/* 106 */
	/***/ function(module, exports) {
	
		var Errors = function() {
		  this.errors = {};
		};
		
		Errors.prototype = {
		  constructor: Errors,
		
		  /**
		   * Add new error message for given attribute
		   *
		   * @param  {string} attribute
		   * @param  {string} message
		   * @return {void}
		   */
		  add: function(attribute, message) {
		    if (!this.has(attribute)) {
		      this.errors[attribute] = [];
		    }
		
		    if (this.errors[attribute].indexOf(message) === -1) {
		      this.errors[attribute].push(message);
		    }
		  },
		
		  /**
		   * Returns an array of error messages for an attribute, or an empty array
		   *
		   * @param  {string} attribute A key in the data object being validated
		   * @return {array} An array of error messages
		   */
		  get: function(attribute) {
		    if (this.has(attribute)) {
		      return this.errors[attribute];
		    }
		
		    return [];
		  },
		
		  /**
		   * Returns the first error message for an attribute, false otherwise
		   *
		   * @param  {string} attribute A key in the data object being validated
		   * @return {string|false} First error message or false
		   */
		  first: function(attribute) {
		    if (this.has(attribute)) {
		      return this.errors[attribute][0];
		    }
		
		    return false;
		  },
		
		  /**
		   * Get all error messages from all failing attributes
		   *
		   * @return {Object} Failed attribute names for keys and an array of messages for values
		   */
		  all: function() {
		    return this.errors;
		  },
		
		  /**
		   * Determine if there are any error messages for an attribute
		   *
		   * @param  {string}  attribute A key in the data object being validated
		   * @return {boolean}
		   */
		  has: function(attribute) {
		    if (this.errors.hasOwnProperty(attribute)) {
		      return true;
		    }
		
		    return false;
		  }
		};
		
		module.exports = Errors;
	
	
	/***/ },
	/* 107 */
	/***/ function(module, exports) {
	
		function AsyncResolvers(onFailedOne, onResolvedAll) {
		  this.onResolvedAll = onResolvedAll;
		  this.onFailedOne = onFailedOne;
		  this.resolvers = {};
		  this.resolversCount = 0;
		  this.passed = [];
		  this.failed = [];
		  this.firing = false;
		}
		
		AsyncResolvers.prototype = {
		
		  /**
		   * Add resolver
		   *
		   * @param {Rule} rule
		   * @return {integer}
		   */
		  add: function(rule) {
		    var index = this.resolversCount;
		    this.resolvers[index] = rule;
		    this.resolversCount++;
		    return index;
		  },
		
		  /**
		   * Resolve given index
		   *
		   * @param  {integer} index
		   * @return {void}
		   */
		  resolve: function(index) {
		    var rule = this.resolvers[index];
		    if (rule.passes === true) {
		      this.passed.push(rule);
		    } else if (rule.passes === false) {
		      this.failed.push(rule);
		      this.onFailedOne(rule);
		    }
		
		    this.fire();
		  },
		
		  /**
		   * Determine if all have been resolved
		   *
		   * @return {boolean}
		   */
		  isAllResolved: function() {
		    return (this.passed.length + this.failed.length) === this.resolversCount;
		  },
		
		  /**
		   * Attempt to fire final all resolved callback if completed
		   *
		   * @return {void}
		   */
		  fire: function() {
		
		    if (!this.firing) {
		      return;
		    }
		
		    if (this.isAllResolved()) {
		      this.onResolvedAll(this.failed.length === 0);
		    }
		
		  },
		
		  /**
		   * Enable firing
		   *
		   * @return {void}
		   */
		  enableFiring: function() {
		    this.firing = true;
		  }
		
		};
		
		module.exports = AsyncResolvers;
	
	
	/***/ },
	/* 108 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-autocomplete\" v-el:autocomplete\n    :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'icon-right': iconRight\n    }\"\n>\n    <div class=\"ui-autocomplete-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-autocomplete-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-autocomplete-content\">\n        <label class=\"ui-autocomplete-label\">\n            <div class=\"ui-autocomplete-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <ui-icon\n                class=\"ui-autocomplete-clear-button\" icon=\"&#xE5CD\" title=\"Clear\"\n                @click=\"clearSearch\" v-show=\"!disabled && value.length\"\n            ></ui-icon>\n\n            <input\n                class=\"ui-autocomplete-input\" :placeholder=\"placeholder\" :name=\"name\"\n                :id=\"id\" autocomplete=\"off\" v-autofocus=\"autofocus\" :debounce=\"debounce\"\n\n                @focus=\"focus\" @blur=\"blur\" @keydown.up.prevent=\"highlight(highlightedItem - 1)\"\n                @keydown.down.prevent=\"highlight(highlightedItem + 1)\" @keydown.tab=\"close\"\n                @keydown.enter=\"selectHighlighted(highlightedItem, $event)\"\n\n                v-model=\"value\" v-disabled=\"disabled\" v-el:input\n            >\n\n            <ul class=\"ui-autocomplete-suggestions\" v-show=\"showDropdown\">\n                <ui-autocomplete-suggestion\n                    :highlighted=\"highlightedItem === index\" :item=\"item\" :partial=\"partial\"\n                    :keys=\"keys\"\n\n                    v-for=\"(index, item) in suggestions | filterBy search | limitBy limit\"\n                    v-ref:items @click=\"select(item)\"\n                ></ui-autocomplete-suggestion>\n            </ul>\n        </label>\n\n        <div class=\"ui-autocomplete-feedback\" v-if=\"showFeedback\">\n            <div\n                class=\"ui-autocomplete-error-text\" v-text=\"validationError\"\n                transition=\"ui-autocomplete-feedback-toggle\"\n                v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-autocomplete-help-text\" transition=\"ui-autocomplete-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(110)
		__vue_script__ = __webpack_require__(111)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiButton.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(112)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiButton.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 110 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 111 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiMenu = __webpack_require__(13);
		
		var _UiMenu2 = _interopRequireDefault(_UiMenu);
		
		var _UiPopover = __webpack_require__(63);
		
		var _UiPopover2 = _interopRequireDefault(_UiPopover);
		
		var _UiProgressCircular = __webpack_require__(67);
		
		var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _HasDropdown = __webpack_require__(72);
		
		var _HasDropdown2 = _interopRequireDefault(_HasDropdown);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-button',
		
		    props: {
		        type: {
		            type: String,
		            default: 'normal', coerce: function coerce(type) {
		                return 'ui-button-' + type;
		            }
		        },
		        buttonType: {
		            type: String,
		            default: 'submit' },
		        color: {
		            type: String,
		            default: 'default', coerce: function coerce(color) {
		                return 'color-' + color;
		            }
		        },
		        raised: {
		            type: Boolean,
		            default: false
		        },
		        text: String,
		        icon: String,
		        iconRight: {
		            type: Boolean,
		            default: false
		        },
		        loading: {
		            type: Boolean,
		            default: false
		        },
		        showDropdownIcon: {
		            type: Boolean,
		            default: true
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        styleClasses: function styleClasses() {
		            var classes = [this.type, this.color];
		
		            if (this.raised) {
		                classes.push('ui-button-raised');
		            }
		
		            if (this.hasDropdownMenu || this.hasPopover) {
		                classes.push('has-dropdown');
		            }
		
		            return classes;
		        },
		        spinnerColor: function spinnerColor() {
		            if (this.color === 'color-default' || this.type === 'ui-button-flat') {
		                return 'black';
		            }
		
		            return 'white';
		        },
		        showIcon: function showIcon() {
		            return Boolean(this.icon);
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default,
		        UiMenu: _UiMenu2.default,
		        UiPopover: _UiPopover2.default,
		        UiProgressCircular: _UiProgressCircular2.default
		    },
		
		    mixins: [_HasDropdown2.default, _ShowsRippleInk2.default],
		
		    directives: {
		        disabled: _disabled2.default
		    }
		};
	
	/***/ },
	/* 112 */
	/***/ function(module, exports) {
	
		module.exports = "\n<button\n    class=\"ui-button\" :class=\"styleClasses\" :type=\"buttonType\" v-disabled=\"disabled || loading\"\n    v-el:button\n>\n    <div class=\"ui-button-content\" :class=\"{ 'invisible': loading }\">\n        <ui-icon\n            class=\"ui-button-icon\" :class=\"{ 'position-right': iconRight }\" :icon=\"icon\"\n            v-if=\"showIcon\"\n        ></ui-icon>\n\n        <div class=\"ui-button-text\">\n            <slot>\n                <span v-text=\"text\"></span>\n            </slot>\n        </div>\n\n        <ui-icon\n            class=\"ui-button-dropdown-icon\" icon=\"&#xE5C5;\"\n            v-if=\"!iconRight && showDropdownIcon && (hasDropdownMenu || hasPopover)\"\n        ></ui-icon>\n    </div>\n\n    <ui-progress-circular\n        class=\"ui-button-spinner\" :color=\"spinnerColor\" :size=\"18\" :stroke=\"4.5\"\n        disable-transition v-show=\"loading\"\n    ></ui-progress-circular>\n\n    <ui-ripple-ink v-if=\"!hideRippleInk && !disabled\" :trigger=\"$els.button\"></ui-ripple-ink>\n\n    <ui-menu\n        class=\"ui-button-dropdown-menu\" :trigger=\"$els.button\" :options=\"menuOptions\"\n        :show-icons=\"showMenuIcons\" :show-secondary-text=\"showMenuSecondaryText\"\n        :open-on=\"openDropdownOn\" @option-selected=\"menuOptionSelect\"\n        :dropdown-position=\"dropdownPosition\" v-if=\"hasDropdownMenu\"\n    ></ui-menu>\n\n    <ui-popover\n        :trigger=\"$els.button\" :open-on=\"openDropdownOn\" :dropdown-position=\"dropdownPosition\"\n        v-if=\"hasPopover\"\n    >\n        <slot name=\"popover\"></slot>\n    </ui-popover>\n</button>\n";
	
	/***/ },
	/* 113 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(114)
		__vue_script__ = __webpack_require__(115)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiCheckbox.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(116)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiCheckbox.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 114 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-checkbox',
		
		    props: {
		        name: String,
		        model: {
		            type: [Array, String, Boolean],
		            required: true,
		            twoWay: true
		        },
		        value: String,
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        labelLeft: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false,
		            initialValue: false
		        };
		    },
		
		
		    computed: {
		        isChecked: function isChecked() {
		            if (this.value) {
		                return this.model.indexOf(this.value) > -1;
		            }
		
		            return this.model;
		        }
		    },
		
		    created: function created() {
		        this.initialValue = this.model;
		    },
		
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.model = this.initialValue;
		        }
		    },
		
		    methods: {
		        focus: function focus() {
		            this.active = true;
		        },
		        blur: function blur() {
		            this.active = false;
		        }
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 116 */
	/***/ function(module, exports) {
	
		module.exports = "\n<label\n    class=\"ui-checkbox\"\n    :class=\"{\n        'disabled': disabled, 'checked': isChecked, 'active': active, 'label-left': labelLeft\n    }\"\n>\n    <input\n        class=\"ui-checkbox-input\" type=\"checkbox\" :name=\"name\" @focus=\"focus\" @blur=\"blur\"\n        :value=\"value ? value : null\" v-model=\"model\" v-disabled=\"disabled\"\n    >\n\n    <div class=\"ui-checkbox-checkmark\">\n        <div class=\"ui-checkbox-focus-ring\"></div>\n    </div>\n\n    <div class=\"ui-checkbox-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";
	
	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(118)
		__vue_script__ = __webpack_require__(119)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiCollapsible.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(120)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiCollapsible.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 118 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 119 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _uuid = __webpack_require__(88);
		
		var _uuid2 = _interopRequireDefault(_uuid);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-collapsible',
		
		    props: {
		        id: String,
		        open: {
		            type: Boolean,
		            default: false
		        },
		        header: String,
		        transition: {
		            type: String,
		            default: 'ui-collapsible-toggle'
		        },
		        hideIcon: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            height: 0,
		            isReady: false
		        };
		    },
		
		
		    computed: {
		        icon: function icon() {
		            return this.open ? 'keyboard_arrow_up' : 'keyboard_arrow_down';
		        },
		        calculatedHeight: function calculatedHeight() {
		            if (this.height === 0) {
		                return 'initial';
		            }
		
		            return this.height + 'px';
		        }
		    },
		
		    created: function created() {
		        this.id = this.id || _uuid2.default.short('ui-collapsible-');
		    },
		    ready: function ready() {
		        this.isReady = true;
		        this.setHeight();
		    },
		
		
		    events: {
		        'ui-collapsible::refresh-height': function uiCollapsibleRefreshHeight(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.$nextTick(this.setHeight);
		        }
		    },
		
		    methods: {
		        toggleMenu: function toggleMenu() {
		            if (this.disabled) {
		                return;
		            }
		
		            this.open = !this.open;
		        },
		        setHeight: function setHeight() {
		            var body = this.$els.body;
		
		            body.style.display = 'block';
		            this.height = body.scrollHeight;
		
		            if (!this.open) {
		                body.style.display = 'none';
		            }
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ShowsRippleInk2.default, _ReceivesTargetedEvent2.default],
		
		    transitions: {
		        'ui-collapsible-toggle': {
		            afterEnter: function afterEnter() {
		                this.$dispatch('opened');
		                this.setHeight();
		            },
		            afterLeave: function afterLeave() {
		                this.$dispatch('closed');
		            }
		        }
		    }
		};
	
	/***/ },
	/* 120 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-collapsible\">\n    <button\n        class=\"ui-collapsible-header\" :class=\"{ 'disabled': disabled }\" :aria-controls=\"id\"\n        :aria-expanded=\"open ? 'true' : 'false'\" @click=\"toggleMenu\" v-disabled=\"disabled\"\n        v-el:button\n    >\n        <div class=\"ui-collapsible-header-content\">\n            <slot name=\"header\">\n                <div v-text=\"header\"></div>\n            </slot>\n        </div>\n\n        <ui-icon class=\"ui-collapsible-header-icon\" :icon=\"icon\" v-if=\"!hideIcon\"></ui-icon>\n\n        <ui-ripple-ink\n            v-if=\"!hideRippleInk && !disabled && isReady\" :trigger=\"$els.button\"\n        ></ui-ripple-ink>\n    </button>\n\n    <div\n        class=\"ui-collapsible-body-wrapper\" :transition=\"transition\"\n        :style=\"{ 'height': calculatedHeight }\" v-show=\"open\"v-el:body\n    >\n        <div class=\"ui-collapsible-body\" :id=\"id\" :aria-hidden=\"open ? null : 'true'\">\n            <slot></slot>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(122)
		__vue_script__ = __webpack_require__(123)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiConfirm.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(128)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiConfirm.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 122 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 123 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _classlist = __webpack_require__(23);
		
		var _classlist2 = _interopRequireDefault(_classlist);
		
		var _UiModal = __webpack_require__(124);
		
		var _UiModal2 = _interopRequireDefault(_UiModal);
		
		var _UiButton = __webpack_require__(109);
		
		var _UiButton2 = _interopRequireDefault(_UiButton);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-confirm',
		
		    props: {
		        show: {
		            type: Boolean,
		            required: true,
		            twoWay: true
		        },
		        type: {
		            type: String,
		            default: 'primary' },
		        header: {
		            type: String,
		            default: 'UiConfirm'
		        },
		        confirmButtonText: {
		            type: String,
		            default: 'OK'
		        },
		        confirmButtonIcon: String,
		        denyButtonText: {
		            type: String,
		            default: 'Cancel'
		        },
		        denyButtonIcon: String,
		        autofocus: {
		            type: String,
		            default: 'deny-button' },
		        closeOnConfirm: {
		            type: Boolean,
		            default: false
		        },
		        backdropDismissible: {
		            type: Boolean,
		            default: true
		        },
		        loading: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    methods: {
		        confirm: function confirm() {
		            this.$dispatch('confirmed');
		
		            if (this.closeOnConfirm) {
		                this.show = false;
		            }
		        },
		        deny: function deny() {
		            this.show = false;
		            this.$dispatch('denied');
		        },
		        opened: function opened() {
		            var button = void 0;
		
		            if (this.autofocus === 'confirm-button') {
		                button = this.$els.confirmButton;
		            } else if (this.autofocus === 'deny-button') {
		                button = this.$els.denyButton;
		            }
		
		            if (button) {
		                _classlist2.default.add(button, 'autofocus');
		                button.addEventListener('blur', this.removeAutoFocus);
		
		                button.focus();
		            }
		
		            return true;
		        },
		        removeAutoFocus: function removeAutoFocus() {
		            var button = void 0;
		
		            if (this.autofocus === 'confirm-button') {
		                button = this.$els.confirmButton;
		            } else if (this.autofocus === 'deny-button') {
		                button = this.$els.denyButton;
		            }
		
		            if (button) {
		                button.removeEventListener('blur', this.removeAutoFocus);
		
		                _classlist2.default.remove(button, 'autofocus');
		            }
		        }
		    },
		
		    components: {
		        UiModal: _UiModal2.default,
		        UiButton: _UiButton2.default
		    }
		};
	
	/***/ },
	/* 124 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(125)
		__vue_script__ = __webpack_require__(126)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiModal.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(127)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiModal.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 125 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _classlist = __webpack_require__(23);
		
		var _classlist2 = _interopRequireDefault(_classlist);
		
		var _UiIconButton = __webpack_require__(10);
		
		var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
		
		var _UiButton = __webpack_require__(109);
		
		var _UiButton2 = _interopRequireDefault(_UiButton);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-modal',
		
		    props: {
		        show: {
		            type: Boolean,
		            required: true,
		            twoWay: true
		        },
		        type: {
		            type: String,
		            default: 'normal', coerce: function coerce(type) {
		                return 'ui-modal-' + type;
		            }
		        },
		        header: {
		            type: String,
		            default: 'UiModal Header'
		        },
		        body: {
		            type: String,
		            default: 'UiModal body'
		        },
		        role: {
		            type: String,
		            default: 'dialog' },
		        transition: {
		            type: String,
		            default: 'ui-modal-scale' },
		        showCloseButton: {
		            type: Boolean,
		            default: true
		        },
		        hideFooter: {
		            type: Boolean,
		            default: false
		        },
		        dismissible: {
		            type: Boolean,
		            default: true
		        },
		        backdropDismissible: {
		            type: Boolean,
		            default: true
		        }
		    },
		
		    data: function data() {
		        return {
		            lastFocussedElement: null
		        };
		    },
		
		
		    watch: {
		        show: function show() {
		            var _this = this;
		
		            this.$nextTick(function () {
		                if (_this.show) {
		                    _this.opened();
		                } else {
		                    _this.closed();
		                }
		            });
		        }
		    },
		
		    beforeDestroy: function beforeDestroy() {
		        if (this.show) {
		            this.tearDown();
		        }
		    },
		
		
		    methods: {
		        close: function close(e) {
		            if (!this.dismissible) {
		                return;
		            }
		
		            if (e.currentTarget === this.$els.modalMask && e.target !== e.currentTarget) {
		                return;
		            }
		
		            if (e.currentTarget === this.$els.modalMask && !this.backdropDismissible) {
		                return;
		            }
		
		            this.show = false;
		        },
		        opened: function opened() {
		            this.lastFocussedElement = document.activeElement;
		            this.$els.modalContainer.focus();
		
		            _classlist2.default.add(document.body, 'ui-modal-open');
		
		            document.addEventListener('focus', this.restrictFocus, true);
		
		            this.$dispatch('opened');
		        },
		        closed: function closed() {
		            this.tearDown();
		            this.$dispatch('closed');
		        },
		        redirectFocus: function redirectFocus(e) {
		            e.stopPropagation();
		
		            this.$els.modalContainer.focus();
		        },
		        restrictFocus: function restrictFocus(e) {
		            if (!this.$els.modalContainer.contains(e.target)) {
		                e.stopPropagation();
		                this.$els.modalContainer.focus();
		            }
		        },
		        tearDown: function tearDown() {
		            _classlist2.default.remove(document.body, 'ui-modal-open');
		
		            document.removeEventListener('focus', this.restrictFocus, true);
		
		            if (this.lastFocussedElement) {
		                this.lastFocussedElement.focus();
		            }
		        },
		        transitionEnd: function transitionEnd() {
		            if (this.show) {
		                this.$dispatch('revealed');
		            } else {
		                this.$dispatch('hidden');
		            }
		        }
		    },
		
		    components: {
		        UiIconButton: _UiIconButton2.default,
		        UiButton: _UiButton2.default
		    }
		};
	
	/***/ },
	/* 127 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-modal ui-modal-mask\" v-show=\"show\" :transition=\"transition\" :class=\"[type]\"\n    :role=\"role\" @transitionend=\"transitionEnd | debounce 100\"\n>\n    <div class=\"ui-modal-wrapper\" @click=\"close\" v-el:modal-mask>\n        <div\n            class=\"ui-modal-container\" tabindex=\"-1\" @keydown.esc=\"close\"\n            v-el:modal-container\n        >\n            <div class=\"ui-modal-header\">\n                <slot name=\"header\">\n                    <h1 v-text=\"header\" class=\"ui-modal-header-text\"></h1>\n                </slot>\n\n                <ui-icon-button\n                    type=\"clear\" icon=\"&#xE5CD\" class=\"ui-modal-close-button\" @click=\"close\"\n                    :disabled=\"!dismissible\" v-if=\"showCloseButton\" v-el:close-button\n                ></ui-icon-button>\n            </div>\n\n            <div class=\"ui-modal-body\">\n                <slot>\n                    <div v-text=\"body\"></div>\n                </slot>\n            </div>\n\n            <div class=\"ui-modal-footer\" v-if=\"!hideFooter\">\n                <slot name=\"footer\">\n                    <ui-button @click=\"close\" v-if=\"dismissible\">Close</ui-button>\n                </slot>\n            </div>\n\n            <div class=\"focus-redirector\" @focus=\"redirectFocus\" tabindex=\"0\"></div>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 128 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-confirm\">\n    <ui-modal\n        :show.sync=\"show\" role=\"alertdialog\" :header=\"header\" @opened=\"opened\" show-close-button\n        :dismissible=\"!loading\" :backdrop-dismissible=\"backdropDismissible\"\n    >\n        <div class=\"ui-confirm-message\">\n            <slot></slot>\n        </div>\n\n        <div slot=\"footer\">\n            <ui-button\n                :color=\"type\" :text=\"confirmButtonText\" :icon=\"confirmButtonIcon\"\n                @click=\"confirm\" :loading=\"loading\" v-el:confirm-button\n            ></ui-button>\n\n            <ui-button\n                :text=\"denyButtonText\" :icon=\"denyButtonIcon\" @click=\"deny\"\n                :disabled=\"loading\" v-el:deny-button\n            ></ui-button>\n        </div>\n    </ui-modal>\n</div>\n";
	
	/***/ },
	/* 129 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(130)
		__vue_script__ = __webpack_require__(131)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiFab.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(132)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiFab.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 130 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 131 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ShowsTooltip = __webpack_require__(73);
		
		var _ShowsTooltip2 = _interopRequireDefault(_ShowsTooltip);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-fab',
		
		    props: {
		        type: {
		            type: String,
		            default: 'normal',
		            coerce: function coerce(type) {
		                return 'ui-fab-' + type;
		            }
		        },
		        color: {
		            type: String,
		            default: 'default', coerce: function coerce(color) {
		                return 'color-' + color;
		            }
		        },
		        icon: {
		            type: String,
		            required: true
		        },
		        ariaLabel: String,
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    mixins: [_ShowsTooltip2.default, _ShowsRippleInk2.default],
		
		    directives: {
		        disabled: _disabled2.default
		    }
		};
	
	/***/ },
	/* 132 */
	/***/ function(module, exports) {
	
		module.exports = "\n<button\n    class=\"ui-fab\" :class=\"[this.type, this.color]\" :aria-label=\"ariaLabel || tooltip\"\n    v-disabled=\"disabled\" v-el:button\n>\n    <ui-icon class=\"ui-fab-icon\" :icon=\"icon\"></ui-icon>\n\n    <ui-ripple-ink :trigger=\"$els.button\" v-if=\"!hideRippleInk && !disabled\"></ui-ripple-ink>\n\n    <ui-tooltip\n        :trigger=\"$els.button\" :content=\"tooltip\" :position=\"tooltipPosition\" v-if=\"tooltip\"\n        :open-on=\"openTooltipOn\"\n    ></ui-tooltip>\n</button>\n";
	
	/***/ },
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(134)
		__vue_script__ = __webpack_require__(135)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiPreloader.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(136)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiPreloader.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 134 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 135 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    name: 'ui-preloader',
		
		    props: {
		        show: {
		            type: Boolean,
		            required: true
		        }
		    }
		};
	
	/***/ },
	/* 136 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-preloader\">\n    <div\n        class=\"ui-preloader-progressbar\" :class=\"{ 'loading' : show }\"\n        :aria-busy=\"show ? 'true' : false\" role=\"progressbar\"\n    ></div>\n</div>\n";
	
	/***/ },
	/* 137 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(138)
		__vue_script__ = __webpack_require__(139)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiProgressLinear.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(140)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiProgressLinear.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 138 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 139 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    name: 'ui-progress-linear',
		
		    props: {
		        show: {
		            type: Boolean,
		            default: false
		        },
		        type: {
		            type: String,
		            default: 'indeterminate' },
		        color: {
		            type: String,
		            default: 'primary', coerce: function coerce(color) {
		                return 'color-' + color;
		            }
		        },
		        value: {
		            type: Number,
		            coerce: Number,
		            default: 0
		        }
		    },
		
		    computed: {
		        progress: function progress() {
		            if (this.value < 0) {
		                return 0;
		            }
		
		            if (this.value > 100) {
		                return 100;
		            }
		
		            return this.value;
		        }
		    }
		};
	
	/***/ },
	/* 140 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-progress-linear\" :class=\"[color]\" v-show=\"show\"\n    transition=\"ui-progress-linear-toggle\"\n>\n    <div\n        class=\"ui-progress-linear-determinate\" :style=\"{ 'width': progress + '%' }\"\n        role=\"progressbar\" :aria-valuemin=\"0\" :aria-valuemax=\"100\" :aria-valuenow=\"value\"\n        v-if=\"type === 'determinate'\"\n    ></div>\n\n    <div\n        class=\"ui-progress-linear-indeterminate\" role=\"progressbar\" :aria-valuemin=\"0\"\n        :aria-valuemax=\"100\" v-else\n    ></div>\n</div>\n";
	
	/***/ },
	/* 141 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(142)
		__vue_script__ = __webpack_require__(143)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRadio.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(144)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRadio.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 142 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-radio',
		
		    props: {
		        id: String,
		        name: String,
		        model: {
		            type: String,
		            default: '',
		            twoWay: true
		        },
		        checked: {
		            type: Boolean,
		            default: false
		        },
		        value: String,
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        labelLeft: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false
		        };
		    },
		
		
		    methods: {
		        focus: function focus() {
		            this.active = true;
		
		            this.$dispatch('focussed');
		        },
		        blur: function blur() {
		            this.active = false;
		
		            this.$dispatch('blurred');
		        }
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    }
		};
	
	/***/ },
	/* 144 */
	/***/ function(module, exports) {
	
		module.exports = "\n<label\n    class=\"ui-radio\"\n    :class=\"{ 'disabled': disabled, 'checked': active, 'label-left': labelLeft }\"\n>\n    <div class=\"ui-radio-input-wrapper\">\n        <input\n            class=\"ui-radio-input\" type=\"radio\" :id=\"id\" :name=\"name\" :value=\"value\"\n            :checked=\"checked\" @focus=\"focus\" @blur=\"blur\" v-model=\"model\" v-disabled=\"disabled\"\n        >\n\n        <span class=\"ui-radio-border\"></span>\n        <span class=\"ui-radio-inner-dot\"></span>\n    </div>\n\n    <div class=\"ui-radio-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";
	
	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(146)
		__vue_script__ = __webpack_require__(147)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRadioGroup.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(148)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRadioGroup.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 146 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 147 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _UiRadio = __webpack_require__(141);
		
		var _UiRadio2 = _interopRequireDefault(_UiRadio);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-radio-group',
		
		    props: {
		        name: {
		            type: String,
		            required: true
		        },
		        value: {
		            type: String,
		            default: '',
		            twoWay: true
		        },
		        options: {
		            type: Array,
		            required: true
		        },
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        helpText: String,
		        vertical: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false,
		            initialValue: ''
		        };
		    },
		    created: function created() {
		        this.initialValue = this.value;
		    },
		
		
		    computed: {
		        showFeedback: function showFeedback() {
		            return Boolean(this.helpText);
		        }
		    },
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.value = this.initialValue;
		        }
		    },
		
		    methods: {
		        focus: function focus() {
		            this.active = true;
		        },
		        blur: function blur() {
		            this.active = false;
		        }
		    },
		
		    components: {
		        UiRadio: _UiRadio2.default
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 148 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-radio-group\" :id=\"id\"\n    :class=\"{ 'disabled': disabled, 'active': active, 'vertical': vertical }\"\n>\n    <div class=\"ui-radio-group-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n    <div class=\"ui-radio-group-options-wrapper\">\n        <ui-radio\n            class=\"ui-radio-group-radio\" v-for=\"option in options\" :model.sync=\"value\"\n            :name=\"name\" :label=\"option.text || option\" :value=\"option.value || option\"\n            :disabled=\"disabled || option.disabled\" @focussed=\"focus\" @blurred=\"blur\"\n        ></ui-radio>\n    </div>\n\n    <div\n        class=\"ui-radio-group-feedback\" v-if=\"showFeedback\"\n        transition=\"ui-radio-group-feedback-toggle\"\n    >\n        <div class=\"ui-radio-group-help-text\" v-text=\"helpText\"></div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 149 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(150)
		__vue_script__ = __webpack_require__(151)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRating.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(156)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRating.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 150 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 151 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiRatingIcon = __webpack_require__(152);
		
		var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-rating',
		
		    props: {
		        type: {
		            type: String,
		            default: 'star' },
		        value: {
		            type: Number,
		            coerce: Number,
		            required: true,
		            twoWay: true
		        },
		        total: {
		            type: Number,
		            coerce: Number,
		            required: true
		        },
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        helpText: String,
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false,
		            initialValue: 0,
		            previewValue: 0,
		            previewing: false
		        };
		    },
		
		
		    computed: {
		        showFeedback: function showFeedback() {
		            return Boolean(this.helpText);
		        }
		    },
		
		    watch: {
		        value: function value() {
		            this.previewValue = this.value;
		        },
		        previewValue: function previewValue() {
		            this.$dispatch('preview-value-changed', this.previewValue);
		        }
		    },
		
		    created: function created() {
		        this.initialValue = this.value;
		
		        this.previewValue = this.value;
		    },
		
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.value = this.initialValue;
		        }
		    },
		
		    methods: {
		        startPreview: function startPreview() {
		            if (this.disabled) {
		                return;
		            }
		
		            this.previewing = true;
		        },
		        endPreview: function endPreview() {
		            if (this.disabled) {
		                return;
		            }
		
		            this.previewing = false;
		            this.previewValue = this.value;
		        },
		        preview: function preview(n) {
		            if (this.disabled) {
		                return;
		            }
		
		            this.previewValue = n + 1;
		        },
		        commitValue: function commitValue(value) {
		            if (this.disabled) {
		                return;
		            }
		
		            if (value > 0 && value <= this.total) {
		                this.value = value;
		            }
		        },
		        incrementPreviewValue: function incrementPreviewValue() {
		            if (this.disabled) {
		                return;
		            }
		
		            var proposedValue = this.previewValue + 1;
		
		            if (proposedValue <= this.total) {
		                this.previewValue = proposedValue;
		            }
		        },
		        decrementPreviewValue: function decrementPreviewValue() {
		            if (this.disabled) {
		                return;
		            }
		
		            var proposedValue = this.previewValue - 1;
		
		            if (proposedValue > 0) {
		                this.previewValue = proposedValue;
		            }
		        },
		        focus: function focus() {
		            this.active = true;
		            this.startPreview();
		        },
		        blur: function blur() {
		            this.active = false;
		
		            this.commitValue(this.previewValue);
		            this.endPreview();
		        }
		    },
		
		    components: {
		        UiRatingIcon: _UiRatingIcon2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(153)
		__vue_script__ = __webpack_require__(154)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRatingIcon.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(155)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRatingIcon.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 153 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-rating-icon',
		
		    props: {
		        type: {
		            type: String,
		            default: 'star' },
		        selected: {
		            type: Boolean,
		            required: true
		        },
		        filled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        icon: function icon() {
		            if (this.filled || this.selected) {
		                return this.type === 'star' ? 'star' : 'favorite';
		            }
		
		            return this.type === 'star' ? 'star_border' : 'favorite_border';
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    }
		};
	
	/***/ },
	/* 155 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-rating-icon\">\n    <ui-icon\n        class=\"ui-rating-icon-icon\" :icon=\"icon\"\n        :class=\"{ 'selected': selected, 'filled' : filled }\"\n    ></ui-icon>\n</div>\n";
	
	/***/ },
	/* 156 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-rating\" :class=\"{ 'disabled': disabled, 'preview': previewing, 'active': active }\"\n\n    :tabindex=\"disabled ? null : 0\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"total\"\n    :aria-valuenow=\"previewValue\"\n\n    @keydown.up.prevent=\"incrementPreviewValue\" @keydown.down.prevent=\"decrementPreviewValue\"\n    @keydown.right.prevent=\"incrementPreviewValue\" @keydown.left.prevent=\"decrementPreviewValue\"\n    @keydown.enter.prevent=\"commitValue(previewValue)\" @focus=\"focus\" @blur=\"blur\"\n>\n    <div class=\"ui-rating-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n    <div\n        class=\"ui-rating-icons-wrapper\" @mouseenter=\"startPreview\" @mouseleave=\"endPreview\"\n    >\n        <ui-rating-icon\n            :type=\"type\" v-for=\"n in total\" :selected=\"(n + 1) <= value\" @mouseover=\"preview(n)\"\n            :filled=\"(n + 1) <= previewValue\" @click=\"commitValue(n + 1)\"\n        ></ui-rating-icon>\n    </div>\n\n    <div\n        class=\"ui-rating-feedback\" v-if=\"showFeedback\" transition=\"ui-rating-feedback-toggle\"\n    >\n        <div class=\"ui-rating-help-text\" v-text=\"helpText\"></div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 157 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(158)
		__vue_script__ = __webpack_require__(159)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiRatingPreview.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(160)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiRatingPreview.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 158 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 159 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiRatingIcon = __webpack_require__(152);
		
		var _UiRatingIcon2 = _interopRequireDefault(_UiRatingIcon);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-rating-preview',
		
		    props: {
		        type: {
		            type: String,
		            default: 'star' },
		        value: {
		            type: Number,
		            coerce: Number,
		            required: true
		        },
		        total: {
		            type: Number,
		            coerce: Number,
		            required: true
		        }
		    },
		
		    components: {
		        UiRatingIcon: _UiRatingIcon2.default
		    }
		};
	
	/***/ },
	/* 160 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-rating-preview\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"total\"\n    :aria-valuenow=\"value\"\n>\n    <ui-rating-icon\n        :type=\"type\" v-for=\"n in total\" :selected=\"(n + 1) <= value\"\n    ></ui-rating-icon>\n</div>\n";
	
	/***/ },
	/* 161 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(162)
		__vue_script__ = __webpack_require__(163)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSelect.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(171)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSelect.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 162 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 163 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _mergeOptions = __webpack_require__(164);
		
		var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
		
		var _fuzzysearch = __webpack_require__(84);
		
		var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);
		
		var _elementScroll = __webpack_require__(166);
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _UiSelectOption = __webpack_require__(167);
		
		var _UiSelectOption2 = _interopRequireDefault(_UiSelectOption);
		
		var _UiProgressCircular = __webpack_require__(67);
		
		var _UiProgressCircular2 = _interopRequireDefault(_UiProgressCircular);
		
		var _HasTextInput = __webpack_require__(91);
		
		var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
		
		var _ValidatesInput = __webpack_require__(92);
		
		var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-select',
		
		    props: {
		        value: {
		            type: [Object, Array, String, Number],
		            default: null,
		            twoWay: true
		        },
		        default: {
		            type: [Object, Array, String, Number],
		            default: null
		        },
		        options: {
		            type: Array,
		            default: []
		        },
		        partial: String,
		        showSearch: {
		            type: Boolean,
		            default: false
		        },
		        searchPlaceholder: {
		            type: String,
		            default: 'Search'
		        },
		        multiple: {
		            type: Boolean,
		            default: false
		        },
		        multipleDelimiter: {
		            type: String,
		            default: ', '
		        },
		        optionsDynamic: {
		            type: Boolean,
		            default: false
		        },
		        optionsLoaded: {
		            type: Boolean,
		            default: true
		        },
		        loading: {
		            type: Boolean,
		            default: false
		        },
		        keys: {
		            type: Object,
		            default: function _default() {
		                return {
		                    text: 'text',
		                    value: 'value',
		                    image: 'image'
		                };
		            }
		        },
		        filter: Function
		    },
		
		    data: function data() {
		        return {
		            query: '',
		            selectedIndex: -1,
		            highlightedIndex: -1,
		            showDropdown: false,
		            ignoreQueryChange: false
		        };
		    },
		
		
		    computed: {
		        filteredOptions: function filteredOptions() {
		            if (this.optionsDynamic) {
		                return this.options;
		            }
		
		            return this.options.filter(this.search);
		        },
		        displayText: function displayText() {
		            var _this = this;
		
		            if (this.multiple && this.value.length) {
		                var labels = this.value.map(function (value) {
		                    return value[_this.keys.text] || value;
		                });
		
		                return labels.join(this.multipleDelimiter);
		            }
		
		            return this.value ? this.value[this.keys.text] || this.value : '';
		        },
		        hasDisplayText: function hasDisplayText() {
		            return this.displayText && Boolean(this.displayText.length);
		        },
		        showIcon: function showIcon() {
		            return Boolean(this.icon);
		        },
		        nothingFound: function nothingFound() {
		            if (this.optionsDynamic && !this.optionsLoaded) {
		                return false;
		            }
		
		            if (this.query.length && !this.loading) {
		                return !Boolean(this.filteredOptions.length);
		            }
		
		            return false;
		        }
		    },
		
		    watch: {
		        filteredOptions: function filteredOptions() {
		            this.highlightedIndex = 0;
		            (0, _elementScroll.resetScroll)(this.$els.optionsList);
		        },
		        showDropdown: function showDropdown() {
		            if (this.showDropdown) {
		                this.opened();
		                this.$dispatch('opened');
		            } else {
		                this.closed();
		                this.$dispatch('closed');
		            }
		        },
		        query: function query() {
		            if (!this.ignoreQueryChange) {
		                this.$dispatch('query-changed', this.query);
		            }
		        }
		    },
		
		    created: function created() {
		        this.initValue();
		
		        var errorMessages = {
		            min: 'You must select at least :min options.',
		            max: 'You must select no more than :max options.',
		            between: 'You must select at least :min but no more than :max options.'
		        };
		
		        if (this.validationRules) {
		            this.validationMessages = (0, _mergeOptions2.default)(errorMessages, this.validationMessages);
		        }
		    },
		    ready: function ready() {
		        document.addEventListener('click', this.closeOnExternalClick);
		    },
		    beforeDestroy: function beforeDestroy() {
		        document.removeEventListener('click', this.closeOnExternalClick);
		    },
		
		
		    events: {
		        'ui-select::set-selected': function uiSelectSetSelected(value, id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.default = value;
		            this.initValue();
		        },
		
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.initValue();
		            this.dirty = false;
		            this.valid = true;
		
		            this.clearQuery();
		            this.selectedIndex = -1;
		            this.highlightedIndex = -1;
		        }
		    },
		
		    methods: {
		        initValue: function initValue() {
		            this.value = this.multiple ? [] : null;
		
		            if (this.default) {
		                var defaults = Array.isArray(this.default) ? this.default : [this.default];
		
		                if (defaults.length) {
		                    this.setDefaultValue(defaults);
		                }
		            }
		        },
		        search: function search(option) {
		            if (this.filter) {
		                return this.filter(option, this.query);
		            }
		
		            var query = this.query.toLowerCase();
		            var text = option[this.keys.text] || option;
		
		            if (typeof text === 'string') {
		                text = text.toLowerCase();
		            }
		
		            return (0, _fuzzysearch2.default)(query, text);
		        },
		        clearQuery: function clearQuery() {
		            var _this2 = this;
		
		            this.ignoreQueryChange = true;
		
		            this.$nextTick(function () {
		                _this2.query = '';
		
		                _this2.$nextTick(function () {
		                    _this2.ignoreQueryChange = false;
		                });
		            });
		        },
		        select: function select(option, index) {
		            var close = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
		
		            if (this.multiple) {
		                if (this.isSelected(option)) {
		                    this.deselect(option);
		                } else {
		                    this.value.push(option);
		                }
		            } else {
		                this.value = option;
		                this.selectedIndex = index;
		            }
		
		            this.$dispatch('selected', option);
		
		            this.highlightedIndex = index;
		            this.clearQuery();
		            this.validate();
		
		            if (!this.multiple && close) {
		                this.close();
		            }
		        },
		        deselect: function deselect(option) {
		            this.value.$remove(option);
		        },
		        isSelected: function isSelected(option) {
		            if (this.multiple) {
		                return this.value.indexOf(option) > -1;
		            }
		
		            return this.value === option;
		        },
		        selectHighlighted: function selectHighlighted(index, e) {
		            if (this.$refs.options.length) {
		                e.preventDefault();
		                this.select(this.$refs.options[index].option, index);
		            }
		        },
		        highlight: function highlight(index, preventScroll) {
		            if (this.highlightedIndex === index || this.$refs.options.length === 0) {
		                return;
		            }
		
		            var firstIndex = 0;
		            var lastIndex = this.$refs.options.length - 1;
		
		            if (index < firstIndex) {
		                index = lastIndex;
		            } else if (index > lastIndex) {
		                index = firstIndex;
		            }
		
		            this.highlightedIndex = index;
		
		            if (!preventScroll) {
		                this.scrollOptionIntoView(this.$refs.options[index].$el);
		            }
		        },
		        focus: function focus() {
		            this.active = true;
		        },
		        blur: function blur() {
		            this.active = false;
		
		            if (this.showDropdown) {
		                this.close();
		            }
		        },
		        toggle: function toggle() {
		            if (this.showDropdown) {
		                this.close();
		            } else {
		                this.open();
		            }
		        },
		        open: function open() {
		            if (this.disabled) {
		                return;
		            }
		
		            this.showDropdown = true;
		        },
		        opened: function opened() {
		            var _this3 = this;
		
		            this.$nextTick(function () {
		                if (_this3.showSearch) {
		                    _this3.$els.searchInput.focus();
		                } else {
		                    _this3.$els.dropdown.focus();
		                }
		
		                _this3.scrollOptionIntoView(_this3.$els.optionsList.querySelector('.selected'));
		            });
		        },
		        close: function close(deactivate) {
		            this.showDropdown = false;
		
		            if (!this.dirty) {
		                this.dirty = true;
		            }
		
		            if (deactivate) {
		                this.active = false;
		            } else {
		                this.$els.label.focus();
		            }
		        },
		        closeOnExternalClick: function closeOnExternalClick(e) {
		            if (!this.$el.contains(e.target) && (this.showDropdown || this.active)) {
		                this.close(true);
		            }
		        },
		        closed: function closed() {
		            this.validate();
		
		            if (this.multiple) {
		                this.highlightedIndex = -1;
		            } else {
		                this.highlightedIndex = this.selectedIndex;
		            }
		        },
		        setDefaultValue: function setDefaultValue(defaults) {
		            var optionValue = void 0;
		            var defaultOptionValue = void 0;
		
		            for (var i = 0; i < defaults.length; i++) {
		                defaultOptionValue = defaults[i][this.keys.value] || defaults[i];
		
		                for (var j = 0; j < this.options.length; j++) {
		                    optionValue = this.options[j][this.keys.value] || this.options[j];
		
		                    if (optionValue === defaultOptionValue) {
		                        this.select(this.options[j], j, false);
		                        break;
		                    }
		                }
		            }
		        },
		        scrollOptionIntoView: function scrollOptionIntoView(optionEl) {
		            (0, _elementScroll.scrollIntoView)(optionEl, this.$els.optionsList, 80);
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default,
		        UiSelectOption: _UiSelectOption2.default,
		        UiProgressCircular: _UiProgressCircular2.default
		    },
		
		    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
		};
	
	/***/ },
	/* 164 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		var isOptionObject = __webpack_require__(165);
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.propertyIsEnumerable;
		var globalThis = this;
		var defaultMergeOpts = {
			concatArrays: false
		};
		
		function getEnumerableOwnPropertyKeys(value) {
			var keys = [];
		
			for (var key in value) {
				if (hasOwnProperty.call(value, key)) {
					keys.push(key);
				}
			}
		
			if (Object.getOwnPropertySymbols) {
				var symbols = Object.getOwnPropertySymbols(value);
		
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(value, symbols[i])) {
						keys.push(symbols[i]);
					}
				}
			}
		
			return keys;
		}
		
		function clone(value) {
			if (Array.isArray(value)) {
				return cloneArray(value);
			}
		
			if (isOptionObject(value)) {
				return cloneOptionObject(value);
			}
		
			return value;
		}
		
		function cloneArray(array) {
			var result = array.slice(0, 0);
		
			getEnumerableOwnPropertyKeys(array).forEach(function (key) {
				result[key] = clone(array[key]);
			});
		
			return result;
		}
		
		function cloneOptionObject(obj) {
			var result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};
		
			getEnumerableOwnPropertyKeys(obj).forEach(function (key) {
				result[key] = clone(obj[key]);
			});
		
			return result;
		}
		
		/**
		 * @param merged {already cloned}
		 * @return {cloned Object}
		 */
		function mergeKeys(merged, source, keys, mergeOpts) {
			keys.forEach(function (key) {
				if (key in merged) {
					merged[key] = merge(merged[key], source[key], mergeOpts);
				} else {
					merged[key] = clone(source[key]);
				}
			});
		
			return merged;
		}
		
		/**
		 * @param merged {already cloned}
		 * @return {cloned Object}
		 *
		 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
		 */
		function concatArrays(merged, source, mergeOpts) {
			var result = merged.slice(0, 0);
			var resultIndex = 0;
		
			[merged, source].forEach(function (array) {
				var indices = [];
		
				// result.concat(array) with cloning
				for (var k = 0; k < array.length; k++) {
					if (!hasOwnProperty.call(array, k)) {
						continue;
					}
		
					indices.push(String(k));
		
					if (array === merged) {
						// already cloned
						result[resultIndex++] = array[k];
					} else {
						result[resultIndex++] = clone(array[k]);
					}
				}
		
				// merge non-index keys
				result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(function (key) {
					return indices.indexOf(key) === -1;
				}), mergeOpts);
			});
		
			return result;
		}
		
		/**
		 * @param merged {already cloned}
		 * @return {cloned Object}
		 */
		function merge(merged, source, mergeOpts) {
			if (mergeOpts.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
				return concatArrays(merged, source, mergeOpts);
			}
		
			if (!isOptionObject(source) || !isOptionObject(merged)) {
				return clone(source);
			}
		
			return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), mergeOpts);
		}
		
		module.exports = function () {
			var mergeOpts = merge(clone(defaultMergeOpts), (this !== globalThis && this) || {}, defaultMergeOpts);
			var merged = {};
		
			for (var i = 0; i < arguments.length; i++) {
				var option = arguments[i];
		
				if (option === undefined) {
					continue;
				}
		
				if (!isOptionObject(option)) {
					throw new TypeError('`' + option + '` is not an Option Object');
				}
		
				merged = merge(merged, option, mergeOpts);
			}
		
			return merged;
		};
	
	
	/***/ },
	/* 165 */
	/***/ function(module, exports) {
	
		'use strict';
		var toString = Object.prototype.toString;
		
		module.exports = function (x) {
			var prototype;
			return toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
		};
	
	
	/***/ },
	/* 166 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.inView = inView;
		exports.scrollIntoView = scrollIntoView;
		exports.resetScroll = resetScroll;
		function inView(element, container) {
		    if (!element) {
		        return;
		    }
		
		    container = container || element.parentElement;
		
		    var top = element.offsetTop;
		    var parentTop = container.scrollTop;
		    var bottom = top + element.offsetHeight;
		    var parentBottom = container.offsetHeight;
		
		    return top >= parentTop && bottom <= parentBottom;
		}
		
		function scrollIntoView(element, container) {
		    var marginTop = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
		
		    if (!element || inView(element, container)) {
		        return;
		    }
		
		    container = container || element.parentElement;
		
		    container.scrollTop = element.offsetTop - marginTop;
		}
		
		function resetScroll(element) {
		    if (!element) {
		        return;
		    }
		
		    element.scrollTop = 0;
		}
		
		exports.default = {
		    inView: inView,
		    scrollIntoView: scrollIntoView,
		    resetScroll: resetScroll
		};
	
	/***/ },
	/* 167 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(168)
		__vue_script__ = __webpack_require__(169)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSelectOption.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(170)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSelectOption.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 168 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 169 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-select-option',
		
		    props: {
		        option: {
		            type: [String, Object],
		            required: true
		        },
		        partial: {
		            type: String,
		            default: 'ui-select-simple' },
		        showCheckbox: {
		            type: Boolean,
		            default: false
		        },
		        highlighted: {
		            type: Boolean,
		            default: false
		        },
		        selected: {
		            type: Boolean,
		            default: false
		        },
		        keys: {
		            type: Object,
		            default: function _default() {
		                return {
		                    text: 'text',
		                    value: 'value',
		                    image: 'image'
		                };
		            }
		        }
		    },
		
		    computed: {
		        icon: function icon() {
		            return this.selected ? 'check_box' : 'check_box_outline_blank';
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    partials: {
		        'ui-select-simple': '\n            <li class="ui-select-item-text" v-text="option[keys.text] || option"></li>\n        ',
		
		        'ui-select-image': '\n            <div\n                class="ui-select-item-image"\n                :style="{ \'background-image\': \'url(\' + option[keys.image] + \')\' }"\n            ></div>\n\n            <div class="ui-select-item-text" v-text="option[keys.text]"></div>\n        '
		    }
		};
	
	/***/ },
	/* 170 */
	/***/ function(module, exports) {
	
		module.exports = "\n<li\n    class=\"ui-select-option\" :class=\"{ highlighted: highlighted, selected: selected }\"\n>\n    <div class=\"ui-select-option-content\" :class=\"[partial]\">\n        <partial :name=\"partial\"></partial>\n    </div>\n\n    <ui-icon\n        class=\"ui-select-option-checkbox\" :icon=\"icon\" v-if=\"showCheckbox\"\n    ></ui-icon>\n</li>\n";
	
	/***/ },
	/* 171 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-select\" :id=\"id\" :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'icon-right': iconRight\n    }\"\n>\n    <div class=\"ui-select-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-select-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-select-content\">\n        <div\n            class=\"ui-select-label\" :tabindex=\"disabled ? null : '0'\" v-el:label\n            @focus=\"focus\" @keydown.tab=\"blur\" @click=\"toggle\" @keydown.space.prevent=\"open\"\n            @keydown.enter.prevent=\"open\"\n        >\n            <div class=\"ui-select-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <div class=\"ui-select-display\">\n                <div\n                    class=\"ui-select-value\" :class=\"{ placeholder: !hasDisplayText }\"\n                    v-text=\"hasDisplayText ? displayText : placeholder\"\n                ></div>\n\n                <ui-icon icon=\"arrow_drop_down\" class=\"ui-select-dropdown-icon\"></ui-icon>\n            </div>\n\n            <div\n                class=\"ui-select-dropdown\" tabindex=\"-1\" v-show=\"showDropdown\" v-el:dropdown\n                @keydown.esc.prevent=\"close()\" @keydown.tab=\"close()\"\n                @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n                @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n                @keydown.enter.prevent.stop=\"selectHighlighted(highlightedIndex, $event)\"\n            >\n                <div class=\"ui-select-search\" v-if=\"showSearch\" @click.stop @keydown.space.stop>\n                    <input\n                        class=\"ui-select-search-input\" type=\"text\" v-el:search-input\n                        :placeholder=\"searchPlaceholder\" v-model=\"query\" autocomplete=\"off\"\n                    >\n\n                    <ui-progress-circular\n                        class=\"ui-select-search-spinner\" :size=\"24\" :stroke=\"4\" :show=\"loading\"\n                    ></ui-progress-circular>\n                </div>\n\n                <ul class=\"ui-select-options\" v-el:options-list>\n                    <ui-select-option\n                        :option=\"option\" :partial=\"partial\" :show-checkbox=\"multiple\" :\n                        :keys=\"keys\" @click.stop.prevent=\"select(option, index)\"\n                        @mouseover.stop=\"highlight(index, true)\"\n\n                        :highlighted=\"highlightedIndex === index\"\n                        :selected=\"isSelected(option)\"\n\n                        v-for=\"(index, option) in filteredOptions\" v-ref:options\n                    ></ui-select-option>\n\n                    <li class=\"ui-select-no-results\" v-if=\"nothingFound\">No results found</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\"ui-select-feedback\" v-if=\"showFeedback\">\n            <div\n                class=\"ui-select-error-text\" transition=\"ui-select-feedback-toggle\"\n                v-text=\"validationError\" v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-select-help-text\" transition=\"ui-select-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 172 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(173)
		__vue_script__ = __webpack_require__(174)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSlider.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(183)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSlider.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 173 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 174 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _draggabilly = __webpack_require__(175);
		
		var _draggabilly2 = _interopRequireDefault(_draggabilly);
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-slider',
		
		    props: {
		        name: String,
		        value: {
		            type: Number,
		            required: true,
		            twoWay: true
		        },
		        step: {
		            type: Number,
		            default: 5
		        },
		        icon: String,
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            active: false,
		            initialValue: 0,
		            dragging: false,
		            draggable: null
		        };
		    },
		
		
		    computed: {
		        showIcon: function showIcon() {
		            return Boolean(this.icon);
		        },
		        hasLabel: function hasLabel() {
		            if (this.hideLabel) {
		                return true;
		            }
		
		            return Boolean(this.label);
		        }
		    },
		
		    watch: {
		        value: function value() {
		            if (!this.dragging) {
		                this.$els.thumb.style.left = this.value + '%';
		            }
		        },
		        disabled: function disabled() {
		            if (this.disabled) {
		                this.draggable.disable();
		            } else {
		                this.draggable.enable();
		            }
		        }
		    },
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.value = this.initialValue;
		        }
		    },
		
		    ready: function ready() {
		        this.initialValue = this.value;
		
		        this.$els.thumb.style.left = this.value + '%';
		
		        this.draggable = new _draggabilly2.default(this.$els.thumb, {
		            containment: this.$els.containment,
		            axis: 'x'
		        });
		
		        this.draggable.on('dragStart', this.dragStart);
		        this.draggable.on('dragMove', this.dragMove);
		        this.draggable.on('dragEnd', this.dragEnd);
		
		        if (this.disabled) {
		            this.draggable.disable();
		        }
		    },
		    beforeDestroy: function beforeDestroy() {
		        if (this.draggable) {
		            this.draggable.destroy();
		        }
		    },
		
		
		    methods: {
		        focus: function focus() {
		            this.active = true;
		        },
		        blur: function blur() {
		            this.active = false;
		        },
		        sliderClick: function sliderClick(e) {
		            if (this.disabled) {
		                return;
		            }
		
		            var sliderPosition = this.$els.slider.getBoundingClientRect();
		
		            var newValue = (e.clientX - sliderPosition.left) / sliderPosition.width * 100;
		
		            this.setValue(newValue);
		
		            if (e.target !== this.$els.thumb) {
		                this.draggable._pointerDown(e, e);
		            }
		
		            this.$el.focus();
		        },
		        dragStart: function dragStart() {
		            this.dragging = true;
		            this.$el.focus();
		        },
		        dragMove: function dragMove() {
		            var x = this.draggable.position.x;
		            var newValue = x / this.$els.slider.getBoundingClientRect().width * 100;
		
		            this.setValue(newValue);
		        },
		        dragEnd: function dragEnd() {
		            this.dragging = false;
		        },
		        increment: function increment() {
		            if (this.value === 100) {
		                return;
		            }
		
		            this.setValue(this.value + this.step);
		        },
		        decrement: function decrement() {
		            if (this.value === 0) {
		                return;
		            }
		
		            this.setValue(this.value - this.step);
		        },
		        setValue: function setValue(value) {
		            if (value === this.value) {
		                return;
		            }
		
		            var moderatedValue = Math.round(value);
		
		            if (moderatedValue >= 100) {
		                moderatedValue = 100;
		            }
		
		            if (moderatedValue <= 0) {
		                moderatedValue = 0;
		            }
		
		            this.value = moderatedValue;
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 175 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * Draggabilly v1.2.4
		 * Make that shiz draggable
		 * http://draggabilly.desandro.com
		 * MIT license
		 */
		
		( function( window, factory ) {
		  'use strict';
		
		  if ( typeof define == 'function' && define.amd ) {
		    // AMD
		    define( [
		        'classie/classie',
		        'get-style-property/get-style-property',
		        'get-size/get-size',
		        'unidragger/unidragger'
		      ],
		      function( classie, getStyleProperty, getSize, Unidragger ) {
		        return factory( window, classie, getStyleProperty, getSize, Unidragger );
		      });
		  } else if ( true ) {
		    // CommonJS
		    module.exports = factory(
		      window,
		      __webpack_require__(176),
		      __webpack_require__(177),
		      __webpack_require__(178),
		      __webpack_require__(179)
		    );
		  } else {
		    // browser global
		    window.Draggabilly = factory(
		      window,
		      window.classie,
		      window.getStyleProperty,
		      window.getSize,
		      window.Unidragger
		    );
		  }
		
		}( window, function factory( window, classie, getStyleProperty, getSize, Unidragger ) {
		
		'use strict';
		
		// vars
		var document = window.document;
		
		function noop() {}
		
		// -------------------------- helpers -------------------------- //
		
		// extend objects
		function extend( a, b ) {
		  for ( var prop in b ) {
		    a[ prop ] = b[ prop ];
		  }
		  return a;
		}
		
		// ----- get style ----- //
		
		var defView = document.defaultView;
		
		var getStyle = defView && defView.getComputedStyle ?
		  function( elem ) {
		    return defView.getComputedStyle( elem, null );
		  } :
		  function( elem ) {
		    return elem.currentStyle;
		  };
		
		
		// http://stackoverflow.com/a/384380/182183
		var isElement = ( typeof HTMLElement == 'object' ) ?
		  function isElementDOM2( obj ) {
		    return obj instanceof HTMLElement;
		  } :
		  function isElementQuirky( obj ) {
		    return obj && typeof obj == 'object' &&
		      obj.nodeType == 1 && typeof obj.nodeName == 'string';
		  };
		
		// -------------------------- requestAnimationFrame -------------------------- //
		
		// https://gist.github.com/1866474
		
		var lastTime = 0;
		var prefixes = 'webkit moz ms o'.split(' ');
		// get unprefixed rAF and cAF, if present
		var requestAnimationFrame = window.requestAnimationFrame;
		var cancelAnimationFrame = window.cancelAnimationFrame;
		// loop through vendor prefixes and get prefixed rAF and cAF
		var prefix;
		for( var i = 0; i < prefixes.length; i++ ) {
		  if ( requestAnimationFrame && cancelAnimationFrame ) {
		    break;
		  }
		  prefix = prefixes[i];
		  requestAnimationFrame = requestAnimationFrame || window[ prefix + 'RequestAnimationFrame' ];
		  cancelAnimationFrame  = cancelAnimationFrame  || window[ prefix + 'CancelAnimationFrame' ] ||
		                            window[ prefix + 'CancelRequestAnimationFrame' ];
		}
		
		// fallback to setTimeout and clearTimeout if either request/cancel is not supported
		if ( !requestAnimationFrame || !cancelAnimationFrame )  {
		  requestAnimationFrame = function( callback ) {
		    var currTime = new Date().getTime();
		    var timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
		    var id = window.setTimeout( function() {
		      callback( currTime + timeToCall );
		    }, timeToCall );
		    lastTime = currTime + timeToCall;
		    return id;
		  };
		
		  cancelAnimationFrame = function( id ) {
		    window.clearTimeout( id );
		  };
		}
		
		// -------------------------- support -------------------------- //
		
		var transformProperty = getStyleProperty('transform');
		// TODO fix quick & dirty check for 3D support
		var is3d = !!getStyleProperty('perspective');
		
		var jQuery = window.jQuery;
		
		// --------------------------  -------------------------- //
		
		function Draggabilly( element, options ) {
		  // querySelector if string
		  this.element = typeof element == 'string' ?
		    document.querySelector( element ) : element;
		
		  if ( jQuery ) {
		    this.$element = jQuery( this.element );
		  }
		
		  // options
		  this.options = extend( {}, this.constructor.defaults );
		  this.option( options );
		
		  this._create();
		}
		
		// inherit Unidragger methods
		extend( Draggabilly.prototype, Unidragger.prototype );
		
		Draggabilly.defaults = {
		};
		
		/**
		 * set options
		 * @param {Object} opts
		 */
		Draggabilly.prototype.option = function( opts ) {
		  extend( this.options, opts );
		};
		
		Draggabilly.prototype._create = function() {
		
		  // properties
		  this.position = {};
		  this._getPosition();
		
		  this.startPoint = { x: 0, y: 0 };
		  this.dragPoint = { x: 0, y: 0 };
		
		  this.startPosition = extend( {}, this.position );
		
		  // set relative positioning
		  var style = getStyle( this.element );
		  if ( style.position != 'relative' && style.position != 'absolute' ) {
		    this.element.style.position = 'relative';
		  }
		
		  this.enable();
		  this.setHandles();
		
		};
		
		/**
		 * set this.handles and bind start events to 'em
		 */
		Draggabilly.prototype.setHandles = function() {
		  this.handles = this.options.handle ?
		    this.element.querySelectorAll( this.options.handle ) : [ this.element ];
		
		  this.bindHandles();
		};
		
		/**
		 * emits events via eventEmitter and jQuery events
		 * @param {String} type - name of event
		 * @param {Event} event - original event
		 * @param {Array} args - extra arguments
		 */
		Draggabilly.prototype.dispatchEvent = function( type, event, args ) {
		  var emitArgs = [ event ].concat( args );
		  this.emitEvent( type, emitArgs );
		  var jQuery = window.jQuery;
		  // trigger jQuery event
		  if ( jQuery && this.$element ) {
		    if ( event ) {
		      // create jQuery event
		      var $event = jQuery.Event( event );
		      $event.type = type;
		      this.$element.trigger( $event, args );
		    } else {
		      // just trigger with type if no event available
		      this.$element.trigger( type, args );
		    }
		  }
		};
		
		// -------------------------- position -------------------------- //
		
		// get left/top position from style
		Draggabilly.prototype._getPosition = function() {
		  // properties
		  var style = getStyle( this.element );
		
		  var x = parseInt( style.left, 10 );
		  var y = parseInt( style.top, 10 );
		
		  // clean up 'auto' or other non-integer values
		  this.position.x = isNaN( x ) ? 0 : x;
		  this.position.y = isNaN( y ) ? 0 : y;
		
		  this._addTransformPosition( style );
		};
		
		// add transform: translate( x, y ) to position
		Draggabilly.prototype._addTransformPosition = function( style ) {
		  if ( !transformProperty ) {
		    return;
		  }
		  var transform = style[ transformProperty ];
		  // bail out if value is 'none'
		  if ( transform.indexOf('matrix') !== 0 ) {
		    return;
		  }
		  // split matrix(1, 0, 0, 1, x, y)
		  var matrixValues = transform.split(',');
		  // translate X value is in 12th or 4th position
		  var xIndex = transform.indexOf('matrix3d') === 0 ? 12 : 4;
		  var translateX = parseInt( matrixValues[ xIndex ], 10 );
		  // translate Y value is in 13th or 5th position
		  var translateY = parseInt( matrixValues[ xIndex + 1 ], 10 );
		  this.position.x += translateX;
		  this.position.y += translateY;
		};
		
		// -------------------------- events -------------------------- //
		
		/**
		 * pointer start
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.pointerDown = function( event, pointer ) {
		  this._dragPointerDown( event, pointer );
		  // kludge to blur focused inputs in dragger
		  var focused = document.activeElement;
		  if ( focused && focused.blur ) {
		    focused.blur();
		  }
		  // bind move and end events
		  this._bindPostStartEvents( event );
		  classie.add( this.element, 'is-pointer-down' );
		  this.dispatchEvent( 'pointerDown', event, [ pointer ] );
		};
		
		/**
		 * drag move
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.pointerMove = function( event, pointer ) {
		  var moveVector = this._dragPointerMove( event, pointer );
		  this.dispatchEvent( 'pointerMove', event, [ pointer, moveVector ] );
		  this._dragMove( event, pointer, moveVector );
		};
		
		/**
		 * drag start
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.dragStart = function( event, pointer ) {
		  if ( !this.isEnabled ) {
		    return;
		  }
		  this._getPosition();
		  this.measureContainment();
		  // position _when_ drag began
		  this.startPosition.x = this.position.x;
		  this.startPosition.y = this.position.y;
		  // reset left/top style
		  this.setLeftTop();
		
		  this.dragPoint.x = 0;
		  this.dragPoint.y = 0;
		
		  // reset isDragging flag
		  this.isDragging = true;
		  classie.add( this.element, 'is-dragging' );
		  this.dispatchEvent( 'dragStart', event, [ pointer ] );
		  // start animation
		  this.animate();
		};
		
		Draggabilly.prototype.measureContainment = function() {
		  var containment = this.options.containment;
		  if ( !containment ) {
		    return;
		  }
		
		  this.size = getSize( this.element );
		  var elemRect = this.element.getBoundingClientRect();
		
		  // use element if element
		  var container = isElement( containment ) ? containment :
		    // fallback to querySelector if string
		    typeof containment == 'string' ? document.querySelector( containment ) :
		    // otherwise just `true`, use the parent
		    this.element.parentNode;
		
		  this.containerSize = getSize( container );
		  var containerRect = container.getBoundingClientRect();
		
		  this.relativeStartPosition = {
		    x: elemRect.left - containerRect.left,
		    y: elemRect.top  - containerRect.top
		  };
		};
		
		// ----- move event ----- //
		
		/**
		 * drag move
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.dragMove = function( event, pointer, moveVector ) {
		  if ( !this.isEnabled ) {
		    return;
		  }
		  var dragX = moveVector.x;
		  var dragY = moveVector.y;
		
		  var grid = this.options.grid;
		  var gridX = grid && grid[0];
		  var gridY = grid && grid[1];
		
		  dragX = applyGrid( dragX, gridX );
		  dragY = applyGrid( dragY, gridY );
		
		  dragX = this.containDrag( 'x', dragX, gridX );
		  dragY = this.containDrag( 'y', dragY, gridY );
		
		  // constrain to axis
		  dragX = this.options.axis == 'y' ? 0 : dragX;
		  dragY = this.options.axis == 'x' ? 0 : dragY;
		
		  this.position.x = this.startPosition.x + dragX;
		  this.position.y = this.startPosition.y + dragY;
		  // set dragPoint properties
		  this.dragPoint.x = dragX;
		  this.dragPoint.y = dragY;
		
		  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );
		};
		
		function applyGrid( value, grid, method ) {
		  method = method || 'round';
		  return grid ? Math[ method ]( value / grid ) * grid : value;
		}
		
		Draggabilly.prototype.containDrag = function( axis, drag, grid ) {
		  if ( !this.options.containment ) {
		    return drag;
		  }
		  var measure = axis == 'x' ? 'width' : 'height';
		
		  var rel = this.relativeStartPosition[ axis ];
		  var min = applyGrid( -rel, grid, 'ceil' );
		  var max = this.containerSize[ measure ] - rel - this.size[ measure ];
		  max = applyGrid( max, grid, 'floor' );
		  return  Math.min( max, Math.max( min, drag ) );
		};
		
		// ----- end event ----- //
		
		/**
		 * pointer up
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.pointerUp = function( event, pointer ) {
		  classie.remove( this.element, 'is-pointer-down' );
		  this.dispatchEvent( 'pointerUp', event, [ pointer ] );
		  this._dragPointerUp( event, pointer );
		};
		
		/**
		 * drag end
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Draggabilly.prototype.dragEnd = function( event, pointer ) {
		  if ( !this.isEnabled ) {
		    return;
		  }
		  this.isDragging = false;
		  // use top left position when complete
		  if ( transformProperty ) {
		    this.element.style[ transformProperty ] = '';
		    this.setLeftTop();
		  }
		  classie.remove( this.element, 'is-dragging' );
		  this.dispatchEvent( 'dragEnd', event, [ pointer ] );
		};
		
		// -------------------------- animation -------------------------- //
		
		Draggabilly.prototype.animate = function() {
		  // only render and animate if dragging
		  if ( !this.isDragging ) {
		    return;
		  }
		
		  this.positionDrag();
		
		  var _this = this;
		  requestAnimationFrame( function animateFrame() {
		    _this.animate();
		  });
		
		};
		
		// transform translate function
		var translate = is3d ?
		  function( x, y ) {
		    return 'translate3d( ' + x + 'px, ' + y + 'px, 0)';
		  } :
		  function( x, y ) {
		    return 'translate( ' + x + 'px, ' + y + 'px)';
		  };
		
		// left/top positioning
		Draggabilly.prototype.setLeftTop = function() {
		  this.element.style.left = this.position.x + 'px';
		  this.element.style.top  = this.position.y + 'px';
		};
		
		Draggabilly.prototype.positionDrag = transformProperty ?
		  function() {
		    // position with transform
		    this.element.style[ transformProperty ] = translate( this.dragPoint.x, this.dragPoint.y );
		  } : Draggabilly.prototype.setLeftTop;
		
		// ----- staticClick ----- //
		
		Draggabilly.prototype.staticClick = function( event, pointer ) {
		  this.dispatchEvent( 'staticClick', event, [ pointer ] );
		};
		
		// ----- methods ----- //
		
		Draggabilly.prototype.enable = function() {
		  this.isEnabled = true;
		};
		
		Draggabilly.prototype.disable = function() {
		  this.isEnabled = false;
		  if ( this.isDragging ) {
		    this.dragEnd();
		  }
		};
		
		Draggabilly.prototype.destroy = function() {
		  this.disable();
		  // reset styles
		  if ( transformProperty ) {
		    this.element.style[ transformProperty ] = '';
		  }
		  this.element.style.left = '';
		  this.element.style.top = '';
		  this.element.style.position = '';
		  // unbind handles
		  this.unbindHandles();
		  // remove jQuery data
		  if ( this.$element ) {
		    this.$element.removeData('draggabilly');
		  }
		};
		
		// ----- jQuery bridget ----- //
		
		// required for jQuery bridget
		Draggabilly.prototype._init = noop;
		
		if ( jQuery && jQuery.bridget ) {
		  jQuery.bridget( 'draggabilly', Draggabilly );
		}
		
		// -----  ----- //
		
		return Draggabilly;
		
		}));
		
		}.call(window));
	
	/***/ },
	/* 176 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * classie v1.0.1
		 * class helper functions
		 * from bonzo https://github.com/ded/bonzo
		 * MIT license
		 * 
		 * classie.has( elem, 'my-class' ) -> true/false
		 * classie.add( elem, 'my-new-class' )
		 * classie.remove( elem, 'my-unwanted-class' )
		 * classie.toggle( elem, 'my-class' )
		 */
		
		/*jshint browser: true, strict: true, undef: true, unused: true */
		/*global define: false, module: false */
		
		( function( window ) {
		
		'use strict';
		
		// class helper functions from bonzo https://github.com/ded/bonzo
		
		function classReg( className ) {
		  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
		}
		
		// classList support for class management
		// altho to be fair, the api sucks because it won't accept multiple classes at once
		var hasClass, addClass, removeClass;
		
		if ( 'classList' in document.documentElement ) {
		  hasClass = function( elem, c ) {
		    return elem.classList.contains( c );
		  };
		  addClass = function( elem, c ) {
		    elem.classList.add( c );
		  };
		  removeClass = function( elem, c ) {
		    elem.classList.remove( c );
		  };
		}
		else {
		  hasClass = function( elem, c ) {
		    return classReg( c ).test( elem.className );
		  };
		  addClass = function( elem, c ) {
		    if ( !hasClass( elem, c ) ) {
		      elem.className = elem.className + ' ' + c;
		    }
		  };
		  removeClass = function( elem, c ) {
		    elem.className = elem.className.replace( classReg( c ), ' ' );
		  };
		}
		
		function toggleClass( elem, c ) {
		  var fn = hasClass( elem, c ) ? removeClass : addClass;
		  fn( elem, c );
		}
		
		var classie = {
		  // full names
		  hasClass: hasClass,
		  addClass: addClass,
		  removeClass: removeClass,
		  toggleClass: toggleClass,
		  // short names
		  has: hasClass,
		  add: addClass,
		  remove: removeClass,
		  toggle: toggleClass
		};
		
		// transport
		if ( typeof define === 'function' && define.amd ) {
		  // AMD
		  define( classie );
		} else if ( true ) {
		  // CommonJS
		  module.exports = classie;
		} else {
		  // browser global
		  window.classie = classie;
		}
		
		})( window );
		
		}.call(window));
	
	/***/ },
	/* 177 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * getStyleProperty v1.0.4
		 * original by kangax
		 * http://perfectionkills.com/feature-testing-css-properties/
		 * MIT license
		 */
		
		/*jshint browser: true, strict: true, undef: true */
		/*global define: false, exports: false, module: false */
		
		( function( window ) {
		
		'use strict';
		
		var prefixes = 'Webkit Moz ms Ms O'.split(' ');
		var docElemStyle = document.documentElement.style;
		
		function getStyleProperty( propName ) {
		  if ( !propName ) {
		    return;
		  }
		
		  // test standard property first
		  if ( typeof docElemStyle[ propName ] === 'string' ) {
		    return propName;
		  }
		
		  // capitalize
		  propName = propName.charAt(0).toUpperCase() + propName.slice(1);
		
		  // test vendor specific properties
		  var prefixed;
		  for ( var i=0, len = prefixes.length; i < len; i++ ) {
		    prefixed = prefixes[i] + propName;
		    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
		      return prefixed;
		    }
		  }
		}
		
		// transport
		if ( typeof define === 'function' && define.amd ) {
		  // AMD
		  define( function() {
		    return getStyleProperty;
		  });
		} else if ( true ) {
		  // CommonJS for Component
		  module.exports = getStyleProperty;
		} else {
		  // browser global
		  window.getStyleProperty = getStyleProperty;
		}
		
		})( window );
		
		}.call(window));
	
	/***/ },
	/* 178 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * getSize v1.2.2
		 * measure size of elements
		 * MIT license
		 */
		
		/*jshint browser: true, strict: true, undef: true, unused: true */
		/*global define: false, exports: false, require: false, module: false, console: false */
		
		( function( window, undefined ) {
		
		'use strict';
		
		// -------------------------- helpers -------------------------- //
		
		// get a number from a string, not a percentage
		function getStyleSize( value ) {
		  var num = parseFloat( value );
		  // not a percent like '100%', and a number
		  var isValid = value.indexOf('%') === -1 && !isNaN( num );
		  return isValid && num;
		}
		
		function noop() {}
		
		var logError = typeof console === 'undefined' ? noop :
		  function( message ) {
		    console.error( message );
		  };
		
		// -------------------------- measurements -------------------------- //
		
		var measurements = [
		  'paddingLeft',
		  'paddingRight',
		  'paddingTop',
		  'paddingBottom',
		  'marginLeft',
		  'marginRight',
		  'marginTop',
		  'marginBottom',
		  'borderLeftWidth',
		  'borderRightWidth',
		  'borderTopWidth',
		  'borderBottomWidth'
		];
		
		function getZeroSize() {
		  var size = {
		    width: 0,
		    height: 0,
		    innerWidth: 0,
		    innerHeight: 0,
		    outerWidth: 0,
		    outerHeight: 0
		  };
		  for ( var i=0, len = measurements.length; i < len; i++ ) {
		    var measurement = measurements[i];
		    size[ measurement ] = 0;
		  }
		  return size;
		}
		
		
		
		function defineGetSize( getStyleProperty ) {
		
		// -------------------------- setup -------------------------- //
		
		var isSetup = false;
		
		var getStyle, boxSizingProp, isBoxSizeOuter;
		
		/**
		 * setup vars and functions
		 * do it on initial getSize(), rather than on script load
		 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
		 */
		function setup() {
		  // setup once
		  if ( isSetup ) {
		    return;
		  }
		  isSetup = true;
		
		  var getComputedStyle = window.getComputedStyle;
		  getStyle = ( function() {
		    var getStyleFn = getComputedStyle ?
		      function( elem ) {
		        return getComputedStyle( elem, null );
		      } :
		      function( elem ) {
		        return elem.currentStyle;
		      };
		
		      return function getStyle( elem ) {
		        var style = getStyleFn( elem );
		        if ( !style ) {
		          logError( 'Style returned ' + style +
		            '. Are you running this code in a hidden iframe on Firefox? ' +
		            'See http://bit.ly/getsizebug1' );
		        }
		        return style;
		      };
		  })();
		
		  // -------------------------- box sizing -------------------------- //
		
		  boxSizingProp = getStyleProperty('boxSizing');
		
		  /**
		   * WebKit measures the outer-width on style.width on border-box elems
		   * IE & Firefox measures the inner-width
		   */
		  if ( boxSizingProp ) {
		    var div = document.createElement('div');
		    div.style.width = '200px';
		    div.style.padding = '1px 2px 3px 4px';
		    div.style.borderStyle = 'solid';
		    div.style.borderWidth = '1px 2px 3px 4px';
		    div.style[ boxSizingProp ] = 'border-box';
		
		    var body = document.body || document.documentElement;
		    body.appendChild( div );
		    var style = getStyle( div );
		
		    isBoxSizeOuter = getStyleSize( style.width ) === 200;
		    body.removeChild( div );
		  }
		
		}
		
		// -------------------------- getSize -------------------------- //
		
		function getSize( elem ) {
		  setup();
		
		  // use querySeletor if elem is string
		  if ( typeof elem === 'string' ) {
		    elem = document.querySelector( elem );
		  }
		
		  // do not proceed on non-objects
		  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
		    return;
		  }
		
		  var style = getStyle( elem );
		
		  // if hidden, everything is 0
		  if ( style.display === 'none' ) {
		    return getZeroSize();
		  }
		
		  var size = {};
		  size.width = elem.offsetWidth;
		  size.height = elem.offsetHeight;
		
		  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
		    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );
		
		  // get all measurements
		  for ( var i=0, len = measurements.length; i < len; i++ ) {
		    var measurement = measurements[i];
		    var value = style[ measurement ];
		    value = mungeNonPixel( elem, value );
		    var num = parseFloat( value );
		    // any 'auto', 'medium' value will be 0
		    size[ measurement ] = !isNaN( num ) ? num : 0;
		  }
		
		  var paddingWidth = size.paddingLeft + size.paddingRight;
		  var paddingHeight = size.paddingTop + size.paddingBottom;
		  var marginWidth = size.marginLeft + size.marginRight;
		  var marginHeight = size.marginTop + size.marginBottom;
		  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
		  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
		
		  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
		
		  // overwrite width and height if we can get it from style
		  var styleWidth = getStyleSize( style.width );
		  if ( styleWidth !== false ) {
		    size.width = styleWidth +
		      // add padding and border unless it's already including it
		      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
		  }
		
		  var styleHeight = getStyleSize( style.height );
		  if ( styleHeight !== false ) {
		    size.height = styleHeight +
		      // add padding and border unless it's already including it
		      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
		  }
		
		  size.innerWidth = size.width - ( paddingWidth + borderWidth );
		  size.innerHeight = size.height - ( paddingHeight + borderHeight );
		
		  size.outerWidth = size.width + marginWidth;
		  size.outerHeight = size.height + marginHeight;
		
		  return size;
		}
		
		// IE8 returns percent values, not pixels
		// taken from jQuery's curCSS
		function mungeNonPixel( elem, value ) {
		  // IE8 and has percent value
		  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
		    return value;
		  }
		  var style = elem.style;
		  // Remember the original values
		  var left = style.left;
		  var rs = elem.runtimeStyle;
		  var rsLeft = rs && rs.left;
		
		  // Put in the new values to get a computed value out
		  if ( rsLeft ) {
		    rs.left = elem.currentStyle.left;
		  }
		  style.left = value;
		  value = style.pixelLeft;
		
		  // Revert the changed values
		  style.left = left;
		  if ( rsLeft ) {
		    rs.left = rsLeft;
		  }
		
		  return value;
		}
		
		return getSize;
		
		}
		
		// transport
		if ( typeof define === 'function' && define.amd ) {
		  // AMD for RequireJS
		  define( [ 'get-style-property/get-style-property' ], defineGetSize );
		} else if ( true ) {
		  // CommonJS for Component
		  module.exports = defineGetSize( __webpack_require__(177) );
		} else {
		  // browser global
		  window.getSize = defineGetSize( window.getStyleProperty );
		}
		
		})( window );
		
		}.call(window));
	
	/***/ },
	/* 179 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * Unidragger v1.1.5
		 * Draggable base class
		 * MIT license
		 */
		
		/*jshint browser: true, unused: true, undef: true, strict: true */
		
		( function( window, factory ) {
		  /*global define: false, module: false, require: false */
		  'use strict';
		  // universal module definition
		
		  if ( typeof define == 'function' && define.amd ) {
		    // AMD
		    define( [
		      'eventie/eventie',
		      'unipointer/unipointer'
		    ], function( eventie, Unipointer ) {
		      return factory( window, eventie, Unipointer );
		    });
		  } else if ( true ) {
		    // CommonJS
		    module.exports = factory(
		      window,
		      __webpack_require__(180),
		      __webpack_require__(181)
		    );
		  } else {
		    // browser global
		    window.Unidragger = factory(
		      window,
		      window.eventie,
		      window.Unipointer
		    );
		  }
		
		}( window, function factory( window, eventie, Unipointer ) {
		
		'use strict';
		
		// -----  ----- //
		
		function noop() {}
		
		// handle IE8 prevent default
		function preventDefaultEvent( event ) {
		  if ( event.preventDefault ) {
		    event.preventDefault();
		  } else {
		    event.returnValue = false;
		  }
		}
		
		// -------------------------- Unidragger -------------------------- //
		
		function Unidragger() {}
		
		// inherit Unipointer & EventEmitter
		Unidragger.prototype = new Unipointer();
		
		// ----- bind start ----- //
		
		Unidragger.prototype.bindHandles = function() {
		  this._bindHandles( true );
		};
		
		Unidragger.prototype.unbindHandles = function() {
		  this._bindHandles( false );
		};
		
		var navigator = window.navigator;
		/**
		 * works as unbinder, as you can .bindHandles( false ) to unbind
		 * @param {Boolean} isBind - will unbind if falsey
		 */
		Unidragger.prototype._bindHandles = function( isBind ) {
		  // munge isBind, default to true
		  isBind = isBind === undefined ? true : !!isBind;
		  // extra bind logic
		  var binderExtra;
		  if ( navigator.pointerEnabled ) {
		    binderExtra = function( handle ) {
		      // disable scrolling on the element
		      handle.style.touchAction = isBind ? 'none' : '';
		    };
		  } else if ( navigator.msPointerEnabled ) {
		    binderExtra = function( handle ) {
		      // disable scrolling on the element
		      handle.style.msTouchAction = isBind ? 'none' : '';
		    };
		  } else {
		    binderExtra = function() {
		      // TODO re-enable img.ondragstart when unbinding
		      if ( isBind ) {
		        disableImgOndragstart( handle );
		      }
		    };
		  }
		  // bind each handle
		  var bindMethod = isBind ? 'bind' : 'unbind';
		  for ( var i=0, len = this.handles.length; i < len; i++ ) {
		    var handle = this.handles[i];
		    this._bindStartEvent( handle, isBind );
		    binderExtra( handle );
		    eventie[ bindMethod ]( handle, 'click', this );
		  }
		};
		
		// remove default dragging interaction on all images in IE8
		// IE8 does its own drag thing on images, which messes stuff up
		
		function noDragStart() {
		  return false;
		}
		
		// TODO replace this with a IE8 test
		var isIE8 = 'attachEvent' in document.documentElement;
		
		// IE8 only
		var disableImgOndragstart = !isIE8 ? noop : function( handle ) {
		
		  if ( handle.nodeName == 'IMG' ) {
		    handle.ondragstart = noDragStart;
		  }
		
		  var images = handle.querySelectorAll('img');
		  for ( var i=0, len = images.length; i < len; i++ ) {
		    var img = images[i];
		    img.ondragstart = noDragStart;
		  }
		};
		
		// ----- start event ----- //
		
		/**
		 * pointer start
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Unidragger.prototype.pointerDown = function( event, pointer ) {
		  // dismiss range sliders
		  if ( event.target.nodeName == 'INPUT' && event.target.type == 'range' ) {
		    // reset pointerDown logic
		    this.isPointerDown = false;
		    delete this.pointerIdentifier;
		    return;
		  }
		
		  this._dragPointerDown( event, pointer );
		  // kludge to blur focused inputs in dragger
		  var focused = document.activeElement;
		  if ( focused && focused.blur ) {
		    focused.blur();
		  }
		  // bind move and end events
		  this._bindPostStartEvents( event );
		  // track scrolling
		  this.pointerDownScroll = Unidragger.getScrollPosition();
		  eventie.bind( window, 'scroll', this );
		
		  this.emitEvent( 'pointerDown', [ event, pointer ] );
		};
		
		// base pointer down logic
		Unidragger.prototype._dragPointerDown = function( event, pointer ) {
		  // track to see when dragging starts
		  this.pointerDownPoint = Unipointer.getPointerPoint( pointer );
		
		  // prevent default, unless touchstart or <select>
		  var isTouchstart = event.type == 'touchstart';
		  var targetNodeName = event.target.nodeName;
		  if ( !isTouchstart && targetNodeName != 'SELECT' ) {
		    preventDefaultEvent( event );
		  }
		};
		
		// ----- move event ----- //
		
		/**
		 * drag move
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Unidragger.prototype.pointerMove = function( event, pointer ) {
		  var moveVector = this._dragPointerMove( event, pointer );
		  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );
		  this._dragMove( event, pointer, moveVector );
		};
		
		// base pointer move logic
		Unidragger.prototype._dragPointerMove = function( event, pointer ) {
		  var movePoint = Unipointer.getPointerPoint( pointer );
		  var moveVector = {
		    x: movePoint.x - this.pointerDownPoint.x,
		    y: movePoint.y - this.pointerDownPoint.y
		  };
		  // start drag if pointer has moved far enough to start drag
		  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {
		    this._dragStart( event, pointer );
		  }
		  return moveVector;
		};
		
		// condition if pointer has moved far enough to start drag
		Unidragger.prototype.hasDragStarted = function( moveVector ) {
		  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;
		};
		
		
		// ----- end event ----- //
		
		/**
		 * pointer up
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Unidragger.prototype.pointerUp = function( event, pointer ) {
		  this.emitEvent( 'pointerUp', [ event, pointer ] );
		  this._dragPointerUp( event, pointer );
		};
		
		Unidragger.prototype._dragPointerUp = function( event, pointer ) {
		  if ( this.isDragging ) {
		    this._dragEnd( event, pointer );
		  } else {
		    // pointer didn't move enough for drag to start
		    this._staticClick( event, pointer );
		  }
		};
		
		Unipointer.prototype.pointerDone = function() {
		  eventie.unbind( window, 'scroll', this );
		};
		
		// -------------------------- drag -------------------------- //
		
		// dragStart
		Unidragger.prototype._dragStart = function( event, pointer ) {
		  this.isDragging = true;
		  this.dragStartPoint = Unidragger.getPointerPoint( pointer );
		  // prevent clicks
		  this.isPreventingClicks = true;
		
		  this.dragStart( event, pointer );
		};
		
		Unidragger.prototype.dragStart = function( event, pointer ) {
		  this.emitEvent( 'dragStart', [ event, pointer ] );
		};
		
		// dragMove
		Unidragger.prototype._dragMove = function( event, pointer, moveVector ) {
		  // do not drag if not dragging yet
		  if ( !this.isDragging ) {
		    return;
		  }
		
		  this.dragMove( event, pointer, moveVector );
		};
		
		Unidragger.prototype.dragMove = function( event, pointer, moveVector ) {
		  preventDefaultEvent( event );
		  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );
		};
		
		// dragEnd
		Unidragger.prototype._dragEnd = function( event, pointer ) {
		  // set flags
		  this.isDragging = false;
		  // re-enable clicking async
		  var _this = this;
		  setTimeout( function() {
		    delete _this.isPreventingClicks;
		  });
		
		  this.dragEnd( event, pointer );
		};
		
		Unidragger.prototype.dragEnd = function( event, pointer ) {
		  this.emitEvent( 'dragEnd', [ event, pointer ] );
		};
		
		Unidragger.prototype.pointerDone = function() {
		  eventie.unbind( window, 'scroll', this );
		  delete this.pointerDownScroll;
		};
		
		// ----- onclick ----- //
		
		// handle all clicks and prevent clicks when dragging
		Unidragger.prototype.onclick = function( event ) {
		  if ( this.isPreventingClicks ) {
		    preventDefaultEvent( event );
		  }
		};
		
		// ----- staticClick ----- //
		
		// triggered after pointer down & up with no/tiny movement
		Unidragger.prototype._staticClick = function( event, pointer ) {
		  // ignore emulated mouse up clicks
		  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {
		    return;
		  }
		
		  // allow click in <input>s and <textarea>s
		  var nodeName = event.target.nodeName;
		  if ( nodeName == 'INPUT' || nodeName == 'TEXTAREA' ) {
		    event.target.focus();
		  }
		  this.staticClick( event, pointer );
		
		  // set flag for emulated clicks 300ms after touchend
		  if ( event.type != 'mouseup' ) {
		    this.isIgnoringMouseUp = true;
		    var _this = this;
		    // reset flag after 300ms
		    setTimeout( function() {
		      delete _this.isIgnoringMouseUp;
		    }, 400 );
		  }
		};
		
		Unidragger.prototype.staticClick = function( event, pointer ) {
		  this.emitEvent( 'staticClick', [ event, pointer ] );
		};
		
		// ----- scroll ----- //
		
		Unidragger.prototype.onscroll = function() {
		  var scroll = Unidragger.getScrollPosition();
		  var scrollMoveX = this.pointerDownScroll.x - scroll.x;
		  var scrollMoveY = this.pointerDownScroll.y - scroll.y;
		  // cancel click/tap if scroll is too much
		  if ( Math.abs( scrollMoveX ) > 3 || Math.abs( scrollMoveY ) > 3 ) {
		    this._pointerDone();
		  }
		};
		
		// ----- utils ----- //
		
		Unidragger.getPointerPoint = function( pointer ) {
		  return {
		    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
		    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
		  };
		};
		
		var isPageOffset = window.pageYOffset !== undefined;
		
		// get scroll in { x, y }
		Unidragger.getScrollPosition = function() {
		  return {
		    x: isPageOffset ? window.pageXOffset : document.body.scrollLeft,
		    y: isPageOffset ? window.pageYOffset : document.body.scrollTop
		  };
		};
		
		// -----  ----- //
		
		Unidragger.getPointerPoint = Unipointer.getPointerPoint;
		
		return Unidragger;
		
		}));
		
		}.call(window));
	
	/***/ },
	/* 180 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		 * eventie v1.0.6
		 * event binding helper
		 *   eventie.bind( elem, 'click', myFn )
		 *   eventie.unbind( elem, 'click', myFn )
		 * MIT license
		 */
		
		/*jshint browser: true, undef: true, unused: true */
		/*global define: false, module: false */
		
		( function( window ) {
		
		'use strict';
		
		var docElem = document.documentElement;
		
		var bind = function() {};
		
		function getIEEvent( obj ) {
		  var event = window.event;
		  // add event.target
		  event.target = event.target || event.srcElement || obj;
		  return event;
		}
		
		if ( docElem.addEventListener ) {
		  bind = function( obj, type, fn ) {
		    obj.addEventListener( type, fn, false );
		  };
		} else if ( docElem.attachEvent ) {
		  bind = function( obj, type, fn ) {
		    obj[ type + fn ] = fn.handleEvent ?
		      function() {
		        var event = getIEEvent( obj );
		        fn.handleEvent.call( fn, event );
		      } :
		      function() {
		        var event = getIEEvent( obj );
		        fn.call( obj, event );
		      };
		    obj.attachEvent( "on" + type, obj[ type + fn ] );
		  };
		}
		
		var unbind = function() {};
		
		if ( docElem.removeEventListener ) {
		  unbind = function( obj, type, fn ) {
		    obj.removeEventListener( type, fn, false );
		  };
		} else if ( docElem.detachEvent ) {
		  unbind = function( obj, type, fn ) {
		    obj.detachEvent( "on" + type, obj[ type + fn ] );
		    try {
		      delete obj[ type + fn ];
		    } catch ( err ) {
		      // can't delete window object properties
		      obj[ type + fn ] = undefined;
		    }
		  };
		}
		
		var eventie = {
		  bind: bind,
		  unbind: unbind
		};
		
		// ----- module definition ----- //
		
		if ( true ) {
		  // AMD
		  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (eventie), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if ( typeof exports === 'object' ) {
		  // CommonJS
		  module.exports = eventie;
		} else {
		  // browser global
		  window.eventie = eventie;
		}
		
		})( window );
	
	
	/***/ },
	/* 181 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * Unipointer v1.1.0
		 * base class for doing one thing with pointer event
		 * MIT license
		 */
		
		/*jshint browser: true, undef: true, unused: true, strict: true */
		/*global define: false, module: false, require: false */
		
		( function( window, factory ) {
		  'use strict';
		  // universal module definition
		
		  if ( typeof define == 'function' && define.amd ) {
		    // AMD
		    define( [
		      'eventEmitter/EventEmitter',
		      'eventie/eventie'
		    ], function( EventEmitter, eventie ) {
		      return factory( window, EventEmitter, eventie );
		    });
		  } else if ( true ) {
		    // CommonJS
		    module.exports = factory(
		      window,
		      __webpack_require__(182),
		      __webpack_require__(180)
		    );
		  } else {
		    // browser global
		    window.Unipointer = factory(
		      window,
		      window.EventEmitter,
		      window.eventie
		    );
		  }
		
		}( window, function factory( window, EventEmitter, eventie ) {
		
		'use strict';
		
		function noop() {}
		
		function Unipointer() {}
		
		// inherit EventEmitter
		Unipointer.prototype = new EventEmitter();
		
		Unipointer.prototype.bindStartEvent = function( elem ) {
		  this._bindStartEvent( elem, true );
		};
		
		Unipointer.prototype.unbindStartEvent = function( elem ) {
		  this._bindStartEvent( elem, false );
		};
		
		/**
		 * works as unbinder, as you can ._bindStart( false ) to unbind
		 * @param {Boolean} isBind - will unbind if falsey
		 */
		Unipointer.prototype._bindStartEvent = function( elem, isBind ) {
		  // munge isBind, default to true
		  isBind = isBind === undefined ? true : !!isBind;
		  var bindMethod = isBind ? 'bind' : 'unbind';
		
		  if ( window.navigator.pointerEnabled ) {
		    // W3C Pointer Events, IE11. See https://coderwall.com/p/mfreca
		    eventie[ bindMethod ]( elem, 'pointerdown', this );
		  } else if ( window.navigator.msPointerEnabled ) {
		    // IE10 Pointer Events
		    eventie[ bindMethod ]( elem, 'MSPointerDown', this );
		  } else {
		    // listen for both, for devices like Chrome Pixel
		    eventie[ bindMethod ]( elem, 'mousedown', this );
		    eventie[ bindMethod ]( elem, 'touchstart', this );
		  }
		};
		
		// trigger handler methods for events
		Unipointer.prototype.handleEvent = function( event ) {
		  var method = 'on' + event.type;
		  if ( this[ method ] ) {
		    this[ method ]( event );
		  }
		};
		
		// returns the touch that we're keeping track of
		Unipointer.prototype.getTouch = function( touches ) {
		  for ( var i=0, len = touches.length; i < len; i++ ) {
		    var touch = touches[i];
		    if ( touch.identifier == this.pointerIdentifier ) {
		      return touch;
		    }
		  }
		};
		
		// ----- start event ----- //
		
		Unipointer.prototype.onmousedown = function( event ) {
		  // dismiss clicks from right or middle buttons
		  var button = event.button;
		  if ( button && ( button !== 0 && button !== 1 ) ) {
		    return;
		  }
		  this._pointerDown( event, event );
		};
		
		Unipointer.prototype.ontouchstart = function( event ) {
		  this._pointerDown( event, event.changedTouches[0] );
		};
		
		Unipointer.prototype.onMSPointerDown =
		Unipointer.prototype.onpointerdown = function( event ) {
		  this._pointerDown( event, event );
		};
		
		/**
		 * pointer start
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 */
		Unipointer.prototype._pointerDown = function( event, pointer ) {
		  // dismiss other pointers
		  if ( this.isPointerDown ) {
		    return;
		  }
		
		  this.isPointerDown = true;
		  // save pointer identifier to match up touch events
		  this.pointerIdentifier = pointer.pointerId !== undefined ?
		    // pointerId for pointer events, touch.indentifier for touch events
		    pointer.pointerId : pointer.identifier;
		
		  this.pointerDown( event, pointer );
		};
		
		Unipointer.prototype.pointerDown = function( event, pointer ) {
		  this._bindPostStartEvents( event );
		  this.emitEvent( 'pointerDown', [ event, pointer ] );
		};
		
		// hash of events to be bound after start event
		var postStartEvents = {
		  mousedown: [ 'mousemove', 'mouseup' ],
		  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],
		  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],
		  MSPointerDown: [ 'MSPointerMove', 'MSPointerUp', 'MSPointerCancel' ]
		};
		
		Unipointer.prototype._bindPostStartEvents = function( event ) {
		  if ( !event ) {
		    return;
		  }
		  // get proper events to match start event
		  var events = postStartEvents[ event.type ];
		  // IE8 needs to be bound to document
		  var node = event.preventDefault ? window : document;
		  // bind events to node
		  for ( var i=0, len = events.length; i < len; i++ ) {
		    var evnt = events[i];
		    eventie.bind( node, evnt, this );
		  }
		  // save these arguments
		  this._boundPointerEvents = {
		    events: events,
		    node: node
		  };
		};
		
		Unipointer.prototype._unbindPostStartEvents = function() {
		  var args = this._boundPointerEvents;
		  // IE8 can trigger dragEnd twice, check for _boundEvents
		  if ( !args || !args.events ) {
		    return;
		  }
		
		  for ( var i=0, len = args.events.length; i < len; i++ ) {
		    var event = args.events[i];
		    eventie.unbind( args.node, event, this );
		  }
		  delete this._boundPointerEvents;
		};
		
		// ----- move event ----- //
		
		Unipointer.prototype.onmousemove = function( event ) {
		  this._pointerMove( event, event );
		};
		
		Unipointer.prototype.onMSPointerMove =
		Unipointer.prototype.onpointermove = function( event ) {
		  if ( event.pointerId == this.pointerIdentifier ) {
		    this._pointerMove( event, event );
		  }
		};
		
		Unipointer.prototype.ontouchmove = function( event ) {
		  var touch = this.getTouch( event.changedTouches );
		  if ( touch ) {
		    this._pointerMove( event, touch );
		  }
		};
		
		/**
		 * pointer move
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 * @private
		 */
		Unipointer.prototype._pointerMove = function( event, pointer ) {
		  this.pointerMove( event, pointer );
		};
		
		// public
		Unipointer.prototype.pointerMove = function( event, pointer ) {
		  this.emitEvent( 'pointerMove', [ event, pointer ] );
		};
		
		// ----- end event ----- //
		
		
		Unipointer.prototype.onmouseup = function( event ) {
		  this._pointerUp( event, event );
		};
		
		Unipointer.prototype.onMSPointerUp =
		Unipointer.prototype.onpointerup = function( event ) {
		  if ( event.pointerId == this.pointerIdentifier ) {
		    this._pointerUp( event, event );
		  }
		};
		
		Unipointer.prototype.ontouchend = function( event ) {
		  var touch = this.getTouch( event.changedTouches );
		  if ( touch ) {
		    this._pointerUp( event, touch );
		  }
		};
		
		/**
		 * pointer up
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 * @private
		 */
		Unipointer.prototype._pointerUp = function( event, pointer ) {
		  this._pointerDone();
		  this.pointerUp( event, pointer );
		};
		
		// public
		Unipointer.prototype.pointerUp = function( event, pointer ) {
		  this.emitEvent( 'pointerUp', [ event, pointer ] );
		};
		
		// ----- pointer done ----- //
		
		// triggered on pointer up & pointer cancel
		Unipointer.prototype._pointerDone = function() {
		  // reset properties
		  this.isPointerDown = false;
		  delete this.pointerIdentifier;
		  // remove events
		  this._unbindPostStartEvents();
		  this.pointerDone();
		};
		
		Unipointer.prototype.pointerDone = noop;
		
		// ----- pointer cancel ----- //
		
		Unipointer.prototype.onMSPointerCancel =
		Unipointer.prototype.onpointercancel = function( event ) {
		  if ( event.pointerId == this.pointerIdentifier ) {
		    this._pointerCancel( event, event );
		  }
		};
		
		Unipointer.prototype.ontouchcancel = function( event ) {
		  var touch = this.getTouch( event.changedTouches );
		  if ( touch ) {
		    this._pointerCancel( event, touch );
		  }
		};
		
		/**
		 * pointer cancel
		 * @param {Event} event
		 * @param {Event or Touch} pointer
		 * @private
		 */
		Unipointer.prototype._pointerCancel = function( event, pointer ) {
		  this._pointerDone();
		  this.pointerCancel( event, pointer );
		};
		
		// public
		Unipointer.prototype.pointerCancel = function( event, pointer ) {
		  this.emitEvent( 'pointerCancel', [ event, pointer ] );
		};
		
		// -----  ----- //
		
		// utility function for getting x/y cooridinates from event, because IE8
		Unipointer.getPointerPoint = function( pointer ) {
		  return {
		    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
		    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
		  };
		};
		
		// -----  ----- //
		
		return Unipointer;
		
		}));
		
		}.call(window));
	
	/***/ },
	/* 182 */
	/***/ function(module, exports) {
	
		/*** IMPORTS FROM imports-loader ***/
		var define = false;
		(function() {
		
		/*!
		 * EventEmitter v4.2.11 - git.io/ee
		 * Unlicense - http://unlicense.org/
		 * Oliver Caldwell - http://oli.me.uk/
		 * @preserve
		 */
		
		;(function () {
		    'use strict';
		
		    /**
		     * Class for managing events.
		     * Can be extended to provide event functionality in other classes.
		     *
		     * @class EventEmitter Manages event registering and emitting.
		     */
		    function EventEmitter() {}
		
		    // Shortcuts to improve speed and size
		    var proto = EventEmitter.prototype;
		    var exports = this;
		    var originalGlobalValue = exports.EventEmitter;
		
		    /**
		     * Finds the index of the listener for the event in its storage array.
		     *
		     * @param {Function[]} listeners Array of listeners to search through.
		     * @param {Function} listener Method to look for.
		     * @return {Number} Index of the specified listener, -1 if not found
		     * @api private
		     */
		    function indexOfListener(listeners, listener) {
		        var i = listeners.length;
		        while (i--) {
		            if (listeners[i].listener === listener) {
		                return i;
		            }
		        }
		
		        return -1;
		    }
		
		    /**
		     * Alias a method while keeping the context correct, to allow for overwriting of target method.
		     *
		     * @param {String} name The name of the target method.
		     * @return {Function} The aliased method
		     * @api private
		     */
		    function alias(name) {
		        return function aliasClosure() {
		            return this[name].apply(this, arguments);
		        };
		    }
		
		    /**
		     * Returns the listener array for the specified event.
		     * Will initialise the event object and listener arrays if required.
		     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
		     * Each property in the object response is an array of listener functions.
		     *
		     * @param {String|RegExp} evt Name of the event to return the listeners from.
		     * @return {Function[]|Object} All listener functions for the event.
		     */
		    proto.getListeners = function getListeners(evt) {
		        var events = this._getEvents();
		        var response;
		        var key;
		
		        // Return a concatenated array of all matching events if
		        // the selector is a regular expression.
		        if (evt instanceof RegExp) {
		            response = {};
		            for (key in events) {
		                if (events.hasOwnProperty(key) && evt.test(key)) {
		                    response[key] = events[key];
		                }
		            }
		        }
		        else {
		            response = events[evt] || (events[evt] = []);
		        }
		
		        return response;
		    };
		
		    /**
		     * Takes a list of listener objects and flattens it into a list of listener functions.
		     *
		     * @param {Object[]} listeners Raw listener objects.
		     * @return {Function[]} Just the listener functions.
		     */
		    proto.flattenListeners = function flattenListeners(listeners) {
		        var flatListeners = [];
		        var i;
		
		        for (i = 0; i < listeners.length; i += 1) {
		            flatListeners.push(listeners[i].listener);
		        }
		
		        return flatListeners;
		    };
		
		    /**
		     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
		     *
		     * @param {String|RegExp} evt Name of the event to return the listeners from.
		     * @return {Object} All listener functions for an event in an object.
		     */
		    proto.getListenersAsObject = function getListenersAsObject(evt) {
		        var listeners = this.getListeners(evt);
		        var response;
		
		        if (listeners instanceof Array) {
		            response = {};
		            response[evt] = listeners;
		        }
		
		        return response || listeners;
		    };
		
		    /**
		     * Adds a listener function to the specified event.
		     * The listener will not be added if it is a duplicate.
		     * If the listener returns true then it will be removed after it is called.
		     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
		     *
		     * @param {String|RegExp} evt Name of the event to attach the listener to.
		     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.addListener = function addListener(evt, listener) {
		        var listeners = this.getListenersAsObject(evt);
		        var listenerIsWrapped = typeof listener === 'object';
		        var key;
		
		        for (key in listeners) {
		            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
		                listeners[key].push(listenerIsWrapped ? listener : {
		                    listener: listener,
		                    once: false
		                });
		            }
		        }
		
		        return this;
		    };
		
		    /**
		     * Alias of addListener
		     */
		    proto.on = alias('addListener');
		
		    /**
		     * Semi-alias of addListener. It will add a listener that will be
		     * automatically removed after its first execution.
		     *
		     * @param {String|RegExp} evt Name of the event to attach the listener to.
		     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.addOnceListener = function addOnceListener(evt, listener) {
		        return this.addListener(evt, {
		            listener: listener,
		            once: true
		        });
		    };
		
		    /**
		     * Alias of addOnceListener.
		     */
		    proto.once = alias('addOnceListener');
		
		    /**
		     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
		     * You need to tell it what event names should be matched by a regex.
		     *
		     * @param {String} evt Name of the event to create.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.defineEvent = function defineEvent(evt) {
		        this.getListeners(evt);
		        return this;
		    };
		
		    /**
		     * Uses defineEvent to define multiple events.
		     *
		     * @param {String[]} evts An array of event names to define.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.defineEvents = function defineEvents(evts) {
		        for (var i = 0; i < evts.length; i += 1) {
		            this.defineEvent(evts[i]);
		        }
		        return this;
		    };
		
		    /**
		     * Removes a listener function from the specified event.
		     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
		     *
		     * @param {String|RegExp} evt Name of the event to remove the listener from.
		     * @param {Function} listener Method to remove from the event.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.removeListener = function removeListener(evt, listener) {
		        var listeners = this.getListenersAsObject(evt);
		        var index;
		        var key;
		
		        for (key in listeners) {
		            if (listeners.hasOwnProperty(key)) {
		                index = indexOfListener(listeners[key], listener);
		
		                if (index !== -1) {
		                    listeners[key].splice(index, 1);
		                }
		            }
		        }
		
		        return this;
		    };
		
		    /**
		     * Alias of removeListener
		     */
		    proto.off = alias('removeListener');
		
		    /**
		     * Adds listeners in bulk using the manipulateListeners method.
		     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
		     * You can also pass it a regular expression to add the array of listeners to all events that match it.
		     * Yeah, this function does quite a bit. That's probably a bad thing.
		     *
		     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
		     * @param {Function[]} [listeners] An optional array of listener functions to add.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.addListeners = function addListeners(evt, listeners) {
		        // Pass through to manipulateListeners
		        return this.manipulateListeners(false, evt, listeners);
		    };
		
		    /**
		     * Removes listeners in bulk using the manipulateListeners method.
		     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
		     * You can also pass it an event name and an array of listeners to be removed.
		     * You can also pass it a regular expression to remove the listeners from all events that match it.
		     *
		     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
		     * @param {Function[]} [listeners] An optional array of listener functions to remove.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.removeListeners = function removeListeners(evt, listeners) {
		        // Pass through to manipulateListeners
		        return this.manipulateListeners(true, evt, listeners);
		    };
		
		    /**
		     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
		     * The first argument will determine if the listeners are removed (true) or added (false).
		     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
		     * You can also pass it an event name and an array of listeners to be added/removed.
		     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
		     *
		     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
		     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
		     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
		        var i;
		        var value;
		        var single = remove ? this.removeListener : this.addListener;
		        var multiple = remove ? this.removeListeners : this.addListeners;
		
		        // If evt is an object then pass each of its properties to this method
		        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
		            for (i in evt) {
		                if (evt.hasOwnProperty(i) && (value = evt[i])) {
		                    // Pass the single listener straight through to the singular method
		                    if (typeof value === 'function') {
		                        single.call(this, i, value);
		                    }
		                    else {
		                        // Otherwise pass back to the multiple function
		                        multiple.call(this, i, value);
		                    }
		                }
		            }
		        }
		        else {
		            // So evt must be a string
		            // And listeners must be an array of listeners
		            // Loop over it and pass each one to the multiple method
		            i = listeners.length;
		            while (i--) {
		                single.call(this, evt, listeners[i]);
		            }
		        }
		
		        return this;
		    };
		
		    /**
		     * Removes all listeners from a specified event.
		     * If you do not specify an event then all listeners will be removed.
		     * That means every event will be emptied.
		     * You can also pass a regex to remove all events that match it.
		     *
		     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.removeEvent = function removeEvent(evt) {
		        var type = typeof evt;
		        var events = this._getEvents();
		        var key;
		
		        // Remove different things depending on the state of evt
		        if (type === 'string') {
		            // Remove all listeners for the specified event
		            delete events[evt];
		        }
		        else if (evt instanceof RegExp) {
		            // Remove all events matching the regex.
		            for (key in events) {
		                if (events.hasOwnProperty(key) && evt.test(key)) {
		                    delete events[key];
		                }
		            }
		        }
		        else {
		            // Remove all listeners in all events
		            delete this._events;
		        }
		
		        return this;
		    };
		
		    /**
		     * Alias of removeEvent.
		     *
		     * Added to mirror the node API.
		     */
		    proto.removeAllListeners = alias('removeEvent');
		
		    /**
		     * Emits an event of your choice.
		     * When emitted, every listener attached to that event will be executed.
		     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
		     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
		     * So they will not arrive within the array on the other side, they will be separate.
		     * You can also pass a regular expression to emit to all events that match it.
		     *
		     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
		     * @param {Array} [args] Optional array of arguments to be passed to each listener.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.emitEvent = function emitEvent(evt, args) {
		        var listeners = this.getListenersAsObject(evt);
		        var listener;
		        var i;
		        var key;
		        var response;
		
		        for (key in listeners) {
		            if (listeners.hasOwnProperty(key)) {
		                i = listeners[key].length;
		
		                while (i--) {
		                    // If the listener returns true then it shall be removed from the event
		                    // The function is executed either with a basic call or an apply if there is an args array
		                    listener = listeners[key][i];
		
		                    if (listener.once === true) {
		                        this.removeListener(evt, listener.listener);
		                    }
		
		                    response = listener.listener.apply(this, args || []);
		
		                    if (response === this._getOnceReturnValue()) {
		                        this.removeListener(evt, listener.listener);
		                    }
		                }
		            }
		        }
		
		        return this;
		    };
		
		    /**
		     * Alias of emitEvent
		     */
		    proto.trigger = alias('emitEvent');
		
		    /**
		     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
		     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
		     *
		     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
		     * @param {...*} Optional additional arguments to be passed to each listener.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.emit = function emit(evt) {
		        var args = Array.prototype.slice.call(arguments, 1);
		        return this.emitEvent(evt, args);
		    };
		
		    /**
		     * Sets the current value to check against when executing listeners. If a
		     * listeners return value matches the one set here then it will be removed
		     * after execution. This value defaults to true.
		     *
		     * @param {*} value The new value to check for when executing listeners.
		     * @return {Object} Current instance of EventEmitter for chaining.
		     */
		    proto.setOnceReturnValue = function setOnceReturnValue(value) {
		        this._onceReturnValue = value;
		        return this;
		    };
		
		    /**
		     * Fetches the current value to check against when executing listeners. If
		     * the listeners return value matches this one then it should be removed
		     * automatically. It will return true by default.
		     *
		     * @return {*|Boolean} The current value to check for or the default, true.
		     * @api private
		     */
		    proto._getOnceReturnValue = function _getOnceReturnValue() {
		        if (this.hasOwnProperty('_onceReturnValue')) {
		            return this._onceReturnValue;
		        }
		        else {
		            return true;
		        }
		    };
		
		    /**
		     * Fetches the events object and creates one if required.
		     *
		     * @return {Object} The events storage object.
		     * @api private
		     */
		    proto._getEvents = function _getEvents() {
		        return this._events || (this._events = {});
		    };
		
		    /**
		     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
		     *
		     * @return {Function} Non conflicting EventEmitter class.
		     */
		    EventEmitter.noConflict = function noConflict() {
		        exports.EventEmitter = originalGlobalValue;
		        return EventEmitter;
		    };
		
		    // Expose the class either via AMD, CommonJS or the global object
		    if (typeof define === 'function' && define.amd) {
		        define(function () {
		            return EventEmitter;
		        });
		    }
		    else if (typeof module === 'object' && module.exports){
		        module.exports = EventEmitter;
		    }
		    else {
		        exports.EventEmitter = EventEmitter;
		    }
		}.call(this));
		
		}.call(window));
	
	/***/ },
	/* 183 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-slider\" :id=\"id\"\n    :class=\"{\n        min: value === 0, max: value === 100, dragging: dragging, disabled: disabled,\n        active: active, 'has-label': hasLabel\n    }\"\n\n    :tabindex=\"disabled ? null : 0\" role=\"slider\" :aria-valuemin=\"0\" :aria-valuemax=\"100\"\n    :aria-valuenow=\"value\"\n\n    @keydown.left.prevent=\"decrement\" @keydown.right.prevent=\"increment\"\n    @keydown.down.prevent=\"decrement\" @keydown.up.prevent=\"increment\"\n    @focus=\"focus\" @blur=\"blur\"\n>\n    <input type=\"hidden\" :value=\"value\" :name=\"name\">\n\n    <div class=\"ui-slider-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-slider-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-slider-content\">\n        <div class=\"ui-slider-label\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n        <div class=\"ui-slider-wrapper\" v-el:slider @mousedown=\"sliderClick\">\n            <div class=\"ui-slider-containment\" v-el:containment></div>\n\n            <div class=\"ui-slider-track\">\n                <div class=\"ui-slider-track-fill\" :style=\"{ width: value + '%'}\"></div>\n            </div>\n\n            <div class=\"ui-slider-thumb-container\" v-el:thumb>\n                <div class=\"ui-slider-focus-ring\"></div>\n                <div class=\"ui-slider-thumb\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 184 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(185)
		__vue_script__ = __webpack_require__(186)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSnackbar.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(187)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSnackbar.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 185 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 186 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiButton = __webpack_require__(109);
		
		var _UiButton2 = _interopRequireDefault(_UiButton);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-snackbar',
		
		    props: {
		        id: String,
		        show: {
		            type: Boolean,
		            default: false,
		            twoWay: true
		        },
		        message: String,
		        action: String,
		        actionColor: {
		            type: String,
		            default: 'accent' },
		        persistent: {
		            type: Boolean,
		            default: false
		        },
		        duration: {
		            type: Number,
		            default: 5000
		        },
		        autoHide: {
		            type: Boolean,
		            default: true
		        }
		    },
		
		    data: function data() {
		        return {
		            height: 0,
		            timeout: null
		        };
		    },
		    beforeDestroy: function beforeDestroy() {
		        if (this.timeout) {
		            clearTimeout(this.timeout);
		        }
		    },
		
		
		    methods: {
		        click: function click() {
		            this.$dispatch('clicked');
		            this.hide();
		        },
		        actionClick: function actionClick() {
		            this.$dispatch('action-clicked');
		            this.hide();
		        },
		        hide: function hide() {
		            if (!this.persistent) {
		                this.show = false;
		            }
		        }
		    },
		
		    components: {
		        UiButton: _UiButton2.default
		    },
		
		    transitions: {
		        'ui-snackbar-toggle': {
		            afterEnter: function afterEnter() {
		                this.$dispatch('shown');
		
		                if (this.autoHide) {
		                    this.timeout = setTimeout(this.hide, this.duration);
		                }
		            },
		            afterLeave: function afterLeave() {
		                this.$dispatch('hidden');
		
		                if (this.timeout) {
		                    clearTimeout(this.timeout);
		                    this.timeout = null;
		                }
		            }
		        }
		    }
		};
	
	/***/ },
	/* 187 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-snackbar\" :id=\"id\" transition=\"ui-snackbar-toggle\" @click=\"click\" v-show=\"show\"\n>\n    <div class=\"ui-snackbar-text\">\n        <slot>\n            <span v-text=\"message\"></span>\n        </slot>\n    </div>\n\n    <div class=\"ui-snackbar-action\">\n        <ui-button\n            class=\"ui-snackbar-action-button\" type=\"flat\" :color=\"actionColor\"\n            :text=\"action\" @click.stop=\"actionClick\" v-if=\"action\"\n        ></ui-button>\n    </div>\n</div>\n";
	
	/***/ },
	/* 188 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(189)
		__vue_script__ = __webpack_require__(190)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSnackbarContainer.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(191)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSnackbarContainer.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 189 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 190 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _uuid = __webpack_require__(88);
		
		var _uuid2 = _interopRequireDefault(_uuid);
		
		var _UiSnackbar = __webpack_require__(184);
		
		var _UiSnackbar2 = _interopRequireDefault(_UiSnackbar);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-snackbar-container',
		
		    props: {
		        queueSnackbars: {
		            type: Boolean,
		            default: false
		        },
		        defaultDuration: {
		            type: Number,
		            default: 5000
		        },
		        position: {
		            type: String,
		            default: 'left', coerce: function coerce(position) {
		                return 'position-' + position;
		            }
		        }
		    },
		
		    events: {
		        'ui-snackbar::create': function uiSnackbarCreate(snackbar) {
		            snackbar.show = false;
		            snackbar.id = snackbar.id || _uuid2.default.short('ui-snackbar-');
		            snackbar.duration = snackbar.duration || this.defaultDuration;
		
		            this.queue.push(snackbar);
		
		            if (this.queue.length === 1) {
		                this.showNext();
		            } else {
		                if (!this.queueSnackbars) {
		                    this.queue[0].show = false;
		                }
		            }
		        }
		    },
		
		    data: function data() {
		        return {
		            queue: [] };
		    },
		
		
		    methods: {
		        showNext: function showNext() {
		            if (!this.queue.length) {
		                return;
		            }
		
		            this.queue[0].show = true;
		        },
		        shown: function shown(snackbar) {
		            this.$dispatch('snackbar-shown', snackbar);
		            this.callHook('onShow', snackbar);
		        },
		        hidden: function hidden(snackbar) {
		            this.$dispatch('snackbar-hidden', snackbar);
		            this.callHook('onHide', snackbar);
		
		            this.queue.$remove(snackbar);
		            this.showNext();
		        },
		        clicked: function clicked(snackbar) {
		            this.callHook('onClick', snackbar);
		        },
		        actionClicked: function actionClicked(snackbar) {
		            this.callHook('onActionClick', snackbar);
		        },
		        callHook: function callHook(hook, snackbar) {
		            if (typeof snackbar[hook] === 'function') {
		                snackbar[hook].call(undefined, snackbar);
		            }
		        }
		    },
		
		    components: {
		        UiSnackbar: _UiSnackbar2.default
		    }
		};
	
	/***/ },
	/* 191 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-snackbar-container\" :class=\"[position]\">\n    <ui-snackbar\n        :duration=\"s.duration\" :show.sync=\"s.show\" :action=\"s.action\"\n        :action-color=\"s.actionColor\" :persistent=\"s.persistent\" :id=\"s.id\" auto-hide\n\n        @shown=\"shown(s)\" @hidden=\"hidden(s)\" @clicked=\"clicked(s)\"\n        @action-clicked=\"actionClicked(s)\"\n\n        v-for=\"s in queue\"\n    >\n        <div v-html=\"s.message\" v-if=\"s.allowHtml\"></div>\n        <span v-text=\"s.message\" v-else></span>\n    </ui-snackbar>\n</div>\n";
	
	/***/ },
	/* 192 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(193)
		__vue_script__ = __webpack_require__(194)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiSwitch.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(195)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiSwitch.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 193 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 194 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-switch',
		
		    props: {
		        name: String,
		        value: {
		            type: Boolean,
		            required: true,
		            twoWay: true
		        },
		        label: String,
		        hideLabel: {
		            type: Boolean,
		            default: false
		        },
		        labelLeft: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            initialValue: false
		        };
		    },
		    created: function created() {
		        this.initialValue = this.value;
		    },
		
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.value = this.initialValue;
		        }
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 195 */
	/***/ function(module, exports) {
	
		module.exports = "\n<label\n    class=\"ui-switch\"\n    :class=\"{ 'checked': value, 'disabled': disabled, 'label-left': labelLeft }\"\n>\n    <div class=\"ui-switch-container\">\n        <input\n            class=\"ui-switch-input\" type=\"checkbox\" :name=\"name\" :id=\"id\" v-model=\"value\"\n            v-disabled=\"disabled\"\n        >\n\n        <div class=\"ui-switch-track\"></div>\n        <div class=\"ui-switch-thumb\"></div>\n\n        <div class=\"ui-switch-focus-ring\"></div>\n    </div>\n\n    <div class=\"ui-switch-label-text\" v-if=\"!hideLabel\">\n        <slot>\n            <span v-text=\"label\"></span>\n        </slot>\n    </div>\n</label>\n";
	
	/***/ },
	/* 196 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(197)
		__vue_script__ = __webpack_require__(198)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiTab.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(199)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiTab.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 197 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 198 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.default = {
		    name: 'ui-tab',
		
		    props: {
		        id: String,
		        header: String,
		        icon: String,
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        active: function active() {
		            return this.$parent.activeTab === this.id;
		        }
		    },
		
		    watch: {
		        active: function active() {
		            if (this.active) {
		                this.$dispatch('selected', this.id);
		            } else {
		                this.$dispatch('deselected', this.id);
		            }
		        }
		    }
		};
	
	/***/ },
	/* 199 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-tab\" :id=\"id\" role=\"tabpanel\" :tabindex=\"active ? '0' : null\"\n    :aria-hidden=\"!active ? 'true' : null\" v-show=\"active\"\n>\n    <slot></slot>\n</div>\n";
	
	/***/ },
	/* 200 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(201)
		__vue_script__ = __webpack_require__(202)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiTabs.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(207)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiTabs.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 201 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 202 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _uuid = __webpack_require__(88);
		
		var _uuid2 = _interopRequireDefault(_uuid);
		
		var _UiTabHeaderItem = __webpack_require__(203);
		
		var _UiTabHeaderItem2 = _interopRequireDefault(_UiTabHeaderItem);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ReceivesTargetedEvent = __webpack_require__(61);
		
		var _ReceivesTargetedEvent2 = _interopRequireDefault(_ReceivesTargetedEvent);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-tabs',
		
		    props: {
		        type: {
		            type: String,
		            default: 'text' },
		        activeTab: String,
		        backgroundColor: {
		            type: String,
		            default: 'default', coerce: function coerce(color) {
		                return 'background-color-' + color;
		            }
		        },
		        textColor: {
		            type: String,
		            default: 'black', coerce: function coerce(color) {
		                return 'text-color-' + color;
		            }
		        },
		        textColorActive: {
		            type: String,
		            default: 'primary', coerce: function coerce(color) {
		                return 'text-color-active-' + color;
		            }
		        },
		        indicatorColor: {
		            type: String,
		            default: 'primary', coerce: function coerce(color) {
		                return 'color-' + color;
		            }
		        },
		        fullwidth: {
		            type: Boolean,
		            default: false
		        },
		        raised: {
		            type: Boolean,
		            default: false
		        },
		        hideRippleInk: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    data: function data() {
		        return {
		            activeTabElement: null
		        };
		    },
		
		
		    computed: {
		        styleClasses: function styleClasses() {
		            var classes = ['ui-tabs-type-' + this.type];
		
		            if (this.raised) {
		                classes.push('raised');
		            }
		
		            if (this.fullwidth) {
		                classes.push('fullwidth');
		            }
		
		            return classes;
		        },
		        indicatorLeft: function indicatorLeft() {
		            if (this.activeTabElement) {
		                return this.activeTabElement.offsetLeft + 'px';
		            }
		
		            return 0;
		        },
		        indicatorRight: function indicatorRight() {
		            if (this.activeTabElement) {
		                var left = this.activeTabElement.offsetLeft;
		                var width = this.activeTabElement.offsetWidth;
		                var tabContainerWidth = this.$els.tabsContainer.offsetWidth;
		
		                return tabContainerWidth - (left + width) + 'px';
		            }
		        }
		    },
		
		    ready: function ready() {
		        var _this = this;
		
		        for (var i = 0; i < this.$children.length; i++) {
		            this.$children[i].id = this.$children[i].id || _uuid2.default.short('ui-tab-');
		        }
		
		        this.activeTab = this.activeTab || this.$children[0].id;
		
		        this.$nextTick(function () {
		            if (_this.$els.tabsContainer) {
		                _this.activeTabElement = _this.$els.tabsContainer.querySelector('.active');
		            }
		        });
		    },
		
		
		    events: {
		        'ui-tabs::select': function uiTabsSelect(tabId, id) {
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            var tab = this.findTabById(tabId);
		
		            if (tab) {
		                this.select(tab.$el, tab);
		            }
		        }
		    },
		
		    methods: {
		        select: function select(e, tab) {
		            var newTabElement = e.currentTarget ? e.currentTarget : e;
		
		            if (tab.disabled || this.activeTabElement === newTabElement) {
		                return;
		            }
		
		            this.activeTabElement = newTabElement;
		            this.activeTab = tab.id;
		
		            this.$dispatch('active-tab-changed', tab.id);
		        },
		        selectPrev: function selectPrev(currentTabIndex) {
		            if (currentTabIndex === 0) {
		                return;
		            }
		
		            var prevTab = this.findTab(currentTabIndex);
		            this.select(prevTab.$el, prevTab);
		
		            this.activeTabElement.focus();
		        },
		        selectNext: function selectNext(currentTabIndex) {
		            if (currentTabIndex === this.$refs.tabElements.length - 1) {
		                return;
		            }
		
		            var nextTab = this.findTab(currentTabIndex, true);
		            this.select(nextTab.$el, nextTab);
		
		            this.activeTabElement.focus();
		        },
		        findTab: function findTab(currentTabIndex, next) {
		            var tab = void 0;
		
		            if (next) {
		                for (var i = currentTabIndex + 1; i < this.$refs.tabElements.length; i++) {
		                    if (!this.$refs.tabElements[i].disabled) {
		                        tab = this.$refs.tabElements[i];
		                        break;
		                    }
		                }
		            } else {
		                for (var _i = currentTabIndex - 1; _i >= 0; _i--) {
		                    if (!this.$refs.tabElements[_i].disabled) {
		                        tab = this.$refs.tabElements[_i];
		                        break;
		                    }
		                }
		            }
		
		            tab = tab || this.$refs.tabElements[currentTabIndex];
		
		            return tab;
		        },
		        findTabById: function findTabById(id) {
		            var tab = null;
		
		            var numOfTabs = this.$refs.tabElements.length;
		
		            for (var i = 0; i <= numOfTabs; i++) {
		                if (id === this.$refs.tabElements[i].id) {
		                    tab = this.$refs.tabElements[i];
		                    break;
		                }
		            }
		
		            return tab;
		        }
		    },
		
		    components: {
		        UiTabHeaderItem: _UiTabHeaderItem2.default
		    },
		
		    directives: {
		        disabled: _disabled2.default
		    },
		
		    mixins: [_ReceivesTargetedEvent2.default]
		};
	
	/***/ },
	/* 203 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(204)
		__vue_script__ = __webpack_require__(205)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiTabHeaderItem.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(206)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiTabHeaderItem.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 204 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 205 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _disabled = __webpack_require__(71);
		
		var _disabled2 = _interopRequireDefault(_disabled);
		
		var _ShowsRippleInk = __webpack_require__(19);
		
		var _ShowsRippleInk2 = _interopRequireDefault(_ShowsRippleInk);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-tab-header-item',
		
		    props: {
		        id: String,
		        type: {
		            type: String,
		            default: 'text' },
		        text: String,
		        icon: String,
		        active: {
		            type: Boolean,
		            default: false
		        },
		        disabled: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    mixins: [_ShowsRippleInk2.default],
		
		    directives: {
		        disabled: _disabled2.default
		    }
		};
	
	/***/ },
	/* 206 */
	/***/ function(module, exports) {
	
		module.exports = "\n<li\n    class=\"ui-tab-header-item\" role=\"tab\"\n    :class=\"['type-' + type, { 'active': active, 'disabled': disabled }]\"\n\n    :tabindex=\"active ? 0 : -1\" :aria-controls=\"id\" :aria-selected=\"active ? 'true' : null\"\n    v-disabled=\"disabled\" v-el:item\n>\n    <div\n        class=\"ui-tab-header-item-icon\" v-if=\"type === 'icon' || type === 'icon-and-text'\"\n    >\n        <ui-icon :icon=\"icon\"></ui-icon>\n    </div>\n\n    <div\n        class=\"ui-tab-header-item-text\" v-text=\"text\"\n        v-if=\"type === 'text' || type === 'icon-and-text'\"\n    ></div>\n\n    <ui-ripple-ink :trigger=\"$els.item\" v-if=\"!hideRippleInk && !disabled\"></ui-ripple-ink>\n</li>\n";
	
	/***/ },
	/* 207 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-tabs\" :class=\"styleClasses\">\n    <div class=\"ui-tabs-header\" :class=\"[backgroundColor]\">\n        <ul\n            class=\"ui-tabs-header-items\" :class=\"[textColor, textColorActive]\" role=\"tablist\"\n            v-el:tabs-container\n        >\n            <ui-tab-header-item\n                :type=\"type\" :id=\"tab.id\" :icon=\"tab.icon\" :text=\"tab.header\"\n                :active=\"activeTab === tab.id\" :disabled=\"tab.disabled\"\n                :hide-ripple-ink=\"hideRippleInk\"\n\n                @click=\"select($event, tab)\" @keydown.left=\"selectPrev(index)\"\n                @keydown.right=\"selectNext($index)\"\n\n                v-for=\"(index, tab) in $children\" v-ref:tab-elements\n            ></ui-tab-header-item>\n        </ul>\n\n        <div\n            class=\"ui-tabs-active-tab-indicator\" :class=\"[indicatorColor]\"\n            :style=\"{ 'left': indicatorLeft, 'right': indicatorRight }\"\n        ></div>\n    </div>\n\n    <div class=\"ui-tabs-body\">\n        <slot></slot>\n    </div>\n</div>\n";
	
	/***/ },
	/* 208 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(209)
		__vue_script__ = __webpack_require__(210)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiTextbox.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(211)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiTextbox.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 209 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 210 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiIcon = __webpack_require__(6);
		
		var _UiIcon2 = _interopRequireDefault(_UiIcon);
		
		var _autofocus = __webpack_require__(90);
		
		var _autofocus2 = _interopRequireDefault(_autofocus);
		
		var _HasTextInput = __webpack_require__(91);
		
		var _HasTextInput2 = _interopRequireDefault(_HasTextInput);
		
		var _ValidatesInput = __webpack_require__(92);
		
		var _ValidatesInput2 = _interopRequireDefault(_ValidatesInput);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-textbox',
		
		    props: {
		        type: {
		            type: String,
		            default: 'text'
		        },
		        multiLine: {
		            type: Boolean,
		            default: false
		        },
		        rows: {
		            type: Number,
		            default: 2
		        },
		        maxLength: Number,
		        trimValue: {
		            type: Boolean,
		            default: true
		        },
		        validateOnBlur: {
		            type: Boolean,
		            default: false
		        },
		        autocomplete: String,
		        autofocus: {
		            type: Boolean,
		            default: false
		        },
		        min: Number,
		        max: Number,
		        step: {
		            type: String,
		            default: 'any',
		            coerce: String
		        }
		    },
		
		    watch: {
		        value: function value() {
		            if (this.ignoreValueChange) {
		                return;
		            }
		
		            if (!this.dirty) {
		                this.dirty = true;
		            }
		
		            if (!this.validateOnBlur) {
		                this.validate();
		            }
		        }
		    },
		
		    data: function data() {
		        return {
		            ignoreValueChange: false
		        };
		    },
		
		
		    computed: {
		        showIcon: function showIcon() {
		            return Boolean(this.icon);
		        },
		        minValue: function minValue() {
		            if (this.type !== 'number') {
		                return null;
		            }
		
		            if (this.min || this.min === 0) {
		                return this.min;
		            }
		
		            return null;
		        },
		        maxValue: function maxValue() {
		            if (this.type !== 'number') {
		                return null;
		            }
		
		            if (this.max || this.max === 0) {
		                return this.max;
		            }
		
		            return null;
		        },
		        stepValue: function stepValue() {
		            if (this.type === 'number') {
		                return this.step;
		            }
		
		            return null;
		        }
		    },
		
		    events: {
		        'ui-input::reset': function uiInputReset(id) {
		            var _this = this;
		
		            if (!this.eventTargetsComponent(id)) {
		                return;
		            }
		
		            this.ignoreValueChange = true;
		
		            if (document.activeElement === this.$el.querySelector('input') || document.activeElement === this.$el.querySelector('textarea')) {
		                document.activeElement.blur();
		            }
		
		            this.validationError = '';
		            this.value = this.initialValue;
		            this.valid = true;
		            this.dirty = false;
		
		            this.$nextTick(function () {
		                _this.ignoreValueChange = false;
		            });
		        }
		    },
		
		    methods: {
		        focussed: function focussed() {
		            this.active = true;
		            this.$dispatch('focussed');
		        },
		        blurred: function blurred() {
		            this.active = false;
		
		            if (!this.dirty) {
		                this.dirty = true;
		            }
		
		            this.$dispatch('blurred');
		            this.validate();
		        },
		        changed: function changed() {
		            this.$dispatch('changed');
		        },
		        keydown: function keydown(e) {
		            this.$dispatch('keydown', e);
		        },
		        keydownEnter: function keydownEnter(e) {
		            this.$dispatch('keydown-enter', e);
		        }
		    },
		
		    filters: {
		        trim: {
		            write: function write(value) {
		                if (this.type !== 'number' && this.trimValue) {
		                    return value.trim();
		                }
		
		                return value;
		            }
		        }
		    },
		
		    components: {
		        UiIcon: _UiIcon2.default
		    },
		
		    directives: {
		        autofocus: _autofocus2.default
		    },
		
		    mixins: [_HasTextInput2.default, _ValidatesInput2.default]
		};
	
	/***/ },
	/* 211 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div\n    class=\"ui-textbox\"\n    :class=\"{\n        'disabled': disabled, 'invalid': !valid, 'dirty': dirty, 'active': active,\n        'has-label': !hideLabel, 'is-multi-line': multiLine, 'icon-right': iconRight,\n        'has-counter': maxLength\n    }\"\n>\n    <div class=\"ui-textbox-icon-wrapper\" v-if=\"showIcon\">\n        <ui-icon :icon=\"icon\" class=\"ui-textbox-icon\"></ui-icon>\n    </div>\n\n    <div class=\"ui-textbox-content\">\n        <label class=\"ui-textbox-label\">\n            <div class=\"ui-textbox-label-text\" v-text=\"label\" v-if=\"!hideLabel\"></div>\n\n            <input\n                class=\"ui-textbox-input\" :type=\"type\" :placeholder=\"placeholder\" :name=\"name\"\n                :id=\"id\" :number=\"type === 'number' ? true : null\" :min=\"minValue\"\n                :max=\"maxValue\" :step=\"stepValue\"\n                :autocomplete=\"autocomplete ? autocomplete : null\"\n\n                @focus=\"focussed\" @blur=\"blurred\" @change=\"changed\" @keydown=\"keydown\"\n                @keydown.enter=\"keydownEnter\" :debounce=\"debounce\"\n\n                v-model=\"value | trim\" v-disabled=\"disabled\" v-if=\"!multiLine\"\n                v-autofocus=\"autofocus\"\n            >\n\n            <textarea\n                class=\"ui-textbox-textarea\" :placeholder=\"placeholder\" :name=\"name\" :id=\"id\"\n                :rows=\"rows\"\n\n                @focus=\"focussed\" @blur=\"blurred\" @change=\"changed\" @keydown=\"keydown\"\n                @keydown.enter=\"keydownEnter\" :debounce=\"debounce\"\n\n                v-model=\"value | trim\" v-disabled=\"disabled\" v-else\n            ></textarea>\n        </label>\n\n        <div class=\"ui-textbox-feedback\" v-if=\"showFeedback || maxLength\">\n            <div\n                class=\"ui-textbox-error-text\" transition=\"ui-textbox-feedback-toggle\"\n                v-text=\"validationError\" v-show=\"!hideValidationErrors && !valid\"\n            ></div>\n\n            <div\n                class=\"ui-textbox-help-text\" transition=\"ui-textbox-feedback-toggle\"\n                v-text=\"helpText\" v-else\n            ></div>\n\n            <div\n                class=\"ui-textbox-counter\" v-text=\"value.length + '/' + maxLength\"\n                v-if=\"maxLength\"\n            ></div>\n        </div>\n    </div>\n</div>\n";
	
	/***/ },
	/* 212 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __vue_script__, __vue_template__
		__webpack_require__(213)
		__vue_script__ = __webpack_require__(214)
		if (__vue_script__ &&
		    __vue_script__.__esModule &&
		    Object.keys(__vue_script__).length > 1) {
		  console.warn("[vue-loader] src\\UiToolbar.vue: named exports in *.vue files are ignored.")}
		__vue_template__ = __webpack_require__(215)
		module.exports = __vue_script__ || {}
		if (module.exports.__esModule) module.exports = module.exports.default
		if (__vue_template__) {
		(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
		}
		if (false) {(function () {  module.hot.accept()
		  var hotAPI = require("vue-hot-reload-api")
		  hotAPI.install(require("vue"), true)
		  if (!hotAPI.compatible) return
		  var id = "C:\\code\\packages\\keen-ui\\src\\UiToolbar.vue"
		  if (!module.hot.data) {
		    hotAPI.createRecord(id, module.exports)
		  } else {
		    hotAPI.update(id, module.exports, __vue_template__)
		  }
		})()}
	
	/***/ },
	/* 213 */
	/***/ function(module, exports) {
	
		// removed by extract-text-webpack-plugin
	
	/***/ },
	/* 214 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		
		var _UiProgressLinear = __webpack_require__(137);
		
		var _UiProgressLinear2 = _interopRequireDefault(_UiProgressLinear);
		
		var _UiIconButton = __webpack_require__(10);
		
		var _UiIconButton2 = _interopRequireDefault(_UiIconButton);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		exports.default = {
		    name: 'ui-toolbar',
		
		    props: {
		        type: {
		            type: String,
		            default: 'default', coerce: function coerce(type) {
		                return 'ui-toolbar-' + type;
		            }
		        },
		        textColor: {
		            type: String,
		            default: 'black', coerce: function coerce(color) {
		                return 'text-color-' + color;
		            }
		        },
		        title: String,
		        brand: String,
		        showBrand: {
		            type: Boolean,
		            default: false
		        },
		        showBrandDivider: {
		            type: Boolean,
		            default: null
		        },
		        navIcon: {
		            type: String,
		            default: 'menu'
		        },
		        hideNavIcon: {
		            type: Boolean,
		            default: false
		        },
		        flat: {
		            type: Boolean,
		            default: false
		        },
		        preloaderTop: {
		            type: Boolean,
		            default: false
		        },
		        loading: {
		            type: Boolean,
		            default: false
		        }
		    },
		
		    computed: {
		        styleClasses: function styleClasses() {
		            var classes = [this.type, this.textColor];
		
		            if (!this.flat) {
		                classes.push('ui-toolbar-raised');
		            }
		
		            return classes;
		        },
		        iconColor: function iconColor() {
		            if (this.textColor === 'text-color-black') {
		                return 'black';
		            }
		
		            return 'white';
		        },
		        preloaderColor: function preloaderColor() {
		            if (this.textColor === 'text-color-black') {
		                return 'primary';
		            }
		
		            return 'white';
		        },
		        brandDividerVisible: function brandDividerVisible() {
		            if (this.showBrandDivider !== null) {
		                return this.showBrandDivider;
		            }
		
		            if (!this.showBrand) {
		                return false;
		            }
		
		            return true;
		        }
		    },
		
		    methods: {
		        navIconClick: function navIconClick() {
		            this.$dispatch('nav-icon-clicked');
		        }
		    },
		
		    components: {
		        UiProgressLinear: _UiProgressLinear2.default,
		        UiIconButton: _UiIconButton2.default
		    }
		};
	
	/***/ },
	/* 215 */
	/***/ function(module, exports) {
	
		module.exports = "\n<div class=\"ui-toolbar\" :class=\"styleClasses\">\n    <div class=\"ui-toolbar-left\">\n        <ui-icon-button\n            class=\"ui-toolbar-nav-icon\" type=\"clear\" :color=\"iconColor\" :icon=\"navIcon\"\n            @click=\"navIconClick\" v-if=\"!hideNavIcon\"\n        ></ui-icon-button>\n\n        <div class=\"ui-toolbar-brand\" v-if=\"showBrand\">\n            <slot name=\"brand\">\n                <div class=\"ui-toolbar-brand-text\" v-text=\"brand\"></div>\n            </slot>\n        </div>\n    </div>\n\n    <div class=\"ui-toolbar-center\">\n        <div class=\"ui-toolbar-divider\" v-if=\"brandDividerVisible\"></div>\n\n        <slot>\n            <div class=\"ui-toolbar-title\" v-text=\"title\"></div>\n        </slot>\n    </div>\n\n    <div class=\"ui-toolbar-right\">\n        <slot name=\"actions\"></slot>\n    </div>\n\n    <ui-progress-linear\n        :show=\"loading\" class=\"ui-toolbar-preloader\" :class=\"{ 'position-top' : preloaderTop }\"\n        :color=\"preloaderColor\"\n    ></ui-progress-linear>\n</div>\n";
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=keen-ui.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(5)
	__vue_script__ = __webpack_require__(8)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\App.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(135)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-7ca1b1bb/App.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 5 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 6 */,
/* 7 */,
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _uuid = __webpack_require__(139);
	
	var _uuid2 = _interopRequireDefault(_uuid);
	
	var _socket = __webpack_require__(84);
	
	var _socket2 = _interopRequireDefault(_socket);
	
	var _MapView = __webpack_require__(9);
	
	var _MapView2 = _interopRequireDefault(_MapView);
	
	var _ParamsView = __webpack_require__(69);
	
	var _ParamsView2 = _interopRequireDefault(_ParamsView);
	
	var _SettingsView = __webpack_require__(73);
	
	var _SettingsView2 = _interopRequireDefault(_SettingsView);
	
	var _GcsIndicators = __webpack_require__(77);
	
	var _GcsIndicators2 = _interopRequireDefault(_GcsIndicators);
	
	var _actions = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        actions: {
	            setWamv: _actions.setWamv,
	            setParameters: _actions.setParameters,
	            setMissions: _actions.setMissions,
	            setCurrentMission: _actions.setCurrentMission
	        }
	    },
	
	    data: function data() {
	        return {
	            socket: null,
	            sentMessageIds: [],
	            timedoutMessageIds: [],
	            timeouts: {}
	        };
	    },
	    ready: function ready() {
	        this.setupSocket();
	    },
	
	
	    events: {
	        'send-to-server': function sendToServer(messageType, data) {
	            var _this = this;
	
	            var messageId = _uuid2.default.generate();
	
	            this.socket.emit(messageType, data, messageId);
	            this.sentMessageIds.push(messageId);
	
	            this.timeouts[messageId] = window.setTimeout(function () {
	                _this.timedoutMessageIds.push(messageId);
	                _this.$broadcast('server-message-timeout', messageType);
	
	                console.log('Timeout reached for message', messageType);
	                window.clearTimeout(_this.timeouts[messageId]);
	            }, 1000);
	        },
	        'app::create-snackbar': function appCreateSnackbar(message, snackbar) {
	            this.createSnackbar(message, snackbar);
	        },
	        'map::pan-up': function mapPanUp() {
	            this.$broadcast('map::pan-up');
	        },
	        'map::pan-down': function mapPanDown() {
	            this.$broadcast('map::pan-down');
	        },
	        'map::pan-left': function mapPanLeft() {
	            this.$broadcast('map::pan-left');
	        },
	        'map::pan-right': function mapPanRight() {
	            this.$broadcast('map::pan-right');
	        },
	        'map::pan-center': function mapPanCenter() {
	            this.$broadcast('map::pan-center');
	        },
	        'map::zoom-in': function mapZoomIn() {
	            this.$broadcast('map::zoom-in');
	        },
	        'map::zoom-out': function mapZoomOut() {
	            this.$broadcast('map::zoom-out');
	        },
	        'map::change-type': function mapChangeType(newType) {
	            this.$broadcast('map::change-type', newType);
	        },
	        'map:click': function mapClick(e) {
	            this.$broadcast('map:click', e);
	        },
	        'map:dblclick': function mapDblclick(e) {
	            this.$broadcast('map:dblclick', e);
	        },
	        'map:rightclick': function mapRightclick(e) {
	            this.$broadcast('map:rightclick', e);
	        }
	    },
	
	    methods: {
	        createSnackbar: function createSnackbar(message, snackbar) {
	            snackbar = snackbar || {
	                message: message
	            };
	
	            this.$broadcast('ui-snackbar::create', snackbar);
	        },
	        setupSocket: function setupSocket() {
	            this.socket = (0, _socket2.default)('localhost:3000');
	
	            this.socket.on('connect', this.onConnect);
	            this.socket.on('disconnect', this.onDisconnect);
	            this.socket.on('status', this.onStatus);
	            this.socket.on('get_parameters', this.onParameterReceived);
	            this.socket.on('load_missions', this.onMissionsReceived);
	            this.socket.on('download_mission', this.onCurrentMissionReceived);
	            this.socket.on('success', this.onSuccess);
	            this.socket.on('failure', this.onFailure);
	            this.socket.on('attention', this.onAttention);
	        },
	        onConnect: function onConnect() {
	            console.log('connected to server');
	
	            this.$emit('send-to-server', 'get_parameters');
	
	            this.$emit('send-to-server', 'load_missions');
	        },
	        onDisconnect: function onDisconnect() {
	            console.log('disconnected from server');
	        },
	        onSuccess: function onSuccess(messageType, messageId) {
	            if (this.timedoutMessageIds.indexOf(messageId) !== -1) {
	                this.$broadcast('server-message-success', messageType);
	
	                this.cleanUp(messageId);
	            }
	
	            console.log('received "success" message');
	        },
	        onFailure: function onFailure(messageType, messageId) {
	            if (this.timedoutMessageIds.indexOf(messageId) !== -1) {
	                this.$broadcast('server-message-failure', messageType);
	
	                this.cleanUp(messageId);
	            }
	
	            console.log('received "failure" message');
	        },
	        onStatus: function onStatus(data) {
	            data.loaded = true;
	            this.setWamv(data);
	        },
	        onParameterReceived: function onParameterReceived(data, messageId) {
	            console.log('received "get_parameters" message', messageId);
	            this.setParameters(data);
	
	            this.cleanUp(messageId);
	        },
	        onMissionsReceived: function onMissionsReceived(data, messageId) {
	            console.log('received "load_missions" message');
	            this.setMissions(data);
	
	            this.cleanUp(messageId);
	        },
	        onCurrentMissionReceived: function onCurrentMissionReceived(data, messageId) {
	            console.log('received "download_mission" message:');
	            this.setCurrentMission(data);
	
	            this.cleanUp(messageId);
	        },
	        onAttention: function onAttention(data, messageId) {
	            console.log('Attention: ' + data);
	            this.cleanUp(messageId);
	        },
	        cleanUp: function cleanUp(messageId) {
	            console.log('Timeouts', this.timeouts);
	            console.log('Clearing timeout', this.timeouts[messageId]);
	
	            window.clearTimeout(this.timeouts[messageId]);
	            this.sentMessageIds.$remove(messageId);
	        }
	    },
	
	    components: {
	        MapView: _MapView2.default,
	        ParamsView: _ParamsView2.default,
	        SettingsView: _SettingsView2.default,
	        GcsIndicators: _GcsIndicators2.default
	    }
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(10)
	__vue_script__ = __webpack_require__(11)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\views\\MapView.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(68)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-106887fa/MapView.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 10 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _GcsMap = __webpack_require__(12);
	
	var _GcsMap2 = _interopRequireDefault(_GcsMap);
	
	var _GcsMapControls = __webpack_require__(25);
	
	var _GcsMapControls2 = _interopRequireDefault(_GcsMapControls);
	
	var _GcsMapSidebar = __webpack_require__(29);
	
	var _GcsMapSidebar2 = _interopRequireDefault(_GcsMapSidebar);
	
	var _GcsSidebarControls = __webpack_require__(56);
	
	var _GcsSidebarControls2 = _interopRequireDefault(_GcsSidebarControls);
	
	var _GcsWamv = __webpack_require__(64);
	
	var _GcsWamv2 = _interopRequireDefault(_GcsWamv);
	
	var _getters = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        getters: {
	            wamv: _getters.getWamv
	        }
	    },
	
	    data: function data() {
	        return {
	            showSidebar: true
	        };
	    },
	
	
	    methods: {
	        toggleSidebar: function toggleSidebar() {
	            this.showSidebar = !this.showSidebar;
	        }
	    },
	
	    components: {
	        GcsMap: _GcsMap2.default,
	        GcsWamv: _GcsWamv2.default,
	        GcsMapControls: _GcsMapControls2.default,
	        GcsMapSidebar: _GcsMapSidebar2.default,
	        GcsSidebarControls: _GcsSidebarControls2.default
	    }
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(13)
	__vue_script__ = __webpack_require__(14)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\map\\GcsMap.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(24)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-18281c25/GcsMap.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 13 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _copyObject = __webpack_require__(15);
	
	var _copyObject2 = _interopRequireDefault(_copyObject);
	
	var _loadGoogleMapsApi = __webpack_require__(19);
	
	var _loadGoogleMapsApi2 = _interopRequireDefault(_loadGoogleMapsApi);
	
	var _actions = __webpack_require__(20);
	
	var _getters = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        getters: {
	            map: _getters.getMap,
	            mapEl: _getters.getMapEl,
	            mapLoaded: _getters.getMapLoaded,
	            mapEditing: _getters.getMapEditing,
	            wamv: _getters.getWamv,
	            config: _getters.getConfig,
	            settings: _getters.getSettings
	        },
	
	        actions: {
	            setMap: _actions.setMap,
	            setMapEl: _actions.setMapEl,
	            setMapLoaded: _actions.setMapLoaded
	        }
	    },
	
	    watch: {
	        mapEditing: function mapEditing() {
	            if (this.mapEditing) {
	                this.map.setOptions({ draggableCursor: 'crosshair' });
	            } else {
	                this.map.setOptions({ draggableCursor: 'move' });
	            }
	        }
	    },
	
	    ready: function ready() {
	        this.setMapEl(document.getElementById('map'));
	
	        (0, _loadGoogleMapsApi2.default)(this.config.googleMaps).then(this.initializeMap).catch(function (error) {
	            console.log('Unable to load Google Maps API', error);
	        });
	    },
	
	
	    events: {
	        'map::pan-up': function mapPanUp() {
	            this.map.panBy(0, -1 * (this.mapEl.clientHeight / 4));
	        },
	        'map::pan-down': function mapPanDown() {
	            this.map.panBy(0, this.mapEl.clientHeight / 4);
	        },
	        'map::pan-left': function mapPanLeft() {
	            this.map.panBy(-1 * (this.mapEl.clientWidth / 4), 0);
	        },
	        'map::pan-right': function mapPanRight() {
	            this.map.panBy(this.mapEl.clientWidth / 4, 0);
	        },
	        'map::pan-center': function mapPanCenter() {
	            if (this.wamv.loaded) {
	                this.map.panTo(this.wamv.position);
	            }
	        },
	        'map::zoom-in': function mapZoomIn() {
	            this.map.setZoom(this.map.getZoom() + 1);
	        },
	        'map::zoom-out': function mapZoomOut() {
	            this.map.setZoom(this.map.getZoom() - 1);
	        },
	        'map::change-type': function mapChangeType(newType) {
	            this.map.setMapTypeId(google.maps.MapTypeId[newType]);
	        }
	    },
	
	    methods: {
	        initializeMap: function initializeMap() {
	            var mapConfig = (0, _copyObject2.default)(this.config.map);
	
	            mapConfig.mapTypeId = google.maps.MapTypeId[this.settings.defaultMapType];
	
	            var map = new google.maps.Map(this.mapEl, mapConfig);
	
	            this.setupEvents(map);
	
	            this.setMap(map);
	            this.setMapLoaded(true);
	        },
	        setupEvents: function setupEvents(map) {
	            var _this = this;
	
	            map.addListener('click', function (e) {
	                _this.$dispatch('map:click', e);
	            });
	
	            map.addListener('dblclick', function (e) {
	                _this.$dispatch('map:dblclick', e);
	            });
	
	            map.addListener('rightclick', function (e) {
	                _this.$dispatch('map:rightclick', e);
	            });
	        }
	    }
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _stringify = __webpack_require__(16);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	exports.default = function (object) {
	    return JSON.parse((0, _stringify2.default)(object));
	};
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(17), __esModule: true };

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(18)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function () {
	  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  var client = _ref.client;
	  var key = _ref.key;
	  var language = _ref.language;
	  var _ref$libraries = _ref.libraries;
	  var libraries = _ref$libraries === undefined ? [] : _ref$libraries;
	  var _ref$timeout = _ref.timeout;
	  var timeout = _ref$timeout === undefined ? 10000 : _ref$timeout;
	  var v = _ref.v;
	
	  var callbackName = '__googleMapsApiOnLoadCallback';
	
	  return new Promise(function (resolve, reject) {
	
	    // Exit if not running inside a browser.
	    if (typeof window === 'undefined') {
	      return reject(new Error('Can only load the Google Maps API in the browser'));
	    }
	
	    // Prepare the `script` tag to be inserted into the page.
	    var scriptElement = document.createElement('script');
	    var params = ['callback=' + callbackName];
	    if (client) params.push('client=' + client);
	    if (key) params.push('key=' + key);
	    if (language) params.push('language=' + language);
	    libraries = [].concat(libraries); // Ensure that `libraries` is an array
	    if (libraries.length) params.push('libraries=' + libraries.join(','));
	    if (v) params.push('v=' + v);
	    scriptElement.src = 'https://maps.googleapis.com/maps/api/js?' + params.join('&');
	
	    // Timeout if necessary.
	    var timeoutId = null;
	    if (timeout) {
	      timeoutId = setTimeout(function () {
	        window[callbackName] = function () {}; // Set the on load callback to a no-op.
	        reject(new Error('Could not load the Google Maps API'));
	      }, timeout);
	    }
	
	    // Hook up the on load callback.
	    window[callbackName] = function () {
	      if (timeoutId !== null) {
	        clearTimeout(timeoutId);
	      }
	      resolve(window.google.maps);
	      delete window[callbackName];
	    };
	
	    // Insert the `script` tag.
	    document.body.appendChild(scriptElement);
	  });
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.setMap = setMap;
	exports.setMapEl = setMapEl;
	exports.setMapLoaded = setMapLoaded;
	exports.setMapEditing = setMapEditing;
	exports.setWamv = setWamv;
	exports.setWamvArmed = setWamvArmed;
	exports.setWamvMode = setWamvMode;
	exports.initSettings = initSettings;
	exports.updateSetting = updateSetting;
	exports.setMissions = setMissions;
	exports.setCurrentMissionIndex = setCurrentMissionIndex;
	exports.setCurrentMission = setCurrentMission;
	exports.setParameters = setParameters;
	exports.sendGetParameters = sendGetParameters;
	exports.succeedGetParameters = succeedGetParameters;
	exports.failGetParameters = failGetParameters;
	exports.sendSaveMissions = sendSaveMissions;
	exports.succeedSaveMissions = succeedSaveMissions;
	exports.failSaveMissions = failSaveMissions;
	exports.sendLoadMissions = sendLoadMissions;
	exports.succeedLoadMissions = succeedLoadMissions;
	exports.failLoadMissions = failLoadMissions;
	exports.sendUploadMission = sendUploadMission;
	exports.succeedUploadMission = succeedUploadMission;
	exports.failUploadMission = failUploadMission;
	exports.sendDownloadMission = sendDownloadMission;
	exports.succeedDownloadMission = succeedDownloadMission;
	exports.failDownloadMission = failDownloadMission;
	exports.sendStartMission = sendStartMission;
	exports.succeedStartMission = succeedStartMission;
	exports.failStartMission = failStartMission;
	exports.sendStopMission = sendStopMission;
	exports.succeedStopMission = succeedStopMission;
	exports.failStopMission = failStopMission;
	exports.sendResumeMission = sendResumeMission;
	exports.succeedResumeMission = succeedResumeMission;
	exports.failResumeMission = failResumeMission;
	exports.sendArm = sendArm;
	exports.succeedArm = succeedArm;
	exports.failArm = failArm;
	exports.sendDisarm = sendDisarm;
	exports.succeedDisarm = succeedDisarm;
	exports.failDisarm = failDisarm;
	exports.sendKill = sendKill;
	exports.succeedKill = succeedKill;
	exports.failKill = failKill;
	exports.sendUnkill = sendUnkill;
	exports.succeedUnkill = succeedUnkill;
	exports.failUnkill = failUnkill;
	
	var _deepAssign = __webpack_require__(21);
	
	var _deepAssign2 = _interopRequireDefault(_deepAssign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function setMap(_ref, map) {
	    var dispatch = _ref.dispatch;
	    var state = _ref.state;
	
	    dispatch('SET_MAP', map);
	}
	
	function setMapEl(_ref2, mapEl) {
	    var dispatch = _ref2.dispatch;
	    var state = _ref2.state;
	
	    dispatch('SET_MAP_EL', mapEl);
	}
	
	function setMapLoaded(_ref3, loaded) {
	    var dispatch = _ref3.dispatch;
	    var state = _ref3.state;
	
	    dispatch('SET_MAP_LOADED', loaded);
	}
	
	function setMapEditing(_ref4, editing) {
	    var dispatch = _ref4.dispatch;
	    var state = _ref4.state;
	
	    dispatch('SET_MAP_EDITING', editing);
	}
	
	function setWamv(_ref5, wamv) {
	    var dispatch = _ref5.dispatch;
	    var state = _ref5.state;
	
	    dispatch('SET_WAMV', wamv);
	}
	
	function setWamvArmed(_ref6, armed) {
	    var dispatch = _ref6.dispatch;
	    var state = _ref6.state;
	
	    dispatch('SET_WAMV_ARMED', armed);
	}
	
	function setWamvMode(_ref7, mode) {
	    var dispatch = _ref7.dispatch;
	    var state = _ref7.state;
	
	    dispatch('SET_WAMV_MODE', mode);
	}
	
	function initSettings(_ref8) {
	    var dispatch = _ref8.dispatch;
	}
	
	function updateSetting(_ref9, key, value) {
	    var dispatch = _ref9.dispatch;
	    var state = _ref9.state;
	
	    var settings = (0, _deepAssign2.default)({}, state.settings);
	    settings[key] = value;
	
	    dispatch('UPDATE_SETTINGS', settings);
	}
	
	function setMissions(_ref10, missions) {
	    var dispatch = _ref10.dispatch;
	    var state = _ref10.state;
	
	    dispatch('SET_MISSIONS', missions);
	}
	
	function setCurrentMissionIndex(_ref11, index) {
	    var dispatch = _ref11.dispatch;
	    var state = _ref11.state;
	
	    dispatch('SET_CURRENT_MISSION_INDEX', index);
	}
	
	function setCurrentMission(_ref12, mission) {
	    var dispatch = _ref12.dispatch;
	    var state = _ref12.state;
	
	    dispatch('SET_CURRENT_MISSION', mission);
	}
	
	function setParameters(_ref13, parameters) {
	    var dispatch = _ref13.dispatch;
	    var state = _ref13.state;
	
	    dispatch('SET_PARAMETERS', parameters);
	}
	
	function sendGetParameters(_ref14) {
	    var dispatch = _ref14.dispatch;
	    var state = _ref14.state;
	
	    dispatch('SEND_GET_PARAMETERS');
	}
	
	function succeedGetParameters(_ref15, parameters) {
	    var dispatch = _ref15.dispatch;
	    var state = _ref15.state;
	
	    dispatch('SUCCEED_GET_PARAMETERS', parameters);
	}
	
	function failGetParameters(_ref16, msg) {
	    var dispatch = _ref16.dispatch;
	    var state = _ref16.state;
	
	    dispatch('FAIL_GET_PARAMETERS', msg);
	}
	
	function sendSaveMissions(_ref17, missions) {
	    var dispatch = _ref17.dispatch;
	    var state = _ref17.state;
	
	    dispatch('SEND_SAVE_MISSIONS', missions);
	}
	
	function succeedSaveMissions(_ref18) {
	    var dispatch = _ref18.dispatch;
	    var state = _ref18.state;
	
	    dispatch('SUCCEED_SAVE_MISSIONS');
	}
	
	function failSaveMissions(_ref19, msg) {
	    var dispatch = _ref19.dispatch;
	    var state = _ref19.state;
	
	    dispatch('FAIL_SAVE_MISSIONS', msg);
	}
	
	function sendLoadMissions(_ref20) {
	    var dispatch = _ref20.dispatch;
	    var state = _ref20.state;
	
	    dispatch('SEND_LOAD_MISSIONS');
	}
	
	function succeedLoadMissions(_ref21, missions) {
	    var dispatch = _ref21.dispatch;
	    var state = _ref21.state;
	
	    dispatch('SUCCEED_LOAD_MISSIONS', missions);
	}
	
	function failLoadMissions(_ref22, msg) {
	    var dispatch = _ref22.dispatch;
	    var state = _ref22.state;
	
	    dispatch('FAIL_LOAD_MISSIONS', msg);
	}
	
	function sendUploadMission(_ref23, mission) {
	    var dispatch = _ref23.dispatch;
	    var state = _ref23.state;
	
	    dispatch('SEND_UPLOAD_MISSION', mission);
	}
	
	function succeedUploadMission(_ref24) {
	    var dispatch = _ref24.dispatch;
	    var state = _ref24.state;
	
	    dispatch('SUCCEED_UPLOAD_MISSION');
	}
	
	function failUploadMission(_ref25, msg) {
	    var dispatch = _ref25.dispatch;
	    var state = _ref25.state;
	
	    dispatch('FAIL_UPLOAD_MISSION', msg);
	}
	
	function sendDownloadMission(_ref26) {
	    var dispatch = _ref26.dispatch;
	    var state = _ref26.state;
	
	    dispatch('SEND_DOWNLOAD_MISSION');
	}
	
	function succeedDownloadMission(_ref27, mission) {
	    var dispatch = _ref27.dispatch;
	    var state = _ref27.state;
	
	    dispatch('SUCCEED_DOWNLOAD_MISSION', mission);
	}
	
	function failDownloadMission(_ref28, msg) {
	    var dispatch = _ref28.dispatch;
	    var state = _ref28.state;
	
	    dispatch('FAIL_DOWNLOAD_MISSION', msg);
	}
	
	function sendStartMission(_ref29) {
	    var dispatch = _ref29.dispatch;
	    var state = _ref29.state;
	
	    dispatch('SEND_START_MISSION');
	}
	
	function succeedStartMission(_ref30) {
	    var dispatch = _ref30.dispatch;
	    var state = _ref30.state;
	
	    dispatch('SUCCEED_START_MISSION');
	}
	
	function failStartMission(_ref31, msg) {
	    var dispatch = _ref31.dispatch;
	    var state = _ref31.state;
	
	    dispatch('FAIL_START_MISSION', msg);
	}
	
	function sendStopMission(_ref32) {
	    var dispatch = _ref32.dispatch;
	    var state = _ref32.state;
	
	    dispatch('SEND_STOP_MISSION');
	}
	
	function succeedStopMission(_ref33) {
	    var dispatch = _ref33.dispatch;
	    var state = _ref33.state;
	
	    dispatch('SUCCEED_STOP_MISSION');
	}
	
	function failStopMission(_ref34, msg) {
	    var dispatch = _ref34.dispatch;
	    var state = _ref34.state;
	
	    dispatch('FAIL_STOP_MISSION', msg);
	}
	
	function sendResumeMission(_ref35) {
	    var dispatch = _ref35.dispatch;
	    var state = _ref35.state;
	
	    dispatch('SEND_RESUME_MISSION');
	}
	
	function succeedResumeMission(_ref36) {
	    var dispatch = _ref36.dispatch;
	    var state = _ref36.state;
	
	    dispatch('SUCCEED_RESUME_MISSION');
	}
	
	function failResumeMission(_ref37, msg) {
	    var dispatch = _ref37.dispatch;
	    var state = _ref37.state;
	
	    dispatch('FAIL_RESUME_MISSION', msg);
	}
	
	function sendArm(_ref38) {
	    var dispatch = _ref38.dispatch;
	    var state = _ref38.state;
	
	    dispatch('SEND_ARM');
	}
	
	function succeedArm(_ref39) {
	    var dispatch = _ref39.dispatch;
	    var state = _ref39.state;
	
	    dispatch('SUCCEED_ARM');
	}
	
	function failArm(_ref40, msg) {
	    var dispatch = _ref40.dispatch;
	    var state = _ref40.state;
	
	    dispatch('FAIL_ARM', msg);
	}
	
	function sendDisarm(_ref41) {
	    var dispatch = _ref41.dispatch;
	    var state = _ref41.state;
	
	    dispatch('SEND_DISARM');
	}
	
	function succeedDisarm(_ref42) {
	    var dispatch = _ref42.dispatch;
	    var state = _ref42.state;
	
	    dispatch('SUCCEED_DISARM');
	}
	
	function failDisarm(_ref43, msg) {
	    var dispatch = _ref43.dispatch;
	    var state = _ref43.state;
	
	    dispatch('FAIL_DISARM', msg);
	}
	
	function sendKill(_ref44) {
	    var dispatch = _ref44.dispatch;
	    var state = _ref44.state;
	
	    dispatch('SEND_KILL');
	}
	
	function succeedKill(_ref45) {
	    var dispatch = _ref45.dispatch;
	    var state = _ref45.state;
	
	    dispatch('SUCCEED_KILL');
	}
	
	function failKill(_ref46, msg) {
	    var dispatch = _ref46.dispatch;
	    var state = _ref46.state;
	
	    dispatch('FAIL_KILL', msg);
	}
	
	function sendUnkill(_ref47) {
	    var dispatch = _ref47.dispatch;
	    var state = _ref47.state;
	
	    dispatch('SEND_UNKILL');
	}
	
	function succeedUnkill(_ref48) {
	    var dispatch = _ref48.dispatch;
	    var state = _ref48.state;
	
	    dispatch('SUCCEED_UNKILL');
	}
	
	function failUnkill(_ref49, msg) {
	    var dispatch = _ref49.dispatch;
	    var state = _ref49.state;
	
	    dispatch('FAIL_UNKILL', msg);
	}

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObj = __webpack_require__(22);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Sources cannot be null or undefined');
		}
	
		return Object(val);
	}
	
	function assignKey(to, from, key) {
		var val = from[key];
	
		if (val === undefined || val === null) {
			return;
		}
	
		if (hasOwnProperty.call(to, key)) {
			if (to[key] === undefined || to[key] === null) {
				throw new TypeError('Cannot convert undefined or null to object (' + key + ')');
			}
		}
	
		if (!hasOwnProperty.call(to, key) || !isObj(val)) {
			to[key] = val;
		} else {
			to[key] = assign(Object(to[key]), from[key]);
		}
	}
	
	function assign(to, from) {
		if (to === from) {
			return to;
		}
	
		from = Object(from);
	
		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				assignKey(to, from, key);
			}
		}
	
		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(from);
	
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					assignKey(to, from, symbols[i]);
				}
			}
		}
	
		return to;
	}
	
	module.exports = function deepAssign(target) {
		target = toObject(target);
	
		for (var s = 1; s < arguments.length; s++) {
			assign(target, arguments[s]);
		}
	
		return target;
	};


/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (x) {
		var type = typeof x;
		return x !== null && (type === 'object' || type === 'function');
	};


/***/ },
/* 23 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getMap = getMap;
	exports.getMapEl = getMapEl;
	exports.getMapLoaded = getMapLoaded;
	exports.getMapEditing = getMapEditing;
	exports.getWamv = getWamv;
	exports.getConfig = getConfig;
	exports.getSettings = getSettings;
	exports.getMissions = getMissions;
	exports.getCurrentMissionIndex = getCurrentMissionIndex;
	exports.getCurrentMission = getCurrentMission;
	exports.getParameters = getParameters;
	exports.getMessageStateWaiting = getMessageStateWaiting;
	exports.getMessageStateSuccess = getMessageStateSuccess;
	exports.getMessageStateFailure = getMessageStateFailure;
	exports.getGetParameterState = getGetParameterState;
	exports.getGetParameterData = getGetParameterData;
	exports.getSaveMissionsState = getSaveMissionsState;
	exports.getSaveMissionsData = getSaveMissionsData;
	exports.getLoadMissionsState = getLoadMissionsState;
	exports.getLoadMissionsData = getLoadMissionsData;
	exports.getUploadMissionState = getUploadMissionState;
	exports.getUploadMissionData = getUploadMissionData;
	exports.getDownloadMissionState = getDownloadMissionState;
	exports.getDownloadMissionData = getDownloadMissionData;
	exports.getStartMissionState = getStartMissionState;
	exports.getStartMissionData = getStartMissionData;
	exports.getStopMissionState = getStopMissionState;
	exports.getStopMissionData = getStopMissionData;
	exports.getResumeMissionState = getResumeMissionState;
	exports.getResumeMissionData = getResumeMissionData;
	exports.getArmState = getArmState;
	exports.getArmData = getArmData;
	exports.getDisarmState = getDisarmState;
	exports.getDisarmData = getDisarmData;
	exports.getKillState = getKillState;
	exports.getKillData = getKillData;
	exports.getUnkillState = getUnkillState;
	exports.getUnkillData = getUnkillData;
	function getMap(state) {
	    return state.map;
	}
	
	function getMapEl(state) {
	    return state.mapEl;
	}
	
	function getMapLoaded(state) {
	    return state.mapLoaded;
	}
	
	function getMapEditing(state) {
	    return state.mapEditing;
	}
	
	function getWamv(state) {
	    return state.wamv;
	}
	
	function getConfig(state) {
	    return state.config;
	}
	
	function getSettings(state) {
	    return state.settings;
	}
	
	function getMissions(state) {
	    return state.missions;
	}
	
	function getCurrentMissionIndex(state) {
	    return state.currentMissionIndex;
	}
	
	function getCurrentMission(state) {
	    return state.missions[state.currentMissionIndex];
	}
	
	function getParameters(state) {
	    return state.parameters;
	}
	
	function getMessageStateWaiting(state) {
	    return state.messageState.WAITING;
	}
	
	function getMessageStateSuccess(state) {
	    return state.messageState.SUCCESS;
	}
	
	function getMessageStateFailure(state) {
	    return state.messageState.FAILURE;
	}
	
	function getGetParameterState(state) {
	    return state.messageState.get_parameters[0];
	}
	
	function getGetParameterData(state) {
	    return state.messageState.get_parameters[1];
	}
	
	function getSaveMissionsState(state) {
	    return state.messageState.save_missions[0];
	}
	
	function getSaveMissionsData(state) {
	    return state.messageState.save_missions[1];
	}
	
	function getLoadMissionsState(state) {
	    return state.messageState.load_missions[0];
	}
	
	function getLoadMissionsData(state) {
	    return state.messageState.load_missions[1];
	}
	
	function getUploadMissionState(state) {
	    return state.messageState.upload_mission[0];
	}
	
	function getUploadMissionData(state) {
	    return state.messageState.upload_mission[1];
	}
	
	function getDownloadMissionState(state) {
	    return state.messageState.download_mission[0];
	}
	
	function getDownloadMissionData(state) {
	    return state.messageState.download_mission[1];
	}
	
	function getStartMissionState(state) {
	    return state.messageState.start_mission[0];
	}
	
	function getStartMissionData(state) {
	    return state.messageState.start_mission[1];
	}
	
	function getStopMissionState(state) {
	    return state.messageState.stop_mission[0];
	}
	
	function getStopMissionData(state) {
	    return state.messageState.stop_mission[1];
	}
	
	function getResumeMissionState(state) {
	    return state.messageState.resume_mission[0];
	}
	
	function getResumeMissionData(state) {
	    return state.messageState.resume_mission[1];
	}
	
	function getArmState(state) {
	    return state.messageState.arm[0];
	}
	
	function getArmData(state) {
	    return state.messageState.arm[1];
	}
	
	function getDisarmState(state) {
	    return state.messageState.disarm[0];
	}
	
	function getDisarmData(state) {
	    return state.messageState.disarm[1];
	}
	
	function getKillState(state) {
	    return state.messageState.kill[0];
	}
	
	function getKillData(state) {
	    return state.messageState.kill[1];
	}
	
	function getUnkillState(state) {
	    return state.messageState.unkill[0];
	}
	
	function getUnkillData(state) {
	    return state.messageState.unkill[1];
	}

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-map\" id=\"map\" :class=\"{ 'gcs-map-edit-mode': mapEditing }\"></div>\n";

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(26)
	__vue_script__ = __webpack_require__(27)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\map\\GcsMapControls.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(28)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-475ae20a/GcsMapControls.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 26 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    data: function data() {
	        return {
	            mapType: 'Satellite',
	            mapTypesMenu: [{ 'value': 'ROADMAP', text: 'Road' }, { 'value': 'TERRAIN', text: 'Terrain' }, { 'value': 'SATELLITE', text: 'Satellite' }, { 'value': 'HYBRID', text: 'Hybrid' }]
	        };
	    },
	
	
	    methods: {
	        pan: function pan(direction) {
	            this.$dispatch('map::pan-' + direction);
	        },
	        zoom: function zoom(type) {
	            this.$dispatch('map::zoom-' + type);
	        },
	        changeMapType: function changeMapType(selected) {
	            this.mapType = selected.text;
	            this.$dispatch('map::change-type', selected.value);
	        }
	    }
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-map-controls\">\n    <div class=\"pan-controls\">\n        <ui-icon-button\n            class=\"pan-control up\" icon=\"keyboard_arrow_up\" @click=\"pan('up')\"\n        ></ui-icon-button>\n\n        <ui-icon-button\n            class=\"pan-control right\" icon=\"keyboard_arrow_right\" @click=\"pan('right')\"\n        ></ui-icon-button>\n\n        <ui-icon-button\n            class=\"pan-control down\" icon=\"keyboard_arrow_down\" @click=\"pan('down')\"\n        ></ui-icon-button>\n\n        <ui-icon-button\n            class=\"pan-control left\" icon=\"keyboard_arrow_left\" @click=\"pan('left')\"\n        ></ui-icon-button>\n\n        <ui-icon-button\n            class=\"pan-control center\" icon=\"my_location\" @click=\"pan('center')\"\n        ></ui-icon-button>\n    </div>\n\n    <div class=\"zoom-controls\">\n        <ui-icon-button\n            class=\"zoom-control in\" icon=\"add\" @click=\"zoom('in')\"\n        ></ui-icon-button>\n\n        <ui-icon-button\n            class=\"zoom-control out\" icon=\"remove\" @click=\"zoom('out')\"\n        ></ui-icon-button>\n    </div>\n\n    <div class=\"type-control\">\n        <ui-button\n            :menu-options=\"mapTypesMenu\" name=\"map_types\" :text=\"mapType\"\n            @menu-option-selected=\"changeMapType\" has-dropdown-menu raised\n            dropdown-position=\"top right\" :show-dropdown-icon=\"false\"\n        ></ui-button>\n    </div>\n</div>\n";

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(30)
	__vue_script__ = __webpack_require__(31)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\map\\GcsMapSidebar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(55)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-7fccf4b2/GcsMapSidebar.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 30 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _GcsMissions = __webpack_require__(32);
	
	var _GcsMissions2 = _interopRequireDefault(_GcsMissions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        showSidebar: {
	            type: Boolean,
	            required: true
	        }
	    },
	
	    components: {
	        GcsMissions: _GcsMissions2.default
	    }
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(33)
	__vue_script__ = __webpack_require__(34)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\mission\\GcsMissions.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(54)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-009767c4/GcsMissions.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 33 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _stringify = __webpack_require__(16);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _GcsMission = __webpack_require__(35);
	
	var _GcsMission2 = _interopRequireDefault(_GcsMission);
	
	var _GcsMissionRow = __webpack_require__(50);
	
	var _GcsMissionRow2 = _interopRequireDefault(_GcsMissionRow);
	
	var _actions = __webpack_require__(20);
	
	var _getters = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        getters: {
	            missions: _getters.getMissions,
	            currentMissionIndex: _getters.getCurrentMissionIndex,
	            currentMission: _getters.getCurrentMission,
	            WAITING: _getters.getMessageStateWaiting,
	            SUCCESS: _getters.getMessageStateSuccess,
	            FAILURE: _getters.getMessageStateFailure,
	            saveMissionsState: _getters.getSaveMissionsState,
	            saveMissionsData: _getters.getSaveMissionsData,
	            loadMissionsState: _getters.getLoadMissionsState,
	            loadMissionsData: _getters.getLoadMissionsData
	        },
	
	        actions: {
	            setMissions: _actions.setMissions,
	            setCurrentMissionIndex: _actions.setCurrentMissionIndex,
	            sendSaveMissions: _actions.sendSaveMissions,
	            failSaveMissions: _actions.failSaveMissions,
	            sendLoadMissions: _actions.sendLoadMissions,
	            failLoadMissions: _actions.failLoadMissions
	        }
	    },
	
	    data: function data() {
	        return {
	            currentView: 'listing',
	            overflowMenu: [{ id: 'save', text: 'Save to server' }, { id: 'load', text: 'Load from server' }, { id: 'sep1', text: '', type: 'divider' }, { id: 'export', text: 'Export to file' }, { id: 'import', text: 'Import from file' }, { id: 'sep2', text: '', type: 'divider' }, { id: 'clear', text: 'Clear all' }]
	        };
	    },
	
	
	    methods: {
	        selectMission: function selectMission(index) {
	            this.setCurrentMissionIndex(index);
	            this.currentView = 'gcs-mission';
	        },
	        showListingView: function showListingView() {
	            this.currentView = 'listing';
	            this.setCurrentMissionIndex(-1);
	        },
	        addMission: function addMission() {
	            this.missions.push({
	                title: 'Mission ' + (this.missions.length + 1),
	                description: null,
	                waypoints: []
	            });
	        },
	        menuOptionSelected: function menuOptionSelected(option) {
	            var _this = this;
	
	            switch (option.id) {
	                case 'save':
	                    {
	                        this.sendSaveMissions(this.missions);
	                        setTimeout(function () {
	                            if (_this.saveMissionsState == _this.WAITING) {
	                                _this.failSaveMissions('Timeout reached.');
	                            }
	                        }, 1000);
	                        break;
	                    }
	                case 'load':
	                    {
	                        this.sendLoadMissions(this.missions);
	                        setTimeout(function () {
	                            if (_this.loadMissionsState == _this.WAITING) {
	                                _this.failLoadMissions('Timeout reached.');
	                            }
	                        }, 1000);
	                        break;
	                    }
	                case 'import':
	                    {
	                        document.getElementById('import_missions_input').click();
	                        break;
	                    }
	                case 'export':
	                    {
	                        var uri = 'data:application/json,';
	                        uri += (0, _stringify2.default)(this.missions);
	                        uri = encodeURI(uri);
	
	                        var link = document.getElementById('export_missions_link');
	                        link.href = uri;
	                        link.download = 'missions.json';
	
	                        link.click();
	                        break;
	                    }
	                case 'clear':
	                    {
	                        this.setMissions([]);
	                    }
	            }
	        },
	        importMission: function importMission() {
	            var _this2 = this;
	
	            var files = document.getElementById('import_missions_input').files;
	
	            if (files.length > 0) {
	                var file = files[0];
	                var reader = new FileReader();
	
	                reader.onload = function (e) {
	                    var contents = e.target.result;
	                    try {
	                        var newMissions = JSON.parse(contents);
	
	                        _this2.setMissions(newMissions);
	                    } catch (e) {
	                        console.log('file contents are invalid: ' + e.message);
	                    }
	                };
	
	                reader.readAsText(file);
	            }
	        }
	    },
	
	    watch: {
	        saveMissionsState: function saveMissionsState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Missions saved.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to save missions: ' + this.saveMissionsData);
	                }
	            }
	        },
	        loadMissionsState: function loadMissionsState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    this.setMissions(this.loadMissionsData);
	                    console.log('Missions loaded.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to load missions: ' + this.loadMissionsData);
	                }
	            }
	        }
	    },
	
	    events: {
	        'delete-mission': function deleteMission(index) {
	            this.missions.splice(index, 1);
	        }
	    },
	
	    components: {
	        GcsMission: _GcsMission2.default,
	        GcsMissionRow: _GcsMissionRow2.default
	    }
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(36)
	__vue_script__ = __webpack_require__(37)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\mission\\GcsMission.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(49)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-b5eeecb6/GcsMission.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 36 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _GcsWaypoint = __webpack_require__(38);
	
	var _GcsWaypoint2 = _interopRequireDefault(_GcsWaypoint);
	
	var _GcsWaypointLink = __webpack_require__(44);
	
	var _GcsWaypointLink2 = _interopRequireDefault(_GcsWaypointLink);
	
	var _elementScroll = __webpack_require__(42);
	
	var _elementScroll2 = _interopRequireDefault(_elementScroll);
	
	var _numberToLetter = __webpack_require__(48);
	
	var _numberToLetter2 = _interopRequireDefault(_numberToLetter);
	
	var _actions = __webpack_require__(20);
	
	var _getters = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        getters: {
	            mapEditing: _getters.getMapEditing
	        },
	
	        actions: {
	            setMapEditing: _actions.setMapEditing
	        }
	    },
	
	    props: {
	        mission: {
	            type: Object,
	            required: true
	        }
	    },
	
	    data: function data() {
	        return {
	            waypointsVisible: true,
	            overflowMenu: [{ id: 'edit', text: 'Edit mission' }, { id: 'delete', text: 'Delete mission' }]
	        };
	    },
	    ready: function ready() {
	        this.setMapEditing(true);
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.setMapEditing(false);
	    },
	
	
	    events: {
	        'map:click': function mapClick(e) {
	            var _this = this;
	
	            if (!this.mapEditing) {
	                return;
	            }
	
	            var lat = Number(parseFloat(e.latLng.lat()).toFixed(7));
	            var lng = Number(parseFloat(e.latLng.lng()).toFixed(7));
	
	            var newWaypoint = {
	                title: null,
	                type: 'normal',
	                visible: true,
	                position: {
	                    lat: lat,
	                    lng: lng
	                }
	            };
	
	            this.mission.waypoints.push(newWaypoint);
	
	            this.$nextTick(function () {
	                _elementScroll2.default.scrollToEnd(_this.$els.pageContent);
	            });
	        },
	        'map:dblclick': function mapDblclick(e) {
	            console.log('Map double clicked', e);
	        },
	        'map:rightclick': function mapRightclick(e) {
	            console.log('Map right-clicked', e);
	        },
	        'waypoint:drag': function waypointDrag(index, lat, lng) {
	            this.mission.waypoints[index].position.lat = lat;
	            this.mission.waypoints[index].position.lng = lng;
	
	            this.$broadcast('waypointLink:drag_start', index, lat, lng);
	            var nextIndex = index > 0 ? index - 1 : this.mission.waypoints.length - 1;
	            this.$broadcast('waypointLink:drag_end', nextIndex, lat, lng);
	        },
	        'waypointLink:click': function waypointLinkClick(index, lat, lng) {
	            if (!this.mapEditing) {
	                return;
	            }
	
	            var newWaypoint = {
	                title: null,
	                type: 'normal',
	                visible: true,
	                position: {
	                    lat: lat,
	                    lng: lng
	                }
	            };
	            this.mission.waypoints.splice(index + 1, 0, newWaypoint);
	        }
	    },
	
	    methods: {
	        goBack: function goBack() {
	            this.$dispatch('go-back');
	        },
	        toLetter: function toLetter(number) {
	            return (0, _numberToLetter2.default)(number);
	        },
	        toggleWaypointVisibility: function toggleWaypointVisibility() {
	            var _this2 = this;
	
	            this.waypointsVisible = !this.waypointsVisible;
	
	            this.mission.waypoints = this.mission.waypoints.map(function (waypoint) {
	                waypoint.visible = _this2.waypointsVisible;
	
	                return waypoint;
	            });
	
	            this.setMapEditing(this.waypointsVisible);
	        },
	        deleteWaypoint: function deleteWaypoint(index) {
	            this.mission.waypoints.splice(index, 1);
	        },
	        clearWaypoints: function clearWaypoints() {
	            this.mission.waypoints = [];
	
	            this.waypointsVisible = true;
	            this.setMapEditing(true);
	        }
	    },
	
	    components: {
	        GcsWaypoint: _GcsWaypoint2.default,
	        GcsWaypointLink: _GcsWaypointLink2.default
	    }
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(39)
	__vue_script__ = __webpack_require__(40)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\markers\\GcsWaypoint.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(43)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-00e23ea5/GcsWaypoint.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 39 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _isMarker = __webpack_require__(41);
	
	var _isMarker2 = _interopRequireDefault(_isMarker);
	
	var _elementScroll = __webpack_require__(42);
	
	var _elementScroll2 = _interopRequireDefault(_elementScroll);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    props: {
	        index: Number,
	        label: {
	            type: String,
	            coerce: String
	        },
	        title: {
	            type: String,
	            coerce: function coerce(value) {
	                return value ? String(value) : '';
	            }
	        },
	        type: {
	            type: String,
	            default: 'normal'
	        }
	    },
	
	    data: function data() {
	        return {
	            dragging: false,
	            highlighted: false,
	            fillColor: { normal: 'yellow', hover: 'lime' }
	        };
	    },
	
	
	    events: {
	        click: function click() {
	            _elementScroll2.default.scrollIntoView(this.$el, null, 56);
	        },
	        rightclick: function rightclick() {
	            this.$dispatch('delete');
	        },
	        drag: function drag(e) {
	            this.lat = Number(parseFloat(e.latLng.lat()).toFixed(7));
	            this.lng = Number(parseFloat(e.latLng.lng()).toFixed(7));
	            this.$dispatch('waypoint:drag', this.index, this.lat, this.lng);
	        },
	        mouseover: function mouseover() {
	            this.highlighted = true;
	            if (this.marker) {
	                this.marker.setIcon(this.getIcon(this.fillColor.hover));
	            }
	        },
	        mouseout: function mouseout() {
	            this.highlighted = false;
	            if (this.marker && !this.dragging) {
	                this.marker.setIcon(this.getIcon(this.fillColor.normal));
	            }
	        },
	        dragstart: function dragstart() {
	            this.dragging = true;
	        },
	        dragend: function dragend() {
	            this.dragging = false;
	        }
	    },
	
	    methods: {
	        getIcon: function getIcon() {
	            var fillColor = arguments.length <= 0 || arguments[0] === undefined ? this.fillColor.normal : arguments[0];
	            var scale = arguments.length <= 1 || arguments[1] === undefined ? this.scale : arguments[1];
	            var rotation = arguments.length <= 2 || arguments[2] === undefined ? this.rotation : arguments[2];
	
	            return {
	                path: google.maps.SymbolPath.CIRCLE,
	                rotation: rotation,
	                scale: scale,
	                fillColor: fillColor,
	                fillOpacity: 1,
	                strokeColor: 'white',
	                strokeWeight: 2
	            };
	        }
	    },
	
	    mixins: [_isMarker2.default]
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getters = __webpack_require__(23);
	
	exports.default = {
	    vuex: {
	        getters: {
	            map: _getters.getMap,
	            mapEl: _getters.getMapEl,
	            mapLoaded: _getters.getMapLoaded
	        }
	    },
	
	    props: {
	        title: String,
	        lat: {
	            type: Number,
	            required: true
	        },
	        lng: {
	            type: Number,
	            required: true
	        },
	        rotation: {
	            type: Number,
	            default: 0
	        },
	        scale: {
	            type: Number,
	            default: 6
	        },
	        visible: {
	            type: Boolean,
	            default: true
	        },
	        draggable: {
	            type: Boolean,
	            default: false
	        }
	    },
	
	    data: function data() {
	        return {
	            marker: null
	        };
	    },
	
	
	    computed: {
	        position: function position() {
	            return {
	                lat: this.lat,
	                lng: this.lng
	            };
	        }
	    },
	
	    ready: function ready() {
	        if (this.mapLoaded) {
	            this.initializeMarker();
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.marker.setMap(null);
	        this.marker = null;
	    },
	
	
	    watch: {
	        mapLoaded: function mapLoaded(newVal, oldVal) {
	            if (!oldVal && newVal && !this.marker) {
	                this.initializeMarker();
	            }
	        },
	        map: function map() {
	            if (this.marker) {
	                this.marker.setMap(this.map);
	            }
	        },
	        title: function title() {
	            if (this.marker) {
	                this.marker.setTitle(this.title);
	            }
	        },
	        label: function label() {
	            if (this.marker) {
	                this.marker.setLabel(this.label);
	            }
	        },
	        position: function position() {
	            if (this.marker) {
	                this.marker.setPosition(this.position);
	            }
	        },
	        visible: function visible() {
	            if (this.marker) {
	                this.marker.setVisible(this.visible);
	            }
	        },
	        draggable: function draggable() {
	            if (this.marker) {
	                this.marker.setDraggable(this.draggable);
	            }
	        },
	        rotation: function rotation() {
	            this.updateIcon();
	        },
	        scale: function scale() {
	            this.updateIcon();
	        }
	    },
	
	    methods: {
	        initializeMarker: function initializeMarker() {
	            this.marker = new google.maps.Marker({
	                position: this.position,
	                icon: this.getIcon(),
	                draggable: this.draggable,
	                visible: this.visible,
	                map: this.map
	            });
	
	            if (this.title) {
	                this.marker.setTitle(this.title);
	            }
	
	            if (this.label) {
	                this.marker.setLabel(this.label);
	            }
	
	            this.$dispatch('initialized', this.marker);
	
	            this.setupEvents();
	        },
	        updateIcon: function updateIcon() {
	            if (this.marker) {
	                this.marker.setIcon(this.getIcon());
	            }
	        },
	        setupEvents: function setupEvents() {
	            var _this = this;
	
	            this.marker.addListener('click', function (e) {
	                _this.$dispatch('click', e);
	            });
	
	            this.marker.addListener('dblclick', function (e) {
	                _this.$dispatch('dblclick', e);
	            });
	
	            this.marker.addListener('rightclick', function (e) {
	                _this.$dispatch('rightclick', e);
	            });
	
	            this.marker.addListener('mouseover', function (e) {
	                _this.$dispatch('mouseover', e);
	            });
	
	            this.marker.addListener('mouseout', function (e) {
	                _this.$dispatch('mouseout', e);
	            });
	
	            this.marker.addListener('dragstart', function (e) {
	                _this.$dispatch('dragstart', e);
	            });
	
	            this.marker.addListener('drag', function (e) {
	                _this.$dispatch('drag', e);
	            });
	
	            this.marker.addListener('dragend', function (e) {
	                _this.$dispatch('dragend', e);
	            });
	
	            this.marker.addListener('position_changed', function (e) {
	                _this.$dispatch('position_changed', e);
	            });
	        }
	    }
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.inView = inView;
	exports.scrollIntoView = scrollIntoView;
	exports.scrollToStart = scrollToStart;
	exports.scrollToEnd = scrollToEnd;
	function inView(element, container) {
	    if (!element) {
	        return;
	    }
	
	    container = container || element.parentElement;
	
	    var top = element.offsetTop;
	    var parentTop = container.scrollTop;
	    var bottom = top + element.offsetHeight;
	    var parentBottom = container.offsetHeight;
	
	    return top >= parentTop && bottom <= parentBottom;
	}
	
	function scrollIntoView(element, container) {
	    var marginTop = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	
	    if (!element || inView(element, container)) {
	        return;
	    }
	
	    container = container || element.parentElement;
	
	    container.scrollTop = element.offsetTop - marginTop;
	}
	
	function scrollToStart(element) {
	    if (!element) {
	        return;
	    }
	
	    element.scrollTop = 0;
	}
	
	function scrollToEnd(element) {
	    if (!element) {
	        return;
	    }
	
	    element.scrollTop = element.scrollHeight;
	}
	
	exports.default = {
	    inView: inView,
	    scrollIntoView: scrollIntoView,
	    scrollToStart: scrollToStart,
	    scrollToEnd: scrollToEnd
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-waypoint\" :class=\"{ 'highlighted': (dragging || highlighted) }\">\n    <div class=\"number\" v-text=\"index + 1\"></div>\n\n    <div class=\"content\">\n        <div class=\"row\">\n            <ui-textbox\n                class=\"column\" label=\"Title\" name=\"title\" :value.sync=\"title\"\n            ></ui-textbox>\n        </div>\n\n        <div class=\"row\">\n            <ui-textbox\n                class=\"column one-half\" label=\"Latitude\" name=\"latitude\" :value.sync=\"lat\"\n                type=\"number\" :step=\"0.00001\"\n            ></ui-textbox>\n\n            <ui-textbox\n                class=\"column one-half\" label=\"Longitude\" name=\"longitude\" :value.sync=\"lng\"\n                type=\"number\" :step=\"0.00001\"\n            ></ui-textbox>\n        </div>\n\n        <div class=\"row\">\n            <ui-select\n                class=\"column one-half\" label=\"Type\" name=\"type\" :value.sync=\"type\"\n                :options=\"[{ text: 'Normal', value: 'normal' }]\" :default=\"type\"\n            ></ui-select>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(45)
	__vue_script__ = __webpack_require__(46)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\markers\\GcsWaypointLink.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(47)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-b8581182/GcsWaypointLink.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 45 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getters = __webpack_require__(23);
	
	exports.default = {
	    vuex: {
	        getters: {
	            map: _getters.getMap,
	            mapLoaded: _getters.getMapLoaded
	        }
	    },
	
	    props: {
	        index: {
	            type: Number,
	            required: true
	        },
	        start: {
	            type: Object,
	            required: true
	        },
	        end: {
	            type: Object,
	            required: true
	        },
	        visible: {
	            type: Boolean,
	            default: true
	        }
	    },
	
	    data: function data() {
	        return {
	            link: null,
	            strokeColor: { normal: 'black', hover: 'green' }
	        };
	    },
	    ready: function ready() {
	        if (this.mapLoaded) {
	            this.initializeLink();
	        }
	    },
	    beforeDestroy: function beforeDestroy() {
	        this.link.setMap(null);
	        this.link = null;
	    },
	
	
	    watch: {
	        mapLoaded: function mapLoaded(newVal, oldVal) {
	            if (!oldVal && newVal && !this.link) {
	                this.initializeLink();
	            }
	        },
	        map: function map() {
	            if (this.link) {
	                this.link.setMap(this.map);
	            }
	        },
	        start: function start() {
	            if (this.link) {
	                this.link.getPath().setAt(0, new google.maps.LatLng(this.start.lat, this.start.lng));
	            }
	        },
	        end: function end() {
	            if (this.link) {
	                this.link.getPath().setAt(1, new google.maps.LatLng(this.end.lat, this.end.lng));
	            }
	        }
	    },
	
	    methods: {
	        initializeLink: function initializeLink() {
	            var _this = this;
	
	            this.link = new google.maps.Polyline({
	                path: [this.start, this.end],
	                strokeColor: this.strokeColor.normal,
	                strokeOpacity: 1,
	                strokeWeight: 3,
	                visible: this.visible,
	                map: this.map
	            });
	            this.link.addListener('click', function (e) {
	                var lat = Number(parseFloat(e.latLng.lat()).toFixed(7));
	                var lng = Number(parseFloat(e.latLng.lng()).toFixed(7));
	                _this.$dispatch('waypointLink:click', _this.index, lat, lng);
	            });
	            this.link.addListener('mouseover', function () {
	                if (_this.link) {
	                    _this.link.setOptions({ strokeColor: _this.strokeColor.hover });
	                }
	            });
	            this.link.addListener('mouseout', function () {
	                if (_this.link) {
	                    _this.link.setOptions({ strokeColor: _this.strokeColor.normal });
	                }
	            });
	        }
	    },
	
	    events: {
	        'waypointLink:drag_start': function waypointLinkDrag_start(index, lat, lng) {
	            if (this.index == index) {
	                this.start = { lat: lat, lng: lng };
	            } else {
	                return true;
	            }
	        },
	        'waypointLink:drag_end': function waypointLinkDrag_end(index, lat, lng) {
	            if (this.index == index) {
	                this.end = { lat: lat, lng: lng };
	            } else {
	                return true;
	            }
	        }
	    }
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-waypoint-link\"></div>\n";

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (number) {
	    if (number > 52) {
	        return '0';
	    }
	
	    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
	
	    return alphabet[number - 1];
	};

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-mission\">\n    <ui-toolbar :title=\"mission.title\" hide-nav-icon show-brand :show-brand-divider=\"false\">\n        <div slot=\"brand\">\n            <ui-icon-button\n                @click=\"goBack\" type=\"clear\" icon=\"arrow_back\" tooltip=\"Back to Missions\"\n                tooltip-position=\"bottom left\"\n            ></ui-icon-button>\n        </div>\n\n        <div slot=\"actions\">\n            <ui-icon-button\n                type=\"clear\" icon=\"file_upload\" tooltip=\"Upload Mission\" @click=\"uploadMission\"\n            ></ui-icon-button>\n\n            <ui-icon-button\n                type=\"clear\" icon=\"clear_all\" tooltip=\"Clear all\" @click=\"clearWaypoints\"\n            ></ui-icon-button>\n\n            <ui-icon-button\n                type=\"clear\" :icon=\"waypointsVisible ? 'visibility' : 'visibility_off'\"\n                @click=\"toggleWaypointVisibility\"\n                :tooltip=\"waypointsVisible ? 'Hide waypoints' : 'Show waypoints'\"\n            ></ui-icon-button>\n\n            <ui-icon-button\n                type=\"clear\" icon=\"more_vert\" has-dropdown-menu dropdown-position=\"bottom right\"\n                :menu-options=\"overflowMenu\"\n            ></ui-icon-button>\n        </div>\n    </ui-toolbar>\n\n    <div class=\"sidebar-page-content\" v-el:page-content>\n        <p\n            class=\"no-waypoints\" v-if=\"!mission.waypoints.length\"\n        >No waypoints for this mission. Click the map to add a waypoint.</p>\n\n        <component v-else>\n            <gcs-waypoint\n                v-for=\"(index, waypoint) in mission.waypoints\" :index=\"index\"\n                :label=\"toLetter(index + 1)\" :title=\"waypoint.title\" :type=\"waypoint.type\"\n                :lat=\"waypoint.position.lat\" :lng=\"waypoint.position.lng\" :visible=\"waypoint.visible\"\n                :rotation=\"waypoint.rotation\" :scale=\"10\" draggable\n                @delete=\"deleteWaypoint(index)\"\n            ></gcs-waypoint>\n            <gcs-waypoint-link\n                v-for=\"(index, waypoint) in mission.waypoints\"\n                :index=\"index\"\n                :start=\"waypoint.position\"\n                :end=\"mission.waypoints[(index+1) % mission.waypoints.length].position;\"\n            ></gcs-waypoint-link>\n        </component>\n    </div>\n</div>\n";

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(51)
	__vue_script__ = __webpack_require__(52)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\mission\\GcsMissionRow.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(53)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-fe058db6/GcsMissionRow.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 51 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    props: {
	        mission: {
	            type: Object,
	            required: true
	        },
	        index: {
	            type: Number,
	            required: true
	        }
	    },
	
	    computed: {
	        hasWaypoints: function hasWaypoints() {
	            return this.mission.waypoints && this.mission.waypoints.length;
	        },
	        firstWaypoint: function firstWaypoint() {
	            return this.mission.waypoints[0];
	        },
	        lastWaypoint: function lastWaypoint() {
	            return this.mission.waypoints[this.mission.waypoints.length - 1];
	        }
	    },
	
	    methods: {
	        deleteMission: function deleteMission() {
	            this.$dispatch('delete-mission', this.index);
	        }
	    }
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-mission-row\">\n    <ui-icon-button\n        type=\"clear\" icon=\"delete\" class=\"delete-button\" tooltip=\"Delete\" @click=\"deleteMission\"\n    ></ui-icon-button>\n\n    <h3 class=\"mission-header\" v-text=\"mission.title\"></h3>\n\n    <div class=\"mission-summary\">\n        <p class=\"description\" v-if=\"mission.description\" v-text=\"mission.description\"></p>\n\n        <p class=\"waypoints\" v-if=\"!mission.description && hasWaypoints\">\n            <span>From: ({{ firstWaypoint.position.lat }}, {{ firstWaypoint.position.lng }})</span>\n            <span>To: ({{ lastWaypoint.position.lat }}, {{ lastWaypoint.position.lng }})</span>\n        </p>\n\n        <p class=\"no-waypoints\" v-if=\"!mission.description && !hasWaypoints\">No waypoints</p>\n    </div>\n</div>\n";

/***/ },
/* 54 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-missions\">\n    <div class=\"sidebar-page\">\n        <div class=\"missions-list\" v-if=\"currentView === 'listing'\">\n            <ui-toolbar title=\"Missions\" hide-nav-icon>\n                <div slot=\"actions\">\n                    <ui-icon-button\n                        type=\"clear\" icon=\"add\" tooltip=\"Add mission\" @click=\"addMission\"\n                    ></ui-icon-button>\n\n                    <ui-icon-button\n                        type=\"clear\" icon=\"more_vert\" has-dropdown-menu\n                        dropdown-position=\"bottom right\" :menu-options=\"overflowMenu\"\n                        @menu-option-selected=\"menuOptionSelected\"\n                    ></ui-icon-button>\n                </div>\n            </ui-toolbar>\n\n            <div class=\"sidebar-page-content\">\n                <div class=\"blank-state\" v-if=\"!missions.length\">No missions</div>\n\n                <gcs-mission-row\n                    v-for=\"(index, mission) in missions\" :index=\"index\" :mission=\"mission\"\n                    @click=\"selectMission(index)\"\n                ></gcs-mission-row>\n            </div>\n        </div>\n\n        <component\n            v-else :is=\"currentView\" :mission=\"currentMission\" @go-back=\"showListingView\"\n        ></component>\n    </div>\n</div>\n<!-- hidden input element used for selecting a file to import from -->\n<input type=\"file\" id=\"import_missions_input\" @change=\"importMission\">\n<!-- hidden link used for prompting a download -->\n<a id=\"export_missions_link\"></a>\n";

/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-map-sidebar\" v-show=\"showSidebar\" transition=\"sidebar-collapse\">\n    <gcs-missions></gcs-missions>\n</div>\n";

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(57)
	__vue_script__ = __webpack_require__(58)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\map\\GcsSidebarControls.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(63)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-aa18170a/GcsSidebarControls.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 57 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _GcsCommands = __webpack_require__(59);
	
	var _GcsCommands2 = _interopRequireDefault(_GcsCommands);
	
	var _getters = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    vuex: {
	        getters: {
	            currentMissionIndex: _getters.getCurrentMissionIndex
	        }
	    },
	
	    props: {
	        showSidebar: {
	            type: Boolean,
	            required: true
	        }
	    },
	
	    methods: {
	        toggleSidebar: function toggleSidebar() {
	            this.$dispatch('toggle-sidebar');
	        }
	    },
	
	    components: {
	        GcsCommands: _GcsCommands2.default
	    }
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(60)
	__vue_script__ = __webpack_require__(61)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\map\\GcsCommands.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(62)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-4c2b1d8f/GcsCommands.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 60 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getters = __webpack_require__(23);
	
	var _actions = __webpack_require__(20);
	
	exports.default = {
	    vuex: {
	        getters: {
	            wamv: _getters.getWamv,
	            missions: _getters.getMissions,
	            WAITING: _getters.getMessageStateWaiting,
	            SUCCESS: _getters.getMessageStateSuccess,
	            FAILURE: _getters.getMessageStateFailure,
	            currentMissionIndex: _getters.getCurrentMissionIndex,
	            uploadMissionState: _getters.getUploadMissionState,
	            uploadMissionData: _getters.getUploadMissionData,
	            downloadMissionState: _getters.getDownloadMissionState,
	            downloadMissionData: _getters.getDownloadMissionData,
	            startMissionState: _getters.getStartMissionState,
	            startMissionData: _getters.getStartMissionData,
	            stopMissionState: _getters.getStopMissionState,
	            stopMissionData: _getters.getStopMissionData,
	            resumeMissionState: _getters.getResumeMissionState,
	            resumeMissionData: _getters.getResumeMissionData,
	            armState: _getters.getArmState,
	            armData: _getters.getArmData,
	            disarmState: _getters.getDisarmState,
	            disarmData: _getters.getDisarmData,
	            killState: _getters.getKillState,
	            killData: _getters.getKillData,
	            unkillState: _getters.getUnkillState,
	            unkillData: _getters.getUnkillData
	        },
	
	        actions: {
	            setArmed: _actions.setWamvArmed,
	            setCurrentMission: _actions.setCurrentMission,
	            sendUploadMission: _actions.sendUploadMission,
	            failUploadMission: _actions.failUploadMission,
	            sendDownloadMission: _actions.sendDownloadMission,
	            failDownloadMission: _actions.failDownloadMission,
	            sendStartMission: _actions.sendStartMission,
	            failStartMission: _actions.failStartMission,
	            sendStopMission: _actions.sendStopMission,
	            failStopMission: _actions.failStopMission,
	            sendResumeMission: _actions.sendResumeMission,
	            failResumeMission: _actions.failResumeMission,
	            sendArm: _actions.sendArm,
	            failArm: _actions.failArm,
	            sendDisarm: _actions.sendDisarm,
	            failDisarm: _actions.failDisarm,
	            sendKill: _actions.sendKill,
	            failKill: _actions.failKill,
	            sendUnkill: _actions.sendUnkill,
	            failUnkill: _actions.failUnkill
	        }
	    },
	
	    computed: {
	        isArmed: {
	            get: function get() {
	                return this.wamv.armed;
	            },
	            set: function set(arm) {
	                var _this = this;
	
	                if (arm) {
	                    this.sendArm();
	                    setTimeout(function () {
	                        if (_this.armState == _this.WAITING) {
	                            _this.failArm('Timeout reached.');
	                        }
	                    }, 1000);
	                } else {
	                    this.sendDisarm();
	                    setTimeout(function () {
	                        if (_this.disarmState == _this.WAITING) {
	                            _this.failDisarm('Timeout reached.');
	                        }
	                    }, 1000);
	                }
	            }
	        }
	    },
	
	    methods: {
	        uploadMission: function uploadMission() {
	            var _this2 = this;
	
	            var mission = this.missions[this.currentMissionIndex];
	            this.sendUploadMission(mission);
	            setTimeout(function () {
	                if (_this2.uploadMissionState == _this2.WAITING) {
	                    _this2.failUploadMission('Timeout reached.');
	                }
	            }, 1000);
	        },
	        downloadMission: function downloadMission() {
	            var _this3 = this;
	
	            this.sendDownloadMission();
	            setTimeout(function () {
	                if (_this3.downloadMissionState == _this3.WAITING) {
	                    _this3.failDownloadMission('Timeout reached.');
	                }
	            }, 1000);
	        },
	        startMission: function startMission() {
	            var _this4 = this;
	
	            this.sendStartMission();
	            setTimeout(function () {
	                if (_this4.startMissionState == _this4.WAITING) {
	                    _this4.failStartMission('Timeout reached.');
	                }
	            }, 1000);
	        },
	        stopMission: function stopMission() {
	            var _this5 = this;
	
	            this.sendStopMission();
	            setTimeout(function () {
	                if (_this5.stopMissionState == _this5.WAITING) {
	                    _this5.failStopMission('Timeout reached.');
	                }
	            }, 1000);
	        },
	        resumeMission: function resumeMission() {
	            var _this6 = this;
	
	            this.sendResumeMission();
	            setTimeout(function () {
	                if (_this6.resumeMissionState == _this6.WAITING) {
	                    _this6.failResumeMission('Timeout reached.');
	                }
	            }, 1000);
	        },
	        kill: function kill() {
	            var _this7 = this;
	
	            this.sendKill();
	            setTimeout(function () {
	                if (_this7.killState == _this7.WAITING) {
	                    _this7.failKill('Timeout reached.');
	                }
	            }, 1000);
	        },
	        unkill: function unkill() {
	            var _this8 = this;
	
	            this.sendUnkill();
	            setTimeout(function () {
	                if (_this8.unkillState == _this8.WAITING) {
	                    _this8.failUnkill('Timeout reached.');
	                }
	            }, 1000);
	        }
	    },
	
	    watch: {
	        uploadMissionState: function uploadMissionState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Mission uploaded.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to upload mission: ' + this.uploadMissionData);
	                }
	            }
	        },
	        downloadMissionState: function downloadMissionState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Mission downloaded.');
	                    this.setCurrentMission(this.downloadMissionData);
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to download mission: ' + this.downloadMissionData);
	                }
	            }
	        },
	        startMissionState: function startMissionState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Mission started.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to start mission: ' + this.startMissionData);
	                }
	            }
	        },
	        stopMissionState: function stopMissionState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Mission stopped.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to stop mission: ' + this.stopMissionData);
	                }
	            }
	        },
	        resumeMissionState: function resumeMissionState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Mission resumed.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to resume mission: ' + this.resumeMissionData);
	                }
	            }
	        },
	        armState: function armState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Vehicle armed.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to arm vehicle: ' + this.armData);
	                }
	            }
	        },
	        disarmState: function disarmState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Vehicle disarmed.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to disarm vehicle: ' + this.disarmData);
	                }
	            }
	        },
	        killState: function killState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Kill switch activated.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to activate kill switch: ' + this.killData);
	                }
	            }
	        },
	        unkillState: function unkillState(state, oldState) {
	            if (state != oldState) {
	                if (state == this.SUCCESS) {
	                    console.log('Kill switch deactivated.');
	                } else if (state == this.FAILURE) {
	                    console.log('Unable to deactivate kill switch: ' + this.unkillData);
	                }
	            }
	        }
	    }
	};

/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-commands\">\n    <div class=\"row\">\n        <ui-button @click=\"uploadMission\">Upload Mission</ui-button>\n    </div>\n\n    <div class=\"row\">\n        <ui-button @click=\"downloadMission\">Download Mission</ui-button>\n    </div>\n\n    <div class=\"row\">\n        <ui-button\n            v-if=\"wamv.mode == 'idle' || wamv.mode == 'paused'\"\n            @click=\"startMission\"\n        >Start</ui-button>\n        <ui-button\n            v-if=\"wamv.mode == 'paused'\"\n            @click=\"resumeMission\"\n        >Resume</ui-button>\n        <ui-button\n            v-if=\"wamv.mode == 'auto'\"\n            @click=\"stopMission\"\n        >Stop</ui-button>\n    </div>\n\n    <div class=\"row\" v-if=\"wamv.loaded\">\n        <div class=\"column one-half\"> {{ isArmed ? 'Armed' : 'Disarmed' }}</div>\n        <div class=\"column one-half\">\n            <ui-switch :value.sync=\"isArmed\"></ui-switch>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <ui-button color=\"danger\"\n            v-if=\"wamv.mode != 'killed'\" @click=\"kill\"\n        >Kill</ui-button>\n        <ui-button\n            v-if=\"wamv.mode == 'killed'\" @click=\"unkill\"\n        >Unkill</ui-button>\n    </div>\n</div>\n";

/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "\n<div\n    class=\"gcs-sidebar-controls\"\n    :style=\"{ transform: 'translateX(' + (showSidebar ? '376px' : '16px' + ')') }\"\n>\n    <ui-button\n        :color=\"showSidebar ? 'primary' : 'default'\" @click=\"toggleSidebar\"\n    >Missions</ui-button>\n\n    <ui-button v-if=\"currentMissionIndex != -1\" has-popover text=\"Commands\">\n        <div slot=\"popover\" class=\"gcs-sidebar-controls-popover\">\n            <gcs-commands></gcs-commands>\n        </div>\n    </ui-button>\n</div>\n";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(65)
	__vue_script__ = __webpack_require__(66)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\markers\\GcsWamv.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(67)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-b5bab4d2/GcsWamv.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 65 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _isMarker = __webpack_require__(41);
	
	var _isMarker2 = _interopRequireDefault(_isMarker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    events: {
	        click: function click(e) {
	            console.log('Wamv clicked', e);
	        },
	        initialized: function initialized() {
	            window.wamv = this;
	        }
	    },
	
	    methods: {
	        getIcon: function getIcon() {
	            var scale = arguments.length <= 0 || arguments[0] === undefined ? this.scale : arguments[0];
	            var rotation = arguments.length <= 1 || arguments[1] === undefined ? this.rotation : arguments[1];
	
	            return {
	                path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
	                rotation: rotation,
	                scale: scale,
	                fillColor: 'red',
	                fillOpacity: 0.8,
	                strokeColor: 'white',
	                strokeWeight: 2
	            };
	        }
	    },
	
	    mixins: [_isMarker2.default]
	};

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-wamv\"></div>\n";

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"view map-view\">\n    <gcs-map></gcs-map>\n    <gcs-map-controls></gcs-map-controls>\n    <gcs-map-sidebar :show-sidebar=\"showSidebar\"></gcs-map-sidebar>\n\n    <gcs-sidebar-controls\n        :show-sidebar=\"showSidebar\" @toggle-sidebar=\"toggleSidebar\"\n    ></gcs-sidebar-controls>\n\n    <gcs-wamv v-if=\"wamv.loaded\"\n        :lat=\"wamv.position.lat\" :lng=\"wamv.position.lng\"\n        :rotation=\"wamv.heading\"\n    ></gcs-wamv>\n</div>\n";

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(70)
	__vue_script__ = __webpack_require__(71)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\views\\ParamsView.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(72)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-04e87b4e/ParamsView.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 70 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getters = __webpack_require__(23);
	
	exports.default = {
	    vuex: {
	        getters: {
	            parameters: _getters.getParameters
	        }
	    },
	
	    data: function data() {
	        return {};
	    },
	
	
	    methods: {
	        isArray: function isArray(x) {
	            return Array.isArray(x);
	        }
	    }
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"view params-view\">\n    <div class=\"page\">\n        <h1 class=\"page-header\">Params</h1>\n        <div class=\"page-content\">\n            <!-- display parameters (up to hierarchy depth 3) -->\n            <div v-for=\"(name, val) in parameters\">\n                <span v-if=\"isArray(val)\"\n                    v-text=\"name + ' (' + val[0] + '): ' + val[1]\"\n                ></span>\n                <div v-else>\n                    <span v-text=\"name\"></span>\n                    <div v-for=\"(name2, val2) in val\">\n                        <span v-if=\"isArray(val2)\"\n                            v-text=\"'> ' + name2 + ' (' + val2[0] + '): ' + val2[1]\"\n                        ></span>\n                        <div v-else>\n                            <span v-text=\"'> ' + name2\"></span>\n                            <div v-for=\"(name3, val3) in val2\">\n                                <span v-if=\"isArray(val3)\"\n                                    v-text=\"'> > ' + name3 + ' (' + val3[0] + '): ' + val3[1]\"\n                                ></span>\n                                <span v-else\n                                    v-text=\"'> > ' + name3 + ': ...'\">\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(74)
	__vue_script__ = __webpack_require__(75)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\views\\SettingsView.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(76)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-a6e91b14/SettingsView.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 74 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 75 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    data: function data() {
	        return {};
	    }
	};

/***/ },
/* 76 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"view settings-view\">\n    <div class=\"page\">\n        <h1 class=\"page-header\">Settings</h1>\n        <div class=\"page-content\">\n            Settings here\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(78)
	__vue_script__ = __webpack_require__(79)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\GcsIndicators.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(80)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-6cb0c7ea/GcsIndicators.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 78 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getters = __webpack_require__(23);
	
	exports.default = {
	    vuex: {
	        getters: {
	            wamv: _getters.getWamv
	        }
	    },
	
	    computed: {
	        heading: function heading() {
	            var deg = Math.round(this.wamv.heading);
	            return deg + '&deg; ' + this.degreeToToCardinal(this.wamv.heading);
	        },
	        speed: function speed() {
	            var spd = Math.round(this.wamv.speed * 100) / 100;
	            return this.wamv.speed + ' KMPH';
	        },
	        battery: function battery() {
	            var perc = Math.round(this.wamv.battery * 100) / 100;
	            return perc + '%';
	        },
	        signal: function signal() {
	            var perc = Math.round(this.wamv.signal * 100) / 100;
	            return perc + '%';
	        }
	    },
	
	    methods: {
	        degreeToToCardinal: function degreeToToCardinal(degree) {
	            if (degree < 22.5 || degree >= 337.5) {
	                return 'N';
	            }
	
	            if (degree < 67.5 || degree >= 22.5) {
	                return 'NE';
	            }
	
	            if (degree < 112.5 || degree >= 67.5) {
	                return 'E';
	            }
	
	            if (degree < 157.5 || degree >= 112.5) {
	                return 'SE';
	            }
	
	            if (degree < 202.5 || degree >= 157.5) {
	                return 'S';
	            }
	
	            if (degree < 247.5 || degree >= 202.5) {
	                return 'SW';
	            }
	
	            if (degree < 292.5 || degree >= 247.5) {
	                return 'W';
	            }
	
	            if (degree < 337.5 || degree >= 292.5) {
	                return 'NW';
	            }
	
	            return '';
	        }
	    }
	};

/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = "\n<ul class=\"gcs-indicators\" v-if=\"wamv.loaded\">\n    <li class=\"indicator heading\">\n        <ui-icon\n            icon=\"navigation\" :style=\"{ transform: 'rotateZ(' + wamv.heading + 'deg)' }\"\n        ></ui-icon>\n        <span class=\"value\" v-html=\"heading\"></span>\n    </li>\n\n    <li class=\"indicator speed\">\n        <ui-icon icon=\"network_check\"></ui-icon>\n        <span class=\"value\" v-text=\"speed\"></span>\n    </li>\n\n    <li class=\"indicator battery\">\n        <ui-icon icon=\"battery_full\"></ui-icon>\n        <span class=\"value\" v-text=\"battery\"></span>\n    </li>\n\n    <li class=\"indicator signal\">\n        <ui-icon icon=\"wifi\"></ui-icon>\n        <span class=\"value\" v-text=\"signal\"></span>\n    </li>\n</ul>\n";

/***/ },
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var url = __webpack_require__(85);
	var parser = __webpack_require__(90);
	var Manager = __webpack_require__(98);
	var debug = __webpack_require__(87)('socket.io-client');
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports = lookup;
	
	/**
	 * Managers cache.
	 */
	
	var cache = exports.managers = {};
	
	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */
	
	function lookup(uri, opts) {
	  if (typeof uri == 'object') {
	    opts = uri;
	    uri = undefined;
	  }
	
	  opts = opts || {};
	
	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] ||
	                      false === opts.multiplex || sameNamespace;
	
	  var io;
	
	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }
	
	  return io.socket(parsed.path);
	}
	
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	exports.protocol = parser.protocol;
	
	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */
	
	exports.connect = lookup;
	
	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */
	
	exports.Manager = __webpack_require__(98);
	exports.Socket = __webpack_require__(126);


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module dependencies.
	 */
	
	var parseuri = __webpack_require__(86);
	var debug = __webpack_require__(87)('socket.io-client:url');
	
	/**
	 * Module exports.
	 */
	
	module.exports = url;
	
	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */
	
	function url(uri, loc){
	  var obj = uri;
	
	  // default to window.location
	  var loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;
	
	  // relative path support
	  if ('string' == typeof uri) {
	    if ('/' == uri.charAt(0)) {
	      if ('/' == uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }
	
	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' != typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }
	
	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }
	
	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    }
	    else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }
	
	  obj.path = obj.path || '/';
	
	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;
	
	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port == obj.port ? '' : (':' + obj.port));
	
	  return obj;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */
	
	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
	
	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];
	
	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');
	
	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }
	
	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;
	
	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }
	
	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }
	
	    return uri;
	};


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(88);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(89);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var debug = __webpack_require__(87)('socket.io-parser');
	var json = __webpack_require__(91);
	var isArray = __webpack_require__(94);
	var Emitter = __webpack_require__(95);
	var binary = __webpack_require__(96);
	var isBuf = __webpack_require__(97);
	
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	exports.protocol = 4;
	
	/**
	 * Packet types.
	 *
	 * @api public
	 */
	
	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'ACK',
	  'ERROR',
	  'BINARY_EVENT',
	  'BINARY_ACK'
	];
	
	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */
	
	exports.CONNECT = 0;
	
	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */
	
	exports.DISCONNECT = 1;
	
	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */
	
	exports.EVENT = 2;
	
	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */
	
	exports.ACK = 3;
	
	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */
	
	exports.ERROR = 4;
	
	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */
	
	exports.BINARY_EVENT = 5;
	
	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */
	
	exports.BINARY_ACK = 6;
	
	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */
	
	exports.Encoder = Encoder;
	
	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */
	
	exports.Decoder = Decoder;
	
	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */
	
	function Encoder() {}
	
	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */
	
	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);
	
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};
	
	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */
	
	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;
	
	  // first is type
	  str += obj.type;
	
	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }
	
	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }
	
	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }
	
	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }
	
	  debug('encoded %j as %s', obj, str);
	  return str;
	}
	
	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */
	
	function encodeAsBinary(obj, callback) {
	
	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;
	
	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }
	
	  binary.removeBlobs(obj, writeEncoding);
	}
	
	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */
	
	function Decoder() {
	  this.reconstructor = null;
	}
	
	/**
	 * Mix in `Emitter` with Decoder.
	 */
	
	Emitter(Decoder.prototype);
	
	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */
	
	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);
	
	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};
	
	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */
	
	function decodeString(str) {
	  var p = {};
	  var i = 0;
	
	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();
	
	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }
	
	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }
	
	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }
	
	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }
	
	  debug('decoded %s as %j', str, p);
	  return p;
	}
	
	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */
	
	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};
	
	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */
	
	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}
	
	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */
	
	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};
	
	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */
	
	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};
	
	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(93);
	
	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };
	
	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	
	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;
	
	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());
	
	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];
	
	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }
	
	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;
	
	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}
	
	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }
	
	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";
	
	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");
	
	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }
	
	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }
	
	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;
	
	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;
	
	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;
	
	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };
	
	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };
	
	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };
	
	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };
	
	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };
	
	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }
	
	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;
	
	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };
	
	        // Internal: Stores the parser state.
	        var Index, Source;
	
	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };
	
	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };
	
	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };
	
	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };
	
	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };
	
	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }
	
	    exports["runInContext"] = runInContext;
	    return exports;
	  }
	
	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;
	
	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));
	
	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }
	
	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92)(module), (function() { return this; }())))

/***/ },
/* 92 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 93 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 94 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 95 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	module.exports = Emitter;
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};
	
	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/
	
	/**
	 * Module requirements
	 */
	
	var isArray = __webpack_require__(94);
	var isBuf = __webpack_require__(97);
	
	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */
	
	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;
	
	  function _deconstructPacket(data) {
	    if (!data) return data;
	
	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }
	
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};
	
	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */
	
	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;
	
	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }
	
	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};
	
	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */
	
	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;
	
	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;
	
	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }
	
	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };
	
	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }
	
	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;
	
	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */
	
	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var eio = __webpack_require__(99);
	var Socket = __webpack_require__(126);
	var Emitter = __webpack_require__(127);
	var parser = __webpack_require__(90);
	var on = __webpack_require__(129);
	var bind = __webpack_require__(130);
	var debug = __webpack_require__(87)('socket.io-client:manager');
	var indexOf = __webpack_require__(124);
	var Backoff = __webpack_require__(133);
	
	/**
	 * IE6+ hasOwnProperty
	 */
	
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * Module exports
	 */
	
	module.exports = Manager;
	
	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */
	
	function Manager(uri, opts){
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' == typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};
	
	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}
	
	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */
	
	Manager.prototype.emitAll = function() {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};
	
	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */
	
	Manager.prototype.updateSocketIds = function(){
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.engine.id;
	    }
	  }
	};
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Manager.prototype);
	
	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnection = function(v){
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};
	
	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionAttempts = function(v){
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};
	
	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionDelay = function(v){
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};
	
	Manager.prototype.randomizationFactor = function(v){
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};
	
	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionDelayMax = function(v){
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};
	
	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.timeout = function(v){
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};
	
	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */
	
	Manager.prototype.maybeReconnectOnOpen = function() {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};
	
	
	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */
	
	Manager.prototype.open =
	Manager.prototype.connect = function(fn){
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;
	
	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;
	
	  // emit `open`
	  var openSub = on(socket, 'open', function() {
	    self.onopen();
	    fn && fn();
	  });
	
	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function(data){
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });
	
	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);
	
	    // set timer
	    var timer = setTimeout(function(){
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);
	
	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }
	
	  this.subs.push(openSub);
	  this.subs.push(errorSub);
	
	  return this;
	};
	
	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */
	
	Manager.prototype.onopen = function(){
	  debug('open');
	
	  // clear old subs
	  this.cleanup();
	
	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');
	
	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};
	
	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */
	
	Manager.prototype.onping = function(){
	  this.lastPing = new Date;
	  this.emitAll('ping');
	};
	
	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */
	
	Manager.prototype.onpong = function(){
	  this.emitAll('pong', new Date - this.lastPing);
	};
	
	/**
	 * Called with data.
	 *
	 * @api private
	 */
	
	Manager.prototype.ondata = function(data){
	  this.decoder.add(data);
	};
	
	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */
	
	Manager.prototype.ondecoded = function(packet) {
	  this.emit('packet', packet);
	};
	
	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */
	
	Manager.prototype.onerror = function(err){
	  debug('error', err);
	  this.emitAll('error', err);
	};
	
	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */
	
	Manager.prototype.socket = function(nsp){
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function(){
	      socket.id = self.engine.id;
	    });
	
	    if (this.autoConnect) {
	      // manually call here since connecting evnet is fired before listening
	      onConnecting();
	    }
	  }
	
	  function onConnecting() {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }
	
	  return socket;
	};
	
	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */
	
	Manager.prototype.destroy = function(socket){
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;
	
	  this.close();
	};
	
	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Manager.prototype.packet = function(packet){
	  debug('writing packet %j', packet);
	  var self = this;
	
	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function(encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};
	
	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */
	
	Manager.prototype.processPacketQueue = function() {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};
	
	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */
	
	Manager.prototype.cleanup = function(){
	  debug('cleanup');
	
	  var sub;
	  while (sub = this.subs.shift()) sub.destroy();
	
	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;
	
	  this.decoder.destroy();
	};
	
	/**
	 * Close the current socket.
	 *
	 * @api private
	 */
	
	Manager.prototype.close =
	Manager.prototype.disconnect = function(){
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' == this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};
	
	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */
	
	Manager.prototype.onclose = function(reason){
	  debug('onclose');
	
	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);
	
	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};
	
	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */
	
	Manager.prototype.reconnect = function(){
	  if (this.reconnecting || this.skipReconnect) return this;
	
	  var self = this;
	
	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);
	
	    this.reconnecting = true;
	    var timer = setTimeout(function(){
	      if (self.skipReconnect) return;
	
	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);
	
	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;
	
	      self.open(function(err){
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);
	
	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }
	};
	
	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */
	
	Manager.prototype.onreconnect = function(){
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports =  __webpack_require__(100);


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(101);
	
	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(108);


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var transports = __webpack_require__(102);
	var Emitter = __webpack_require__(117);
	var debug = __webpack_require__(87)('engine.io-client:socket');
	var index = __webpack_require__(124);
	var parser = __webpack_require__(108);
	var parseuri = __webpack_require__(86);
	var parsejson = __webpack_require__(125);
	var parseqs = __webpack_require__(118);
	
	/**
	 * Module exports.
	 */
	
	module.exports = Socket;
	
	/**
	 * Noop function.
	 *
	 * @api private
	 */
	
	function noop(){}
	
	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */
	
	function Socket(uri, opts){
	  if (!(this instanceof Socket)) return new Socket(uri, opts);
	
	  opts = opts || {};
	
	  if (uri && 'object' == typeof uri) {
	    opts = uri;
	    uri = null;
	  }
	
	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }
	
	  this.secure = null != opts.secure ? opts.secure :
	    (global.location && 'https:' == location.protocol);
	
	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }
	
	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port ?
	       location.port :
	       (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;
	
	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
	
	  // other options for Node.js client
	  var freeGlobal = typeof global == 'object' && global;
	  if (freeGlobal.global === freeGlobal) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }
	  }
	
	  this.open();
	}
	
	Socket.priorWebsocketSuccess = false;
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Socket.prototype);
	
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	Socket.protocol = parser.protocol; // this is an int
	
	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */
	
	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(107);
	Socket.transports = __webpack_require__(102);
	Socket.parser = __webpack_require__(108);
	
	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */
	
	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);
	
	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;
	
	  // transport name
	  query.transport = name;
	
	  // session id if we already have one
	  if (this.id) query.sid = this.id;
	
	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized,
	    perMessageDeflate: this.perMessageDeflate,
	    extraHeaders: this.extraHeaders
	  });
	
	  return transport;
	};
	
	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}
	
	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function() {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';
	
	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }
	
	  transport.open();
	  this.setTransport(transport);
	};
	
	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */
	
	Socket.prototype.setTransport = function(transport){
	  debug('setting transport %s', transport.name);
	  var self = this;
	
	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }
	
	  // set up transport
	  this.transport = transport;
	
	  // set up transport listeners
	  transport
	  .on('drain', function(){
	    self.onDrain();
	  })
	  .on('packet', function(packet){
	    self.onPacket(packet);
	  })
	  .on('error', function(e){
	    self.onError(e);
	  })
	  .on('close', function(){
	    self.onClose('transport close');
	  });
	};
	
	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */
	
	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 })
	    , failed = false
	    , self = this;
	
	  Socket.priorWebsocketSuccess = false;
	
	  function onTransportOpen(){
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;
	
	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' == msg.type && 'probe' == msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' == transport.name;
	
	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' == self.readyState) return;
	          debug('changing transport and sending upgrade packet');
	
	          cleanup();
	
	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }
	
	  function freezeTransport() {
	    if (failed) return;
	
	    // Any callback called by transport should be ignored since now
	    failed = true;
	
	    cleanup();
	
	    transport.close();
	    transport = null;
	  }
	
	  //Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;
	
	    freezeTransport();
	
	    debug('probe transport "%s" failed because of error: %s', name, err);
	
	    self.emit('upgradeError', error);
	  }
	
	  function onTransportClose(){
	    onerror("transport closed");
	  }
	
	  //When the socket is closed while we're probing
	  function onclose(){
	    onerror("socket closed");
	  }
	
	  //When the socket is upgraded while we're probing
	  function onupgrade(to){
	    if (transport && to.name != transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }
	
	  //Remove all listeners on the transport and on self
	  function cleanup(){
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }
	
	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);
	
	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);
	
	  transport.open();
	
	};
	
	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */
	
	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
	  this.emit('open');
	  this.flush();
	
	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};
	
	/**
	 * Handles a packet.
	 *
	 * @api private
	 */
	
	Socket.prototype.onPacket = function (packet) {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
	
	    this.emit('packet', packet);
	
	    // Socket is live - any packet counts
	    this.emit('heartbeat');
	
	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;
	
	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;
	
	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;
	
	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};
	
	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */
	
	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if  ('closed' == this.readyState) return;
	  this.setPing();
	
	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};
	
	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */
	
	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' == self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};
	
	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */
	
	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};
	
	/**
	* Sends a ping packet.
	*
	* @api private
	*/
	
	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function(){
	    self.emit('ping');
	  });
	};
	
	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */
	
	Socket.prototype.onDrain = function() {
	  this.writeBuffer.splice(0, this.prevBufferLen);
	
	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;
	
	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};
	
	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */
	
	Socket.prototype.flush = function () {
	  if ('closed' != this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};
	
	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */
	
	Socket.prototype.write =
	Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};
	
	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */
	
	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if('function' == typeof data) {
	    fn = data;
	    data = undefined;
	  }
	
	  if ('function' == typeof options) {
	    fn = options;
	    options = null;
	  }
	
	  if ('closing' == this.readyState || 'closed' == this.readyState) {
	    return;
	  }
	
	  options = options || {};
	  options.compress = false !== options.compress;
	
	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};
	
	/**
	 * Closes the connection.
	 *
	 * @api private
	 */
	
	Socket.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.readyState = 'closing';
	
	    var self = this;
	
	    if (this.writeBuffer.length) {
	      this.once('drain', function() {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }
	
	  function close() {
	    self.onClose('forced close');
	    debug('socket closing - telling transport to close');
	    self.transport.close();
	  }
	
	  function cleanupAndClose() {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }
	
	  function waitForUpgrade() {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }
	
	  return this;
	};
	
	/**
	 * Called upon transport error
	 *
	 * @api private
	 */
	
	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};
	
	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */
	
	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;
	
	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);
	
	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');
	
	    // ensure transport won't stay open
	    this.transport.close();
	
	    // ignore further transport communication
	    this.transport.removeAllListeners();
	
	    // set ready state
	    this.readyState = 'closed';
	
	    // clear session id
	    this.id = null;
	
	    // emit close event
	    this.emit('close', reason, desc);
	
	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};
	
	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */
	
	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i<j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies
	 */
	
	var XMLHttpRequest = __webpack_require__(103);
	var XHR = __webpack_require__(105);
	var JSONP = __webpack_require__(121);
	var websocket = __webpack_require__(122);
	
	/**
	 * Export transports.
	 */
	
	exports.polling = polling;
	exports.websocket = websocket;
	
	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */
	
	function polling(opts){
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;
	
	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;
	
	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }
	
	    xd = opts.hostname != location.hostname || port != opts.port;
	    xs = opts.secure != isSSL;
	  }
	
	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);
	
	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// browser shim for xmlhttprequest module
	var hasCORS = __webpack_require__(104);
	
	module.exports = function(opts) {
	  var xdomain = opts.xdomain;
	
	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;
	
	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;
	
	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }
	
	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }
	
	  if (!xdomain) {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch(e) { }
	  }
	}


/***/ },
/* 104 */
/***/ function(module, exports) {

	
	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */
	
	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module requirements.
	 */
	
	var XMLHttpRequest = __webpack_require__(103);
	var Polling = __webpack_require__(106);
	var Emitter = __webpack_require__(117);
	var inherit = __webpack_require__(119);
	var debug = __webpack_require__(87)('engine.io-client:polling-xhr');
	
	/**
	 * Module exports.
	 */
	
	module.exports = XHR;
	module.exports.Request = Request;
	
	/**
	 * Empty function
	 */
	
	function empty(){}
	
	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */
	
	function XHR(opts){
	  Polling.call(this, opts);
	
	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;
	
	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }
	
	    this.xd = opts.hostname != global.location.hostname ||
	      port != opts.port;
	    this.xs = opts.secure != isSSL;
	  } else {
	    this.extraHeaders = opts.extraHeaders;
	  }
	}
	
	/**
	 * Inherits from Polling.
	 */
	
	inherit(XHR, Polling);
	
	/**
	 * XHR supports binary
	 */
	
	XHR.prototype.supportsBinary = true;
	
	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */
	
	XHR.prototype.request = function(opts){
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	
	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;
	
	  return new Request(opts);
	};
	
	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */
	
	XHR.prototype.doWrite = function(data, fn){
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function(err){
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};
	
	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */
	
	XHR.prototype.doPoll = function(){
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function(data){
	    self.onData(data);
	  });
	  req.on('error', function(err){
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};
	
	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */
	
	function Request(opts){
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined != opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	
	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	
	  this.create();
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Request.prototype);
	
	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */
	
	Request.prototype.create = function(){
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	
	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;
	
	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }
	
	    if ('POST' == this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }
	
	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }
	
	    if (this.hasXDR()) {
	      xhr.onload = function(){
	        self.onLoad();
	      };
	      xhr.onerror = function(){
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function(){
	        if (4 != xhr.readyState) return;
	        if (200 == xhr.status || 1223 == xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function(){
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }
	
	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function() {
	      self.onError(e);
	    }, 0);
	    return;
	  }
	
	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};
	
	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */
	
	Request.prototype.onSuccess = function(){
	  this.emit('success');
	  this.cleanup();
	};
	
	/**
	 * Called if we have data.
	 *
	 * @api private
	 */
	
	Request.prototype.onData = function(data){
	  this.emit('data', data);
	  this.onSuccess();
	};
	
	/**
	 * Called upon error.
	 *
	 * @api private
	 */
	
	Request.prototype.onError = function(err){
	  this.emit('error', err);
	  this.cleanup(true);
	};
	
	/**
	 * Cleans up house.
	 *
	 * @api private
	 */
	
	Request.prototype.cleanup = function(fromError){
	  if ('undefined' == typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }
	
	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch(e) {}
	  }
	
	  if (global.document) {
	    delete Request.requests[this.index];
	  }
	
	  this.xhr = null;
	};
	
	/**
	 * Called upon load.
	 *
	 * @api private
	 */
	
	Request.prototype.onLoad = function(){
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        try {
	          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
	        } catch (e) {
	          var ui8Arr = new Uint8Array(this.xhr.response);
	          var dataArray = [];
	          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
	            dataArray.push(ui8Arr[idx]);
	          }
	
	          data = String.fromCharCode.apply(null, dataArray);
	        }
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};
	
	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */
	
	Request.prototype.hasXDR = function(){
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};
	
	/**
	 * Aborts the request.
	 *
	 * @api public
	 */
	
	Request.prototype.abort = function(){
	  this.cleanup();
	};
	
	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */
	
	if (global.document) {
	  Request.requestsCount = 0;
	  Request.requests = {};
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}
	
	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var Transport = __webpack_require__(107);
	var parseqs = __webpack_require__(118);
	var parser = __webpack_require__(108);
	var inherit = __webpack_require__(119);
	var yeast = __webpack_require__(120);
	var debug = __webpack_require__(87)('engine.io-client:polling');
	
	/**
	 * Module exports.
	 */
	
	module.exports = Polling;
	
	/**
	 * Is XHR2 supported?
	 */
	
	var hasXHR2 = (function() {
	  var XMLHttpRequest = __webpack_require__(103);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();
	
	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */
	
	function Polling(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}
	
	/**
	 * Inherits from Transport.
	 */
	
	inherit(Polling, Transport);
	
	/**
	 * Transport name.
	 */
	
	Polling.prototype.name = 'polling';
	
	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */
	
	Polling.prototype.doOpen = function(){
	  this.poll();
	};
	
	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */
	
	Polling.prototype.pause = function(onPause){
	  var pending = 0;
	  var self = this;
	
	  this.readyState = 'pausing';
	
	  function pause(){
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }
	
	  if (this.polling || !this.writable) {
	    var total = 0;
	
	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function(){
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }
	
	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function(){
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};
	
	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */
	
	Polling.prototype.poll = function(){
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};
	
	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */
	
	Polling.prototype.onData = function(data){
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' == self.readyState) {
	      self.onOpen();
	    }
	
	    // if its a close packet, we close the ongoing requests
	    if ('close' == packet.type) {
	      self.onClose();
	      return false;
	    }
	
	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };
	
	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);
	
	  // if an event did not trigger closing
	  if ('closed' != this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');
	
	    if ('open' == this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};
	
	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */
	
	Polling.prototype.doClose = function(){
	  var self = this;
	
	  function close(){
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }
	
	  if ('open' == this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};
	
	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */
	
	Polling.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  var callbackfn = function() {
	    self.writable = true;
	    self.emit('drain');
	  };
	
	  var self = this;
	  parser.encodePayload(packets, this.supportsBinary, function(data) {
	    self.doWrite(data, callbackfn);
	  });
	};
	
	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */
	
	Polling.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';
	
	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }
	
	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }
	
	  query = parseqs.encode(query);
	
	  // avoid port if default for schema
	  if (this.port && (('https' == schema && this.port != 443) ||
	     ('http' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }
	
	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }
	
	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var parser = __webpack_require__(108);
	var Emitter = __webpack_require__(117);
	
	/**
	 * Module exports.
	 */
	
	module.exports = Transport;
	
	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */
	
	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	
	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Transport.prototype);
	
	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */
	
	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};
	
	/**
	 * Opens the transport.
	 *
	 * @api public
	 */
	
	Transport.prototype.open = function () {
	  if ('closed' == this.readyState || '' == this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }
	
	  return this;
	};
	
	/**
	 * Closes the transport.
	 *
	 * @api private
	 */
	
	Transport.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.doClose();
	    this.onClose();
	  }
	
	  return this;
	};
	
	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */
	
	Transport.prototype.send = function(packets){
	  if ('open' == this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};
	
	/**
	 * Called upon open
	 *
	 * @api private
	 */
	
	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};
	
	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */
	
	Transport.prototype.onData = function(data){
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};
	
	/**
	 * Called with a decoded packet.
	 */
	
	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};
	
	/**
	 * Called upon close.
	 *
	 * @api private
	 */
	
	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var keys = __webpack_require__(109);
	var hasBinary = __webpack_require__(110);
	var sliceBuffer = __webpack_require__(112);
	var base64encoder = __webpack_require__(113);
	var after = __webpack_require__(114);
	var utf8 = __webpack_require__(115);
	
	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */
	
	var isAndroid = navigator.userAgent.match(/Android/i);
	
	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);
	
	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;
	
	/**
	 * Current protocol version.
	 */
	
	exports.protocol = 3;
	
	/**
	 * Packet types.
	 */
	
	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};
	
	var packetslist = keys(packets);
	
	/**
	 * Premade error packet.
	 */
	
	var err = { type: 'error', data: 'parser error' };
	
	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */
	
	var Blob = __webpack_require__(116);
	
	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */
	
	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }
	
	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }
	
	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;
	
	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }
	
	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }
	
	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];
	
	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }
	
	  return callback('' + encoded);
	
	};
	
	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}
	
	/**
	 * Encode packet helpers for binary types
	 */
	
	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);
	
	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }
	
	  return callback(resultBuffer.buffer);
	}
	
	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}
	
	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }
	
	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);
	
	  return callback(blob);
	}
	
	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */
	
	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof global.Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }
	
	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};
	
	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */
	
	exports.decodePacket = function (data, binaryType, utf8decode) {
	  // String data
	  if (typeof data == 'string' || data === undefined) {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }
	
	    if (utf8decode) {
	      try {
	        data = utf8.decode(data);
	      } catch (e) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);
	
	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }
	
	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }
	
	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};
	
	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */
	
	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!global.ArrayBuffer) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }
	
	  var data = base64encoder.decode(msg.substr(1));
	
	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }
	
	  return { type: type, data: data };
	};
	
	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */
	
	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }
	
	  var isBinary = hasBinary(packets);
	
	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }
	
	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }
	
	  if (!packets.length) {
	    return callback('0:');
	  }
	
	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }
	
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }
	
	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};
	
	/**
	 * Async array map using after
	 */
	
	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);
	
	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };
	
	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}
	
	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */
	
	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }
	
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }
	
	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }
	
	  var length = ''
	    , n, msg;
	
	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);
	
	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }
	
	      msg = data.substr(i + 1, n);
	
	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }
	
	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);
	
	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }
	
	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }
	
	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }
	
	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }
	
	};
	
	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */
	
	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }
	
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }
	
	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);
	
	    var resultArray = new Uint8Array(totalLength);
	
	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }
	
	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }
	
	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;
	
	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });
	
	    return callback(resultArray.buffer);
	  });
	};
	
	/**
	 * Encode as Blob
	 */
	
	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }
	
	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;
	
	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;
	
	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }
	
	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};
	
	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */
	
	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }
	
	  var bufferTail = data;
	  var buffers = [];
	
	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';
	
	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;
	
	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }
	
	      msgLength += tailArray[i];
	    }
	
	    if(numberTooLong) return callback(err, 0, 1);
	
	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);
	
	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }
	
	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }
	
	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 109 */
/***/ function(module, exports) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */
	
	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;
	
	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */
	
	var isArray = __webpack_require__(111);
	
	/**
	 * Module exports.
	 */
	
	module.exports = hasBinary;
	
	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */
	
	function hasBinary(data) {
	
	  function _hasBinary(obj) {
	    if (!obj) return false;
	
	    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }
	
	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }
	
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }
	
	    return false;
	  }
	
	  return _hasBinary(data);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 112 */
/***/ function(module, exports) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */
	
	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;
	
	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }
	
	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }
	
	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }
	
	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ },
/* 113 */
/***/ function(module, exports) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(chars){
	  "use strict";
	
	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";
	
	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }
	
	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }
	
	    return base64;
	  };
	
	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;
	
	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }
	
	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);
	
	    for (i = 0; i < len; i+=4) {
	      encoded1 = chars.indexOf(base64[i]);
	      encoded2 = chars.indexOf(base64[i+1]);
	      encoded3 = chars.indexOf(base64[i+2]);
	      encoded4 = chars.indexOf(base64[i+3]);
	
	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }
	
	    return arraybuffer;
	  };
	})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ },
/* 114 */
/***/ function(module, exports) {

	module.exports = after
	
	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count
	
	    return (count === 0) ? callback() : proxy
	
	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count
	
	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}
	
	function noop() {}


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/utf8js v2.0.0 by @mathias */
	;(function(root) {
	
		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;
	
		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
	
		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}
	
		/*--------------------------------------------------------------------------*/
	
		var stringFromCharCode = String.fromCharCode;
	
		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}
	
		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/
	
		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}
	
		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}
	
		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}
	
		/*--------------------------------------------------------------------------*/
	
		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}
	
			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}
	
			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}
	
		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;
	
			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}
	
			if (byteIndex == byteCount) {
				return false;
			}
	
			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}
	
			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}
	
			throw Error('Invalid UTF-8 detected');
		}
	
		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}
	
		/*--------------------------------------------------------------------------*/
	
		var utf8 = {
			'version': '2.0.0',
			'encode': utf8encode,
			'decode': utf8decode
		};
	
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return utf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92)(module), (function() { return this; }())))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Create a blob builder even when vendor prefixes exist
	 */
	
	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;
	
	/**
	 * Check if Blob constructor is supported
	 */
	
	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	
	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */
	
	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	
	/**
	 * Check if BlobBuilder is supported
	 */
	
	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;
	
	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */
	
	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;
	
	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }
	
	      ary[i] = buf;
	    }
	  }
	}
	
	function BlobBuilderConstructor(ary, options) {
	  options = options || {};
	
	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);
	
	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }
	
	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};
	
	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};
	
	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 117 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	module.exports = Emitter;
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};
	
	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 118 */
/***/ function(module, exports) {

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */
	
	exports.encode = function (obj) {
	  var str = '';
	
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }
	
	  return str;
	};
	
	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */
	
	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};


/***/ },
/* 119 */
/***/ function(module, exports) {

	
	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';
	
	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i = 0
	  , prev;
	
	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';
	
	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);
	
	  return encoded;
	}
	
	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;
	
	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }
	
	  return decoded;
	}
	
	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode(+new Date());
	
	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode(seed++);
	}
	
	//
	// Map each character to its index.
	//
	for (; i < length; i++) map[alphabet[i]] = i;
	
	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode;
	yeast.decode = decode;
	module.exports = yeast;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module requirements.
	 */
	
	var Polling = __webpack_require__(106);
	var inherit = __webpack_require__(119);
	
	/**
	 * Module exports.
	 */
	
	module.exports = JSONPPolling;
	
	/**
	 * Cached regular expressions.
	 */
	
	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;
	
	/**
	 * Global JSONP callbacks.
	 */
	
	var callbacks;
	
	/**
	 * Callbacks count.
	 */
	
	var index = 0;
	
	/**
	 * Noop.
	 */
	
	function empty () { }
	
	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */
	
	function JSONPPolling (opts) {
	  Polling.call(this, opts);
	
	  this.query = this.query || {};
	
	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }
	
	  // callback identifier
	  this.index = callbacks.length;
	
	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });
	
	  // append to query string
	  this.query.j = this.index;
	
	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}
	
	/**
	 * Inherits from Polling.
	 */
	
	inherit(JSONPPolling, Polling);
	
	/*
	 * JSONP only supports binary as base64 encoded strings
	 */
	
	JSONPPolling.prototype.supportsBinary = false;
	
	/**
	 * Closes the socket.
	 *
	 * @api private
	 */
	
	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }
	
	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }
	
	  Polling.prototype.doClose.call(this);
	};
	
	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */
	
	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');
	
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }
	
	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function(e){
	    self.onError('jsonp poll error',e);
	  };
	
	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  }
	  else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;
	
	  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
	  
	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};
	
	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */
	
	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;
	
	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;
	
	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);
	
	    this.form = form;
	    this.area = area;
	  }
	
	  this.form.action = this.uri();
	
	  function complete () {
	    initIframe();
	    fn();
	  }
	
	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }
	
	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }
	
	    iframe.id = self.iframeId;
	
	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }
	
	  initIframe();
	
	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');
	
	  try {
	    this.form.submit();
	  } catch(e) {}
	
	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function(){
	      if (self.iframe.readyState == 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var Transport = __webpack_require__(107);
	var parser = __webpack_require__(108);
	var parseqs = __webpack_require__(118);
	var inherit = __webpack_require__(119);
	var yeast = __webpack_require__(120);
	var debug = __webpack_require__(87)('engine.io-client:websocket');
	var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
	
	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */
	
	var WebSocket = BrowserWebSocket;
	if (!WebSocket && typeof window === 'undefined') {
	  try {
	    WebSocket = __webpack_require__(123);
	  } catch (e) { }
	}
	
	/**
	 * Module exports.
	 */
	
	module.exports = WS;
	
	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */
	
	function WS(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  Transport.call(this, opts);
	}
	
	/**
	 * Inherits from Transport.
	 */
	
	inherit(WS, Transport);
	
	/**
	 * Transport name.
	 *
	 * @api public
	 */
	
	WS.prototype.name = 'websocket';
	
	/*
	 * WebSockets support binary
	 */
	
	WS.prototype.supportsBinary = true;
	
	/**
	 * Opens socket.
	 *
	 * @api private
	 */
	
	WS.prototype.doOpen = function(){
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }
	
	  var self = this;
	  var uri = this.uri();
	  var protocols = void(0);
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	
	  this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
	
	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }
	
	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'buffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }
	
	  this.addEventListeners();
	};
	
	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */
	
	WS.prototype.addEventListeners = function(){
	  var self = this;
	
	  this.ws.onopen = function(){
	    self.onOpen();
	  };
	  this.ws.onclose = function(){
	    self.onClose();
	  };
	  this.ws.onmessage = function(ev){
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function(e){
	    self.onError('websocket error', e);
	  };
	};
	
	/**
	 * Override `onData` to use a timer on iOS.
	 * See: https://gist.github.com/mloughran/2052006
	 *
	 * @api private
	 */
	
	if ('undefined' != typeof navigator
	  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
	  WS.prototype.onData = function(data){
	    var self = this;
	    setTimeout(function(){
	      Transport.prototype.onData.call(self, data);
	    }, 0);
	  };
	}
	
	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */
	
	WS.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	
	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function(packet) {
	      parser.encodePacket(packet, self.supportsBinary, function(data) {
	        if (!BrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }
	
	          if (self.perMessageDeflate) {
	            var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }
	
	        //Sometimes the websocket has already been closed but the browser didn't
	        //have a chance of informing us about it yet, in that case send will
	        //throw an error
	        try {
	          if (BrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e){
	          debug('websocket closed before onclose event');
	        }
	
	        --total || done();
	      });
	    })(packets[i]);
	  }
	
	  function done(){
	    self.emit('flush');
	
	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function(){
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};
	
	/**
	 * Called upon close
	 *
	 * @api private
	 */
	
	WS.prototype.onClose = function(){
	  Transport.prototype.onClose.call(this);
	};
	
	/**
	 * Closes socket.
	 *
	 * @api private
	 */
	
	WS.prototype.doClose = function(){
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};
	
	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */
	
	WS.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';
	
	  // avoid port if default for schema
	  if (this.port && (('wss' == schema && this.port != 443)
	    || ('ws' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }
	
	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }
	
	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }
	
	  query = parseqs.encode(query);
	
	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }
	
	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};
	
	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */
	
	WS.prototype.check = function(){
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 124 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;
	
	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 125 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */
	
	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;
	
	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }
	
	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');
	
	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }
	
	  if (rvalidchars.test(data.replace(rvalidescape, '@')
	      .replace(rvalidtokens, ']')
	      .replace(rvalidbraces, ''))) {
	    return (new Function('return ' + data))();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var parser = __webpack_require__(90);
	var Emitter = __webpack_require__(127);
	var toArray = __webpack_require__(128);
	var on = __webpack_require__(129);
	var bind = __webpack_require__(130);
	var debug = __webpack_require__(87)('socket.io-client:socket');
	var hasBin = __webpack_require__(131);
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports = Socket;
	
	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */
	
	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};
	
	/**
	 * Shortcut to `Emitter#emit`.
	 */
	
	var emit = Emitter.prototype.emit;
	
	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */
	
	function Socket(io, nsp){
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  if (this.io.autoConnect) this.open();
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Socket.prototype);
	
	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */
	
	Socket.prototype.subEvents = function() {
	  if (this.subs) return;
	
	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};
	
	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */
	
	Socket.prototype.open =
	Socket.prototype.connect = function(){
	  if (this.connected) return this;
	
	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' == this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};
	
	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.send = function(){
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};
	
	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.emit = function(ev){
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }
	
	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
	  var packet = { type: parserType, data: args };
	
	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;
	
	  // event ack callback
	  if ('function' == typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }
	
	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }
	
	  delete this.flags;
	
	  return this;
	};
	
	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.packet = function(packet){
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};
	
	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */
	
	Socket.prototype.onopen = function(){
	  debug('transport is open - connecting');
	
	  // write connect packet if necessary
	  if ('/' != this.nsp) {
	    this.packet({ type: parser.CONNECT });
	  }
	};
	
	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */
	
	Socket.prototype.onclose = function(reason){
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};
	
	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onpacket = function(packet){
	  if (packet.nsp != this.nsp) return;
	
	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;
	
	    case parser.EVENT:
	      this.onevent(packet);
	      break;
	
	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;
	
	    case parser.ACK:
	      this.onack(packet);
	      break;
	
	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;
	
	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;
	
	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};
	
	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onevent = function(packet){
	  var args = packet.data || [];
	  debug('emitting event %j', args);
	
	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }
	
	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};
	
	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */
	
	Socket.prototype.ack = function(id){
	  var self = this;
	  var sent = false;
	  return function(){
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);
	
	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};
	
	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onack = function(packet){
	  var ack = this.acks[packet.id];
	  if ('function' == typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};
	
	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */
	
	Socket.prototype.onconnect = function(){
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};
	
	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */
	
	Socket.prototype.emitBuffered = function(){
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];
	
	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};
	
	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */
	
	Socket.prototype.ondisconnect = function(){
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};
	
	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */
	
	Socket.prototype.destroy = function(){
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }
	
	  this.io.destroy(this);
	};
	
	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.close =
	Socket.prototype.disconnect = function(){
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }
	
	  // remove socket from pool
	  this.destroy();
	
	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};
	
	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.compress = function(compress){
	  this.flags = this.flags || {};
	  this.flags.compress = compress;
	  return this;
	};


/***/ },
/* 127 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	module.exports = Emitter;
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = toArray
	
	function toArray(list, index) {
	    var array = []
	
	    index = index || 0
	
	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }
	
	    return array
	}


/***/ },
/* 129 */
/***/ function(module, exports) {

	
	/**
	 * Module exports.
	 */
	
	module.exports = on;
	
	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */
	
	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function(){
	      obj.removeListener(ev, fn);
	    }
	  };
	}


/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Slice reference.
	 */
	
	var slice = [].slice;
	
	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */
	
	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */
	
	var isArray = __webpack_require__(132);
	
	/**
	 * Module exports.
	 */
	
	module.exports = hasBinary;
	
	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */
	
	function hasBinary(data) {
	
	  function _hasBinary(obj) {
	    if (!obj) return false;
	
	    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }
	
	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      // see: https://github.com/Automattic/has-binary/pull/4
	      if (obj.toJSON && 'function' == typeof obj.toJSON) {
	        obj = obj.toJSON();
	      }
	
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }
	
	    return false;
	  }
	
	  return _hasBinary(data);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 132 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 133 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Backoff`.
	 */
	
	module.exports = Backoff;
	
	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */
	
	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}
	
	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */
	
	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};
	
	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */
	
	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};
	
	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */
	
	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};
	
	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */
	
	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};
	
	/**
	 * Set the jitter
	 *
	 * @api public
	 */
	
	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};
	


/***/ },
/* 134 */,
/* 135 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"gcs-app\">\n    <ui-tabs\n        class=\"main-tab-container\" background-color=\"dark\" text-color=\"light\"\n        indicator-color=\"transparent\"\n    >\n        <ui-tab header=\"Map\">\n            <map-view></map-view>\n        </ui-tab>\n\n        <ui-tab header=\"Params\">\n            <params-view></params-view>\n        </ui-tab>\n\n        <ui-tab header=\"Settings\">\n            <settings-view></settings-view>\n        </ui-tab>\n    </ui-tabs>\n\n    <gcs-indicators></gcs-indicators>\n\n    <ui-snackbar-container position=\"center\"></ui-snackbar-container>\n</div>\n\n<!-- <socket-io-manager></socket-io-manager> -->\n";

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _vuex = __webpack_require__(137);
	
	var _vuex2 = _interopRequireDefault(_vuex);
	
	var _config = __webpack_require__(138);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_vue2.default.use(_vuex2.default);
	
	var initialState = {
	    map: null,
	    mapEl: null,
	    mapLoaded: false,
	    mapEditing: false,
	    wamv: {
	        loaded: false,
	        position: { lat: -32.8883338, lng: 151.7075279 },
	        heading: 0,
	        speed: 0,
	        battery: 100,
	        armed: false,
	        mode: 'idle',
	        signal: 100
	    },
	    config: _config2.default,
	    settings: _config2.default.settings,
	    settingsLoaded: false,
	    missions: [],
	    currentMissionIndex: -1,
	    parameters: {},
	    messageState: {
	        INITIAL: 0,
	        WAITING: 1,
	        SUCCESS: 2,
	        FAILURE: 3,
	
	        get_parameters: [0, null],
	        set_parameter: [0, null],
	        save_missions: [0, null],
	        load_missions: [0, null],
	        upload_mission: [0, null],
	        download_mission: [0, null],
	        arm: [0, null],
	        disarm: [0, null],
	        start_mission: [0, null],
	        stop_mission: [0, null],
	        resume_mission: [0, null],
	        kill: [0, null],
	        unkill: [0, null]
	    }
	};
	
	var mutations = {
	    SET_MAP: function SET_MAP(state, map) {
	        state.map = map;
	    },
	    SET_MAP_EL: function SET_MAP_EL(state, mapEl) {
	        state.mapEl = mapEl;
	    },
	    SET_MAP_LOADED: function SET_MAP_LOADED(state, loaded) {
	        state.mapLoaded = loaded;
	    },
	    SET_MAP_EDITING: function SET_MAP_EDITING(state, editing) {
	        state.mapEditing = editing;
	    },
	    UPDATE_WAMV_POSITION: function UPDATE_WAMV_POSITION(state, position) {
	        state.wamv.position = position;
	    },
	    SET_WAMV: function SET_WAMV(state, wamv) {
	        state.wamv = wamv;
	    },
	    SET_WAMV_ARMED: function SET_WAMV_ARMED(state, armed) {
	        state.wamv.armed = armed;
	    },
	    SET_WAMV_MODE: function SET_WAMV_MODE(state, mode) {
	        state.wamv.mode = mode;
	    },
	    INIT_SETTINGS: function INIT_SETTINGS(state, settings) {
	        state.settings = settings;
	        state.settingsLoaded = true;
	    },
	    UPDATE_SETTINGS: function UPDATE_SETTINGS(state, settings) {
	        state.settings = settings;
	    },
	    SET_MISSIONS: function SET_MISSIONS(state, missions) {
	        state.missions = missions;
	    },
	    SET_CURRENT_MISSION_INDEX: function SET_CURRENT_MISSION_INDEX(state, index) {
	        state.currentMissionIndex = index;
	    },
	    SET_CURRENT_MISSION: function SET_CURRENT_MISSION(state, mission) {
	        state.missions.$set(state.currentMissionIndex, mission);
	    },
	    SET_PARAMETERS: function SET_PARAMETERS(state, parameters) {
	        state.parameters = parameters;
	    },
	    SEND_GET_PARAMETERS: function SEND_GET_PARAMETERS(state) {
	        state.messageState.get_parameters.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_GET_PARAMETERS: function SUCCEED_GET_PARAMETERS(state, parameters) {
	        state.messageState.get_parameters.$set(0, state.messageState.SUCCESS);
	        state.messageState.get_parameters.$set(1, parameters);
	    },
	    FAIL_GET_PARAMETERS: function FAIL_GET_PARAMETERS(state, msg) {
	        state.messageState.get_parameters.$set(0, state.messageState.FAILURE);
	        state.messageState.get_parameters.$set(1, msg);
	    },
	    SEND_SAVE_MISSIONS: function SEND_SAVE_MISSIONS(state, missions) {
	        state.messageState.save_missions.$set(0, state.messageState.WAITING);
	        state.messageState.save_missions.$set(1, missions);
	    },
	    SUCCEED_SAVE_MISSIONS: function SUCCEED_SAVE_MISSIONS(state) {
	        state.messageState.save_missions.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_SAVE_MISSIONS: function FAIL_SAVE_MISSIONS(state, msg) {
	        state.messageState.save_missions.$set(0, state.messageState.FAILURE);
	        state.messageState.save_missions.$set(1, msg);
	    },
	    SEND_LOAD_MISSIONS: function SEND_LOAD_MISSIONS(state) {
	        state.messageState.load_missions.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_LOAD_MISSIONS: function SUCCEED_LOAD_MISSIONS(state, missions) {
	        state.messageState.load_missions.$set(0, state.messageState.SUCCESS);
	        state.messageState.load_missions.$set(1, missions);
	    },
	    FAIL_LOAD_MISSIONS: function FAIL_LOAD_MISSIONS(state, msg) {
	        state.messageState.load_missions.$set(0, state.messageState.FAILURE);
	        state.messageState.load_missions.$set(1, msg);
	    },
	    SEND_UPLOAD_MISSION: function SEND_UPLOAD_MISSION(state, mission) {
	        state.messageState.upload_mission.$set(0, state.messageState.WAITING);
	        state.messageState.upload_mission.$set(1, mission);
	    },
	    SUCCEED_UPLOAD_MISSION: function SUCCEED_UPLOAD_MISSION(state) {
	        state.messageState.upload_mission.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_UPLOAD_MISSION: function FAIL_UPLOAD_MISSION(state, msg) {
	        state.messageState.upload_mission.$set(0, state.messageState.FAILURE);
	        state.messageState.upload_mission.$set(1, msg);
	    },
	    SEND_DOWNLOAD_MISSION: function SEND_DOWNLOAD_MISSION(state) {
	        state.messageState.download_mission.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_DOWNLOAD_MISSION: function SUCCEED_DOWNLOAD_MISSION(state, mission) {
	        state.messageState.download_mission.$set(0, state.messageState.SUCCESS);
	        state.messageState.download_mission.$set(1, mission);
	    },
	    FAIL_DOWNLOAD_MISSION: function FAIL_DOWNLOAD_MISSION(state, msg) {
	        state.messageState.download_mission.$set(0, state.messageState.FAILURE);
	        state.messageState.download_mission.$set(1, msg);
	    },
	    SEND_START_MISSION: function SEND_START_MISSION(state) {
	        state.messageState.start_mission.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_START_MISSION: function SUCCEED_START_MISSION(state) {
	        state.messageState.start_mission.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_START_MISSION: function FAIL_START_MISSION(state, msg) {
	        state.messageState.start_mission.$set(0, state.messageState.FAILURE);
	        state.messageState.start_mission.$set(1, msg);
	    },
	    SEND_STOP_MISSION: function SEND_STOP_MISSION(state) {
	        state.messageState.stop_mission.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_STOP_MISSION: function SUCCEED_STOP_MISSION(state) {
	        state.messageState.stop_mission.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_STOP_MISSION: function FAIL_STOP_MISSION(state, msg) {
	        state.messageState.stop_mission.$set(0, state.messageState.FAILURE);
	        state.messageState.stop_mission.$set(1, msg);
	    },
	    SEND_RESUME_MISSION: function SEND_RESUME_MISSION(state) {
	        state.messageState.resume_mission.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_RESUME_MISSION: function SUCCEED_RESUME_MISSION(state) {
	        state.messageState.resume_mission.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_RESUME_MISSION: function FAIL_RESUME_MISSION(state, msg) {
	        state.messageState.resume_mission.$set(0, state.messageState.FAILURE);
	        state.messageState.resume_mission.$set(1, msg);
	    },
	    SEND_ARM: function SEND_ARM(state) {
	        state.messageState.arm.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_ARM: function SUCCEED_ARM(state) {
	        state.messageState.arm.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_ARM: function FAIL_ARM(state, msg) {
	        state.messageState.arm.$set(0, state.messageState.FAILURE);
	        state.messageState.arm.$set(1, msg);
	    },
	    SEND_DISARM: function SEND_DISARM(state) {
	        state.messageState.disarm.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_DISARM: function SUCCEED_DISARM(state) {
	        state.messageState.disarm.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_DISARM: function FAIL_DISARM(state, msg) {
	        state.messageState.disarm.$set(0, state.messageState.FAILURE);
	        state.messageState.disarm.$set(1, msg);
	    },
	    SEND_KILL: function SEND_KILL(state) {
	        state.messageState.kill.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_KILL: function SUCCEED_KILL(state) {
	        state.messageState.kill.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_KILL: function FAIL_KILL(state, msg) {
	        state.messageState.kill.$set(0, state.messageState.FAILURE);
	        state.messageState.kill.$set(1, msg);
	    },
	    SEND_UNKILL: function SEND_UNKILL(state) {
	        state.messageState.unkill.$set(0, state.messageState.WAITING);
	    },
	    SUCCEED_UNKILL: function SUCCEED_UNKILL(state) {
	        state.messageState.unkill.$set(0, state.messageState.SUCCESS);
	    },
	    FAIL_UNKILL: function FAIL_UNKILL(state, msg) {
	        state.messageState.unkill.$set(0, state.messageState.FAILURE);
	        state.messageState.unkill.$set(1, msg);
	    }
	};
	
	exports.default = new _vuex2.default.Store({
	    state: initialState,
	    mutations: mutations
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Vuex v1.0.0-rc
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.Vuex = factory());
	}(this, function () { 'use strict';
	
	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
	  };
	
	  var classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };
	
	  var createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	
	  var toConsumableArray = function (arr) {
	    if (Array.isArray(arr)) {
	      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
	
	      return arr2;
	    } else {
	      return Array.from(arr);
	    }
	  };
	
	  /**
	   * Merge an array of objects into one.
	   *
	   * @param {Array<Object>} arr
	   * @return {Object}
	   */
	
	  function mergeObjects(arr) {
	    return arr.reduce(function (prev, obj) {
	      Object.keys(obj).forEach(function (key) {
	        var existing = prev[key];
	        if (existing) {
	          // allow multiple mutation objects to contain duplicate
	          // handlers for the same mutation type
	          if (Array.isArray(existing)) {
	            prev[key] = existing.concat(obj[key]);
	          } else {
	            prev[key] = [existing].concat(obj[key]);
	          }
	        } else {
	          prev[key] = obj[key];
	        }
	      });
	      return prev;
	    }, {});
	  }
	
	  /**
	   * Check whether the given value is Object or not
	   *
	   * @param {*} obj
	   * @return {Boolean}
	   */
	
	  function isObject(obj) {
	    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
	  }
	
	  /**
	   * Get state sub tree by given keys.
	   *
	   * @param {Object} state
	   * @param {Array<String>} nestedKeys
	   * @return {Object}
	   */
	  function getNestedState(state, nestedKeys) {
	    return nestedKeys.reduce(function (state, key) {
	      return state[key];
	    }, state);
	  }
	
	  /**
	   * Hacks to get access to Vue internals.
	   * Maybe we should expose these...
	   */
	
	  var Watcher = void 0;
	  function getWatcher(vm) {
	    if (!Watcher) {
	      var noop = function noop() {};
	      var unwatch = vm.$watch(noop, noop);
	      Watcher = vm._watchers[0].constructor;
	      unwatch();
	    }
	    return Watcher;
	  }
	
	  var Dep = void 0;
	  function getDep(vm) {
	    if (!Dep) {
	      Dep = vm._data.__ob__.dep.constructor;
	    }
	    return Dep;
	  }
	
	  var hook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	  function devtoolPlugin(store) {
	    if (!hook) return;
	
	    hook.emit('vuex:init', store);
	
	    hook.on('vuex:travel-to-state', function (targetState) {
	      store.replaceState(targetState);
	    });
	
	    store.on('mutation', function (mutation, state) {
	      hook.emit('vuex:mutation', mutation, state);
	    });
	  }
	
	  function override (Vue) {
	    var version = Number(Vue.version.split('.')[0]);
	
	    if (version >= 2) {
	      var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;
	      Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });
	    } else {
	      (function () {
	        // override init and inject vuex init procedure
	        // for 1.x backwards compatibility.
	        var _init = Vue.prototype._init;
	        Vue.prototype._init = function () {
	          var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	          options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;
	          _init.call(this, options);
	        };
	      })();
	    }
	
	    /**
	     * Vuex init hook, injected into each instances init hooks list.
	     */
	
	    function vuexInit() {
	      var options = this.$options;
	      var store = options.store;
	      var vuex = options.vuex;
	      // store injection
	
	      if (store) {
	        this.$store = store;
	      } else if (options.parent && options.parent.$store) {
	        this.$store = options.parent.$store;
	      }
	      // vuex option handling
	      if (vuex) {
	        if (!this.$store) {
	          console.warn('[vuex] store not injected. make sure to ' + 'provide the store option in your root component.');
	        }
	        var state = vuex.state;
	        var actions = vuex.actions;
	        var getters = vuex.getters;
	        // handle deprecated state option
	
	        if (state && !getters) {
	          console.warn('[vuex] vuex.state option will been deprecated in 1.0. ' + 'Use vuex.getters instead.');
	          getters = state;
	        }
	        // getters
	        if (getters) {
	          options.computed = options.computed || {};
	          for (var key in getters) {
	            defineVuexGetter(this, key, getters[key]);
	          }
	        }
	        // actions
	        if (actions) {
	          options.methods = options.methods || {};
	          for (var _key in actions) {
	            options.methods[_key] = makeBoundAction(this.$store, actions[_key], _key);
	          }
	        }
	      }
	    }
	
	    /**
	     * Setter for all getter properties.
	     */
	
	    function setter() {
	      throw new Error('vuex getter properties are read-only.');
	    }
	
	    /**
	     * Define a Vuex getter on an instance.
	     *
	     * @param {Vue} vm
	     * @param {String} key
	     * @param {Function} getter
	     */
	
	    function defineVuexGetter(vm, key, getter) {
	      if (typeof getter !== 'function') {
	        console.warn('[vuex] Getter bound to key \'vuex.getters.' + key + '\' is not a function.');
	      } else {
	        Object.defineProperty(vm, key, {
	          enumerable: true,
	          configurable: true,
	          get: makeComputedGetter(vm.$store, getter),
	          set: setter
	        });
	      }
	    }
	
	    /**
	     * Make a computed getter, using the same caching mechanism of computed
	     * properties. In addition, it is cached on the raw getter function using
	     * the store's unique cache id. This makes the same getter shared
	     * across all components use the same underlying watcher, and makes
	     * the getter evaluated only once during every flush.
	     *
	     * @param {Store} store
	     * @param {Function} getter
	     */
	
	    function makeComputedGetter(store, getter) {
	      var id = store._getterCacheId;
	
	      // cached
	      if (getter[id]) {
	        return getter[id];
	      }
	      var vm = store._vm;
	      var Watcher = getWatcher(vm);
	      var Dep = getDep(vm);
	      var watcher = new Watcher(vm, function (vm) {
	        return getter(vm.state);
	      }, null, { lazy: true });
	      var computedGetter = function computedGetter() {
	        if (watcher.dirty) {
	          watcher.evaluate();
	        }
	        if (Dep.target) {
	          watcher.depend();
	        }
	        return watcher.value;
	      };
	      getter[id] = computedGetter;
	      return computedGetter;
	    }
	
	    /**
	     * Make a bound-to-store version of a raw action function.
	     *
	     * @param {Store} store
	     * @param {Function} action
	     * @param {String} key
	     */
	
	    function makeBoundAction(store, action, key) {
	      if (typeof action !== 'function') {
	        console.warn('[vuex] Action bound to key \'vuex.actions.' + key + '\' is not a function.');
	      }
	      return function vuexBoundAction() {
	        for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	          args[_key2] = arguments[_key2];
	        }
	
	        return action.call.apply(action, [this, store].concat(args));
	      };
	    }
	
	    // option merging
	    var merge = Vue.config.optionMergeStrategies.computed;
	    Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {
	      if (!toVal) return fromVal;
	      if (!fromVal) return toVal;
	      return {
	        getters: merge(toVal.getters, fromVal.getters),
	        state: merge(toVal.state, fromVal.state),
	        actions: merge(toVal.actions, fromVal.actions)
	      };
	    };
	  }
	
	  var Vue = void 0;
	  var uid = 0;
	
	  var Store = function () {
	
	    /**
	     * @param {Object} options
	     *        - {Object} state
	     *        - {Object} actions
	     *        - {Object} mutations
	     *        - {Array} plugins
	     *        - {Boolean} strict
	     */
	
	    function Store() {
	      var _this = this;
	
	      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	      var _ref$state = _ref.state;
	      var state = _ref$state === undefined ? {} : _ref$state;
	      var _ref$mutations = _ref.mutations;
	      var mutations = _ref$mutations === undefined ? {} : _ref$mutations;
	      var _ref$modules = _ref.modules;
	      var modules = _ref$modules === undefined ? {} : _ref$modules;
	      var _ref$plugins = _ref.plugins;
	      var plugins = _ref$plugins === undefined ? [] : _ref$plugins;
	      var _ref$strict = _ref.strict;
	      var strict = _ref$strict === undefined ? false : _ref$strict;
	      classCallCheck(this, Store);
	
	      this._getterCacheId = 'vuex_store_' + uid++;
	      this._dispatching = false;
	      this._rootMutations = this._mutations = mutations;
	      this._modules = modules;
	      this._events = Object.create(null);
	      // bind dispatch to self
	      var dispatch = this.dispatch;
	      this.dispatch = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }
	
	        dispatch.apply(_this, args);
	      };
	      // use a Vue instance to store the state tree
	      // suppress warnings just in case the user has added
	      // some funky global mixins
	      if (!Vue) {
	        throw new Error('[vuex] must call Vue.use(Vuex) before creating a store instance.');
	      }
	      var silent = Vue.config.silent;
	      Vue.config.silent = true;
	      this._vm = new Vue({
	        data: {
	          state: state
	        }
	      });
	      Vue.config.silent = silent;
	      this._setupModuleState(state, modules);
	      this._setupModuleMutations(modules);
	      // add extra warnings in strict mode
	      if (strict) {
	        this._setupMutationCheck();
	      }
	      // apply plugins
	      devtoolPlugin(this);
	      plugins.forEach(function (plugin) {
	        return plugin(_this);
	      });
	    }
	
	    /**
	     * Getter for the entire state tree.
	     * Read only.
	     *
	     * @return {Object}
	     */
	
	    createClass(Store, [{
	      key: 'replaceState',
	
	
	      /**
	       * Replace root state.
	       *
	       * @param {Object} state
	       */
	
	      value: function replaceState(state) {
	        this._dispatching = true;
	        this._vm.state = state;
	        this._dispatching = false;
	      }
	
	      /**
	       * Dispatch an action.
	       *
	       * @param {String} type
	       */
	
	    }, {
	      key: 'dispatch',
	      value: function dispatch(type) {
	        for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	          payload[_key2 - 1] = arguments[_key2];
	        }
	
	        var silent = false;
	        var isObjectStyleDispatch = false;
	        // compatibility for object actions, e.g. FSA
	        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type.type && arguments.length === 1) {
	          isObjectStyleDispatch = true;
	          payload = type;
	          if (type.silent) silent = true;
	          type = type.type;
	        }
	        var handler = this._mutations[type];
	        var state = this.state;
	        if (handler) {
	          this._dispatching = true;
	          // apply the mutation
	          if (Array.isArray(handler)) {
	            handler.forEach(function (h) {
	              isObjectStyleDispatch ? h(state, payload) : h.apply(undefined, [state].concat(toConsumableArray(payload)));
	            });
	          } else {
	            isObjectStyleDispatch ? handler(state, payload) : handler.apply(undefined, [state].concat(toConsumableArray(payload)));
	          }
	          this._dispatching = false;
	          if (!silent) {
	            var mutation = isObjectStyleDispatch ? payload : { type: type, payload: payload };
	            this.emit('mutation', mutation, state);
	          }
	        } else {
	          console.warn('[vuex] Unknown mutation: ' + type);
	        }
	      }
	
	      /**
	       * Watch state changes on the store.
	       * Same API as Vue's $watch, except when watching a function,
	       * the function gets the state as the first argument.
	       *
	       * @param {Function} fn
	       * @param {Function} cb
	       * @param {Object} [options]
	       */
	
	    }, {
	      key: 'watch',
	      value: function watch(fn, cb, options) {
	        var _this2 = this;
	
	        if (typeof fn !== 'function') {
	          console.error('Vuex store.watch only accepts function.');
	          return;
	        }
	        return this._vm.$watch(function () {
	          return fn(_this2.state);
	        }, cb, options);
	      }
	
	      /**
	       * Hot update mutations & modules.
	       *
	       * @param {Object} options
	       *        - {Object} [mutations]
	       *        - {Object} [modules]
	       */
	
	    }, {
	      key: 'hotUpdate',
	      value: function hotUpdate() {
	        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var mutations = _ref2.mutations;
	        var modules = _ref2.modules;
	
	        this._rootMutations = this._mutations = mutations || this._rootMutations;
	        this._setupModuleMutations(modules || this._modules);
	      }
	
	      /**
	       * Attach sub state tree of each module to the root tree.
	       *
	       * @param {Object} state
	       * @param {Object} modules
	       */
	
	    }, {
	      key: '_setupModuleState',
	      value: function _setupModuleState(state, modules) {
	        var _this3 = this;
	
	        if (!isObject(modules)) return;
	
	        Object.keys(modules).forEach(function (key) {
	          var module = modules[key];
	
	          // set this module's state
	          Vue.set(state, key, module.state || {});
	
	          // retrieve nested modules
	          _this3._setupModuleState(state[key], module.modules);
	        });
	      }
	
	      /**
	       * Bind mutations for each module to its sub tree and
	       * merge them all into one final mutations map.
	       *
	       * @param {Object} updatedModules
	       */
	
	    }, {
	      key: '_setupModuleMutations',
	      value: function _setupModuleMutations(updatedModules) {
	        var modules = this._modules;
	        Object.keys(updatedModules).forEach(function (key) {
	          modules[key] = updatedModules[key];
	        });
	        var updatedMutations = this._createModuleMutations(modules, []);
	        this._mutations = mergeObjects([this._rootMutations].concat(toConsumableArray(updatedMutations)));
	      }
	
	      /**
	       * Helper method for _setupModuleMutations.
	       * The method retrieve nested sub modules and
	       * bind each mutations to its sub tree recursively.
	       *
	       * @param {Object} modules
	       * @param {Array<String>} nestedKeys
	       * @return {Array<Object>}
	       */
	
	    }, {
	      key: '_createModuleMutations',
	      value: function _createModuleMutations(modules, nestedKeys) {
	        var _this4 = this;
	
	        if (!isObject(modules)) return [];
	
	        return Object.keys(modules).map(function (key) {
	          var module = modules[key];
	          var newNestedKeys = nestedKeys.concat(key);
	
	          // retrieve nested modules
	          var nestedMutations = _this4._createModuleMutations(module.modules, newNestedKeys);
	
	          if (!module || !module.mutations) {
	            return mergeObjects(nestedMutations);
	          }
	
	          // bind mutations to sub state tree
	          var mutations = {};
	          Object.keys(module.mutations).forEach(function (name) {
	            var original = module.mutations[name];
	            mutations[name] = function (state) {
	              for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	                args[_key3 - 1] = arguments[_key3];
	              }
	
	              original.apply(undefined, [getNestedState(state, newNestedKeys)].concat(args));
	            };
	          });
	
	          // merge mutations of this module and nested modules
	          return mergeObjects([mutations].concat(toConsumableArray(nestedMutations)));
	        });
	      }
	
	      /**
	       * Setup mutation check: if the vuex instance's state is mutated
	       * outside of a mutation handler, we throw en error. This effectively
	       * enforces all mutations to the state to be trackable and hot-reloadble.
	       * However, this comes at a run time cost since we are doing a deep
	       * watch on the entire state tree, so it is only enalbed with the
	       * strict option is set to true.
	       */
	
	    }, {
	      key: '_setupMutationCheck',
	      value: function _setupMutationCheck() {
	        var _this5 = this;
	
	        var Watcher = getWatcher(this._vm);
	        /* eslint-disable no-new */
	        new Watcher(this._vm, 'state', function () {
	          if (!_this5._dispatching) {
	            throw new Error('[vuex] Do not mutate vuex store state outside mutation handlers.');
	          }
	        }, { deep: true, sync: true });
	        /* eslint-enable no-new */
	      }
	    }, {
	      key: 'state',
	      get: function get() {
	        return this._vm.state;
	      },
	      set: function set(v) {
	        throw new Error('[vuex] Use store.replaceState() to explicit replace store state.');
	      }
	    }]);
	    return Store;
	  }();
	
	  function install(_Vue) {
	    if (Vue) {
	      console.warn('[vuex] already installed. Vue.use(Vuex) should be called only once.');
	      return;
	    }
	    Vue = _Vue
	    // reuse Vue's event system
	    ;['on', 'off', 'once', 'emit'].forEach(function (e) {
	      Store.prototype[e] = Store.prototype['$' + e] = Vue.prototype['$' + e];
	    });
	    override(Vue);
	  }
	
	  // auto install in dist mode
	  if (typeof window !== 'undefined' && window.Vue) {
	    install(window.Vue);
	  }
	
	  var index = {
	    Store: Store,
	    install: install
	  };
	
	  return index;
	
	}));

/***/ },
/* 138 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    googleMaps: {
	        key: 'AIzaSyABnCcekyPecGnsA1Rj_NdWjmUafJ1yVqA',
	        v: 3
	    },
	    map: {
	        center: {
	            lat: 21.308731,
	            lng: -157.888815
	        },
	        zoom: 19,
	        disableDefaultUI: true,
	        disableDoubleClickZoom: true,
	        tilt: 0
	    },
	    settings: {
	        defaultMapType: 'SATELLITE'
	    }
	};

/***/ },
/* 139 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Fast UUID generator, RFC4122 version 4 compliant.
	 * @author Jeff Ward (jcward.com).
	 * @license MIT license
	 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
	 **/
	
	var lut = [];
	
	for (var i = 0; i < 256; i++) {
	    lut[i] = (i < 16 ? '0' : '') + i.toString(16);
	}
	
	var generate = function generate() {
	    var d0 = Math.random() * 0xffffffff | 0;
	    var d1 = Math.random() * 0xffffffff | 0;
	    var d2 = Math.random() * 0xffffffff | 0;
	    var d3 = Math.random() * 0xffffffff | 0;
	
	    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
	};
	
	var short = function short(prefix) {
	    prefix = prefix || '';
	
	    var uuid = generate();
	
	    return prefix + uuid.split('-')[0];
	};
	
	exports.default = {
	    generate: generate,
	    short: short
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,